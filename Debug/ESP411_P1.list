
ESP411_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a564  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023ac  0800a714  0800a714  0000b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac0  0800cac0  0000e0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac0  0800cac0  0000dac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cac8  0800cac8  0000e0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac8  0800cac8  0000dac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cacc  0800cacc  0000dacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  0800cad0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0b8  2**0
                  CONTENTS
 10 .bss          00001760  200000b8  200000b8  0000e0b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001818  20001818  0000e0b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8e4  00000000  00000000  0000e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a54  00000000  00000000  000289cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f3  00000000  00000000  0002db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028723  00000000  00000000  0002ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0d4  00000000  00000000  00057456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efcfa  00000000  00000000  0007352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00163224  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d0c  00000000  00000000  00163268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00169f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a6fc 	.word	0x0800a6fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	0800a6fc 	.word	0x0800a6fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	f6ad 3df8 	subw	sp, sp, #3064	@ 0xbf8
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f003 fc24 	bl	8003dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f8ac 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fc2e 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 fbbe 	bl	8000d14 <MX_DMA_Init>
  MX_DMA2D_Init();
 8000598:	f000 fa10 	bl	80009bc <MX_DMA2D_Init>
  MX_FMC_Init();
 800059c:	f000 fbda 	bl	8000d54 <MX_FMC_Init>
  MX_I2C3_Init();
 80005a0:	f000 fa3e 	bl	8000a20 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005a4:	f000 fa7c 	bl	8000aa0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005a8:	f000 fb2a 	bl	8000c00 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fb5e 	bl	8000c6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005b0:	f000 f906 	bl	80007c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005b4:	f000 f96e 	bl	8000894 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005b8:	f000 f9b6 	bl	8000928 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 fb80 	bl	8000cc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc2);
 80005c0:	4844      	ldr	r0, [pc, #272]	@ (80006d4 <main+0x154>)
 80005c2:	f003 fce1 	bl	8003f88 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80005c6:	4844      	ldr	r0, [pc, #272]	@ (80006d8 <main+0x158>)
 80005c8:	f003 fcde 	bl	8003f88 <HAL_ADC_Start>

  //  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValue, 1);
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adcBuf, 3 * ADC_CYCLES);
 80005cc:	f240 2201 	movw	r2, #513	@ 0x201
 80005d0:	4942      	ldr	r1, [pc, #264]	@ (80006dc <main+0x15c>)
 80005d2:	4843      	ldr	r0, [pc, #268]	@ (80006e0 <main+0x160>)
 80005d4:	f003 ffec 	bl	80045b0 <HAL_ADCEx_MultiModeStart_DMA>


  BSP_LCD_Reload(0);
 80005d8:	2000      	movs	r0, #0
 80005da:	f002 fe59 	bl	8003290 <BSP_LCD_Reload>
  HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	@ 0x64
 80005e0:	f003 fc6a 	bl	8003eb8 <HAL_Delay>
  BSP_LCD_Init();
 80005e4:	f002 fd6e 	bl	80030c4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);  // Layer 0 initialization
 80005e8:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005ec:	2000      	movs	r0, #0
 80005ee:	f002 fdeb 	bl	80031c8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005f2:	f04f 30ff 	mov.w	r0, #4294967295
 80005f6:	f002 fe8b 	bl	8003310 <BSP_LCD_Clear>
  DrawAxis();
 80005fa:	f000 fca1 	bl	8000f40 <DrawAxis>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
       // Ensure fft_adc array is cleared before each new set of ADC readings
       memset(fft_adc, 0, sizeof(fft_adc));
 80005fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000602:	2100      	movs	r1, #0
 8000604:	4837      	ldr	r0, [pc, #220]	@ (80006e4 <main+0x164>)
 8000606:	f008 fc11 	bl	8008e2c <memset>

       for (int i = 0; i < NUM_SAMPLES; i += 3) {
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	@ 0xbf4
 8000610:	e035      	b.n	800067e <main+0xfe>
           int adc1 = (int)(adcBuf[i] & 0xFFFF);
 8000612:	4a32      	ldr	r2, [pc, #200]	@ (80006dc <main+0x15c>)
 8000614:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061c:	b29b      	uxth	r3, r3
 800061e:	f8c7 3bf0 	str.w	r3, [r7, #3056]	@ 0xbf0
           int adc2 = (int)(adcBuf[i + 1] & 0xFFFF);
 8000622:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000626:	3301      	adds	r3, #1
 8000628:	4a2c      	ldr	r2, [pc, #176]	@ (80006dc <main+0x15c>)
 800062a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062e:	b29b      	uxth	r3, r3
 8000630:	f8c7 3bec 	str.w	r3, [r7, #3052]	@ 0xbec
           int adc3 = (int)(adcBuf[i + 2] & 0xFFFF);
 8000634:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000638:	3302      	adds	r3, #2
 800063a:	4a28      	ldr	r2, [pc, #160]	@ (80006dc <main+0x15c>)
 800063c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000640:	b29b      	uxth	r3, r3
 8000642:	f8c7 3be8 	str.w	r3, [r7, #3048]	@ 0xbe8

           fft_adc[i] = adc1;
 8000646:	4927      	ldr	r1, [pc, #156]	@ (80006e4 <main+0x164>)
 8000648:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 800064c:	f8d7 2bf0 	ldr.w	r2, [r7, #3056]	@ 0xbf0
 8000650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
           fft_adc[i+1] = adc2;
 8000654:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000658:	3301      	adds	r3, #1
 800065a:	4922      	ldr	r1, [pc, #136]	@ (80006e4 <main+0x164>)
 800065c:	f8d7 2bec 	ldr.w	r2, [r7, #3052]	@ 0xbec
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
           fft_adc[i+2] = adc3;
 8000664:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000668:	3302      	adds	r3, #2
 800066a:	491e      	ldr	r1, [pc, #120]	@ (80006e4 <main+0x164>)
 800066c:	f8d7 2be8 	ldr.w	r2, [r7, #3048]	@ 0xbe8
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
       for (int i = 0; i < NUM_SAMPLES; i += 3) {
 8000674:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000678:	3303      	adds	r3, #3
 800067a:	f8c7 3bf4 	str.w	r3, [r7, #3060]	@ 0xbf4
 800067e:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8000682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000686:	dbc4      	blt.n	8000612 <main+0x92>
       }

       // Explicitly clear the magnitudes array before each FFT computation
       float display_magnitudes[NUM_FREQ_BINS] = {0};
 8000688:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 800068c:	f6a3 33f8 	subw	r3, r3, #3064	@ 0xbf8
 8000690:	4618      	mov	r0, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000696:	461a      	mov	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f008 fbc7 	bl	8008e2c <memset>

       // Perform FFT processing
       float signal[SIGNAL_SIZE];
       generate_test_signal(signal);
 800069e:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fb50 	bl	8001d48 <generate_test_signal>
       fft(fft_adc, display_magnitudes, SIGNAL_SIZE);
 80006a8:	463b      	mov	r3, r7
 80006aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <main+0x164>)
 80006b2:	f001 f95f 	bl	8001974 <fft>

       // Ensure old data is cleared from the display before drawing new data
       BSP_LCD_Clear(LCD_COLOR_WHITE);
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ba:	f002 fe29 	bl	8003310 <BSP_LCD_Clear>
       DrawAxis();
 80006be:	f000 fc3f 	bl	8000f40 <DrawAxis>
       DrawFFTSpectrum(display_magnitudes);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fd9f 	bl	8001208 <DrawFFTSpectrum>
       BSP_LCD_DisplayStringAt(0, LINE(9), (uint8_t *)fft_value_str, CENTER_MODE);

       sprintf(fft_value_str, "FFT[25]: %d", fft_adc[25]);
       BSP_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)fft_value_str, CENTER_MODE);*/

       HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	@ 0x64
 80006cc:	f003 fbf4 	bl	8003eb8 <HAL_Delay>
  while (1) {
 80006d0:	e795      	b.n	80005fe <main+0x7e>
 80006d2:	bf00      	nop
 80006d4:	20001124 	.word	0x20001124
 80006d8:	2000116c 	.word	0x2000116c
 80006dc:	200000d8 	.word	0x200000d8
 80006e0:	200010dc 	.word	0x200010dc
 80006e4:	200008dc 	.word	0x200008dc

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	@ 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 fb98 	bl	8008e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <SystemClock_Config+0xd0>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	@ 0x40
 800071c:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <SystemClock_Config+0xd0>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000734:	4a21      	ldr	r2, [pc, #132]	@ (80007bc <SystemClock_Config+0xd4>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000760:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800076a:	2303      	movs	r3, #3
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4618      	mov	r0, r3
 8000774:	f005 ffa2 	bl	80066bc <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800077e:	f001 fbf1 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800078a:	2390      	movs	r3, #144	@ 0x90
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000794:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f006 fa03 	bl	8006bac <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007ac:	f001 fbda 	bl	8001f64 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	@ 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_ADC1_Init+0xc8>)
 80007e0:	4a2a      	ldr	r2, [pc, #168]	@ (800088c <MX_ADC1_Init+0xcc>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xc8>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xc8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xc8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xc8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xc8>)
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <MX_ADC1_Init+0xd0>)
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xc8>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000820:	2201      	movs	r2, #1
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	4816      	ldr	r0, [pc, #88]	@ (8000888 <MX_ADC1_Init+0xc8>)
 800082e:	f003 fb67 	bl	8003f00 <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000838:	f001 fb94 	bl	8001f64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 800083c:	2317      	movs	r3, #23
 800083e:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8000840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000844:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000852:	f003 ff79 	bl	8004748 <HAL_ADCEx_MultiModeConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800085c:	f001 fb82 	bl	8001f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_ADC1_Init+0xc8>)
 8000872:	f003 fc6f 	bl	8004154 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800087c:	f001 fb72 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200010dc 	.word	0x200010dc
 800088c:	40012000 	.word	0x40012000
 8000890:	0f000001 	.word	0x0f000001

08000894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <MX_ADC2_Init+0x90>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_ADC2_Init+0x8c>)
 80008ea:	f003 fb09 	bl	8003f00 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80008f4:	f001 fb36 	bl	8001f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_ADC2_Init+0x8c>)
 800090a:	f003 fc23 	bl	8004154 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000914:	f001 fb26 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20001124 	.word	0x20001124
 8000924:	40012100 	.word	0x40012100

08000928 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800093c:	4a1e      	ldr	r2, [pc, #120]	@ (80009b8 <MX_ADC3_Init+0x90>)
 800093e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000942:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000946:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000956:	2201      	movs	r2, #1
 8000958:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800096a:	2201      	movs	r2, #1
 800096c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 8000978:	2201      	movs	r2, #1
 800097a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800097e:	f003 fabf 	bl	8003f00 <HAL_ADC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8000988:	f001 faec 	bl	8001f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_ADC3_Init+0x8c>)
 800099e:	f003 fbd9 	bl	8004154 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80009a8:	f001 fadc 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000116c 	.word	0x2000116c
 80009b8:	40012200 	.word	0x40012200

080009bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009c2:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <MX_DMA2D_Init+0x60>)
 80009c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 80009f2:	f004 fc47 	bl	8005284 <HAL_DMA2D_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009fc:	f001 fab2 	bl	8001f64 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a00:	2101      	movs	r1, #1
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_DMA2D_Init+0x5c>)
 8000a04:	f004 fd9c 	bl	8005540 <HAL_DMA2D_ConfigLayer>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a0e:	f001 faa9 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20001214 	.word	0x20001214
 8000a1c:	4002b000 	.word	0x4002b000

08000a20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	@ (8000a98 <MX_I2C3_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a9c <MX_I2C3_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a5e:	f005 f96f 	bl	8005d40 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f001 fa7c 	bl	8001f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a70:	f005 faaa 	bl	8005fc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f001 fa73 	bl	8001f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_I2C3_Init+0x74>)
 8000a82:	f005 fadd 	bl	8006040 <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f001 fa6a 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20001254 	.word	0x20001254
 8000a98:	40005c00 	.word	0x40005c00
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b09a      	sub	sp, #104	@ 0x68
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aa6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aaa:	2234      	movs	r2, #52	@ 0x34
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 f9bc 	bl	8008e2c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2234      	movs	r2, #52	@ 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 f9b6 	bl	8008e2c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8000bfc <MX_LTDC_Init+0x15c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000acc:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ad8:	4b47      	ldr	r3, [pc, #284]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000ae4:	4b44      	ldr	r3, [pc, #272]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000aea:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000aec:	220e      	movs	r2, #14
 8000aee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000af0:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000af2:	2205      	movs	r2, #5
 8000af4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000af6:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000af8:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000afe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b00:	22f5      	movs	r2, #245	@ 0xf5
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000b04:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b06:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b0e:	22f7      	movs	r2, #247	@ 0xf7
 8000b10:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b12:	4b39      	ldr	r3, [pc, #228]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b1a:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b22:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b2a:	4833      	ldr	r0, [pc, #204]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b2c:	f005 fac8 	bl	80060c0 <HAL_LTDC_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8000b36:	f001 fa15 	bl	8001f64 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000b88:	f005 fb6a 	bl	8006260 <HAL_LTDC_ConfigLayer>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8000b92:	f001 f9e7 	bl	8001f64 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_LTDC_Init+0x158>)
 8000be2:	f005 fb3d 	bl	8006260 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8000bec:	f001 f9ba 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3768      	adds	r7, #104	@ 0x68
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200012a8 	.word	0x200012a8
 8000bfc:	40016800 	.word	0x40016800

08000c00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	@ (8000c68 <MX_SPI5_Init+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_SPI5_Init+0x64>)
 8000c52:	f006 fc1c 	bl	800748e <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f001 f982 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20001350 	.word	0x20001350
 8000c68:	40015000 	.word	0x40015000

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <MX_USART1_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f007 f9fa 	bl	800809c <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f001 f959 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200013a8 	.word	0x200013a8
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_USART3_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART3_UART_Init+0x4c>)
 8000cf8:	f007 f9d0 	bl	800809c <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f001 f92f 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200013f0 	.word	0x200013f0
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_DMA_Init+0x3c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <MX_DMA_Init+0x3c>)
 8000d24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_DMA_Init+0x3c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	203c      	movs	r0, #60	@ 0x3c
 8000d3c:	f003 fe9d 	bl	8004a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000d40:	203c      	movs	r0, #60	@ 0x3c
 8000d42:	f003 feb6 	bl	8004ab2 <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dec <MX_FMC_Init+0x98>)
 8000d70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d86:	2210      	movs	r2, #16
 8000d88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d8c:	2240      	movs	r2, #64	@ 0x40
 8000d8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000dae:	2310      	movs	r3, #16
 8000db0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000db2:	2310      	movs	r3, #16
 8000db4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000db6:	2310      	movs	r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <MX_FMC_Init+0x94>)
 8000dd0:	f006 facc 	bl	800736c <HAL_SDRAM_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000dda:	f001 f8c3 	bl	8001f64 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20001438 	.word	0x20001438
 8000dec:	a0000140 	.word	0xa0000140

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a42      	ldr	r2, [pc, #264]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	623b      	str	r3, [r7, #32]
 8000e20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a34      	ldr	r2, [pc, #208]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a2d      	ldr	r2, [pc, #180]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a26      	ldr	r2, [pc, #152]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a11      	ldr	r2, [pc, #68]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_GPIO_Init+0x128>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <MX_GPIO_Init+0x12c>)
 8000eee:	f004 ff0d 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ef2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_GPIO_Init+0x12c>)
 8000f0c:	f004 fc46 	bl	800579c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f10:	bf00      	nop
 8000f12:	3738      	adds	r7, #56	@ 0x38
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40021800 	.word	0x40021800

08000f20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200000d4 	.word	0x200000d4

08000f40 <DrawAxis>:


void DrawAxis() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	@ 0x38
 8000f44:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	f002 f9e1 	bl	8003310 <BSP_LCD_Clear>

  int x_origin = 40;
 8000f4e:	2328      	movs	r3, #40	@ 0x28
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  int y_origin = 40; // Moved to the top
 8000f52:	2328      	movs	r3, #40	@ 0x28
 8000f54:	623b      	str	r3, [r7, #32]
  int x_end = BSP_LCD_GetXSize() - 20;
 8000f56:	f002 f91f 	bl	8003198 <BSP_LCD_GetXSize>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	3b14      	subs	r3, #20
 8000f5e:	61fb      	str	r3, [r7, #28]
  int y_end = BSP_LCD_GetYSize() - 20;
 8000f60:	f002 f926 	bl	80031b0 <BSP_LCD_GetYSize>
 8000f64:	4603      	mov	r3, r0
 8000f66:	3b14      	subs	r3, #20
 8000f68:	61bb      	str	r3, [r7, #24]

  // Draw new horizontal and vertical axes
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f6a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000f6e:	f002 f99d 	bl	80032ac <BSP_LCD_SetTextColor>
//  BSP_LCD_DrawLine(x_origin, y_origin, x_end, y_origin); // Horizontal line at the top
//  BSP_LCD_DrawLine(x_origin, y_origin, x_origin, y_end); // Vertical axis on the left
  BSP_LCD_DrawHLine(x_origin, y_origin, 180);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	6a3a      	ldr	r2, [r7, #32]
 8000f78:	b291      	uxth	r1, r2
 8000f7a:	22b4      	movs	r2, #180	@ 0xb4
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 faf1 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(x_origin, y_origin, 250);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	b291      	uxth	r1, r2
 8000f8a:	22fa      	movs	r2, #250	@ 0xfa
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fb27 	bl	80035e0 <BSP_LCD_DrawVLine>

  // Add X-axis label (below the x-axis)
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f92:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000f96:	f002 f989 	bl	80032ac <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12); // Use a smaller font size
 8000f9a:	488f      	ldr	r0, [pc, #572]	@ (80011d8 <DrawAxis+0x298>)
 8000f9c:	f002 f99e 	bl	80032dc <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 3, (uint8_t *)"Amplitude (dB)", CENTER_MODE); // Y-axis label
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	4a8e      	ldr	r2, [pc, #568]	@ (80011dc <DrawAxis+0x29c>)
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f002 fa1e 	bl	80033e8 <BSP_LCD_DisplayStringAt>

  // Add Frequency label, vertically aligned next to the X-axis
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000fb0:	f002 f97c 	bl	80032ac <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8000fb4:	4888      	ldr	r0, [pc, #544]	@ (80011d8 <DrawAxis+0x298>)
 8000fb6:	f002 f991 	bl	80032dc <BSP_LCD_SetFont>

  // Calculate the starting position for the label
  int x_pos = x_end + 27;  // Position it next to the X-axis
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	331b      	adds	r3, #27
 8000fbe:	617b      	str	r3, [r7, #20]
  int y_pos = 100; // Middle of the Y-axis
 8000fc0:	2364      	movs	r3, #100	@ 0x64
 8000fc2:	613b      	str	r3, [r7, #16]

  // Iterate through each letter and stack it on top of the previous one
  const char* label = "Frequency (kHz)";
 8000fc4:	4b86      	ldr	r3, [pc, #536]	@ (80011e0 <DrawAxis+0x2a0>)
 8000fc6:	60fb      	str	r3, [r7, #12]
  int offset = -20; // Vertical offset for each character
 8000fc8:	f06f 0313 	mvn.w	r3, #19
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34

  // Draw each character one by one vertically (stacked)
  for (int i = 0; label[i] != '\0'; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fd2:	e014      	b.n	8000ffe <DrawAxis+0xbe>
    BSP_LCD_DisplayChar(x_pos, y_pos + offset, label[i]);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	b298      	uxth	r0, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	f002 f9b7 	bl	8003360 <BSP_LCD_DisplayChar>
    offset += 12; // Adjust this value based on font size to stack characters
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; label[i] != '\0'; i++) {
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1e4      	bne.n	8000fd4 <DrawAxis+0x94>
  }

//  int x_value = 0;
//  for (int i = 0;)

  for (int i = 0; i <= 180; i += 60){
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800100e:	e010      	b.n	8001032 <DrawAxis+0xf2>
	  BSP_LCD_DrawVLine(x_origin + i, y_origin-5, 5);
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	b29a      	uxth	r2, r3
 8001014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001016:	b29b      	uxth	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b298      	uxth	r0, r3
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	b29b      	uxth	r3, r3
 8001020:	3b05      	subs	r3, #5
 8001022:	b29b      	uxth	r3, r3
 8001024:	2205      	movs	r2, #5
 8001026:	4619      	mov	r1, r3
 8001028:	f002 fada 	bl	80035e0 <BSP_LCD_DrawVLine>
  for (int i = 0; i <= 180; i += 60){
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	333c      	adds	r3, #60	@ 0x3c
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001034:	2bb4      	cmp	r3, #180	@ 0xb4
 8001036:	ddeb      	ble.n	8001010 <DrawAxis+0xd0>
  }

  char buffer[10];  // Buffer to hold the string for the number

  for (int i = 0; i <= 180; i += 60) {
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800103c:	e01d      	b.n	800107a <DrawAxis+0x13a>
      snprintf(buffer, sizeof(buffer), "%d", i / -3);
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	4a68      	ldr	r2, [pc, #416]	@ (80011e4 <DrawAxis+0x2a4>)
 8001042:	fb82 1203 	smull	r1, r2, r2, r3
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	4638      	mov	r0, r7
 800104c:	4a66      	ldr	r2, [pc, #408]	@ (80011e8 <DrawAxis+0x2a8>)
 800104e:	210a      	movs	r1, #10
 8001050:	f007 fde0 	bl	8008c14 <sniprintf>
      BSP_LCD_DisplayStringAt(x_end - i -5, y_origin - 20, (uint8_t *)buffer, LEFT_MODE);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	b29a      	uxth	r2, r3
 8001058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105a:	b29b      	uxth	r3, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b05      	subs	r3, #5
 8001062:	b298      	uxth	r0, r3
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b14      	subs	r3, #20
 800106a:	b299      	uxth	r1, r3
 800106c:	463a      	mov	r2, r7
 800106e:	2303      	movs	r3, #3
 8001070:	f002 f9ba 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  for (int i = 0; i <= 180; i += 60) {
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	333c      	adds	r3, #60	@ 0x3c
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800107a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107c:	2bb4      	cmp	r3, #180	@ 0xb4
 800107e:	ddde      	ble.n	800103e <DrawAxis+0xfe>
//  BSP_LCD_DrawHLine(x_origin-5, y_origin+187, 5);
//  BSP_LCD_DrawHLine(x_origin-5, y_origin+198, 5);
//  BSP_LCD_DrawHLine(x_origin-5, y_origin+209, 5);
//  BSP_LCD_DrawHLine(x_origin-5, y_origin+222, 5);

  BSP_LCD_DrawHLine(x_origin-5, y_origin+35, 5); //5
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b05      	subs	r3, #5
 8001086:	b298      	uxth	r0, r3
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	b29b      	uxth	r3, r3
 800108c:	3323      	adds	r3, #35	@ 0x23
 800108e:	b29b      	uxth	r3, r3
 8001090:	2205      	movs	r2, #5
 8001092:	4619      	mov	r1, r3
 8001094:	f002 fa66 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+71, 5);  //10
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	b29b      	uxth	r3, r3
 800109c:	3b05      	subs	r3, #5
 800109e:	b298      	uxth	r0, r3
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3347      	adds	r3, #71	@ 0x47
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2205      	movs	r2, #5
 80010aa:	4619      	mov	r1, r3
 80010ac:	f002 fa5a 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+106, 5); //15
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3b05      	subs	r3, #5
 80010b6:	b298      	uxth	r0, r3
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	336a      	adds	r3, #106	@ 0x6a
 80010be:	b29b      	uxth	r3, r3
 80010c0:	2205      	movs	r2, #5
 80010c2:	4619      	mov	r1, r3
 80010c4:	f002 fa4e 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+142, 5); //20
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b05      	subs	r3, #5
 80010ce:	b298      	uxth	r0, r3
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	338e      	adds	r3, #142	@ 0x8e
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	2205      	movs	r2, #5
 80010da:	4619      	mov	r1, r3
 80010dc:	f002 fa42 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+177, 5); //25
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3b05      	subs	r3, #5
 80010e6:	b298      	uxth	r0, r3
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	33b1      	adds	r3, #177	@ 0xb1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2205      	movs	r2, #5
 80010f2:	4619      	mov	r1, r3
 80010f4:	f002 fa36 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+212, 5); //30
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	3b05      	subs	r3, #5
 80010fe:	b298      	uxth	r0, r3
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	b29b      	uxth	r3, r3
 8001104:	33d4      	adds	r3, #212	@ 0xd4
 8001106:	b29b      	uxth	r3, r3
 8001108:	2205      	movs	r2, #5
 800110a:	4619      	mov	r1, r3
 800110c:	f002 fa2a 	bl	8003564 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(x_origin-5, y_origin+250, 5); //35
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b05      	subs	r3, #5
 8001116:	b298      	uxth	r0, r3
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	b29b      	uxth	r3, r3
 800111c:	33fa      	adds	r3, #250	@ 0xfa
 800111e:	b29b      	uxth	r3, r3
 8001120:	2205      	movs	r2, #5
 8001122:	4619      	mov	r1, r3
 8001124:	f002 fa1e 	bl	8003564 <BSP_LCD_DrawHLine>




  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+35, (uint8_t *)"5", LEFT_MODE);
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	b29b      	uxth	r3, r3
 800112c:	3b14      	subs	r3, #20
 800112e:	b298      	uxth	r0, r3
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	b29b      	uxth	r3, r3
 8001134:	3323      	adds	r3, #35	@ 0x23
 8001136:	b299      	uxth	r1, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <DrawAxis+0x2ac>)
 800113c:	f002 f954 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+71, (uint8_t *)"10", LEFT_MODE);
 8001140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b14      	subs	r3, #20
 8001146:	b298      	uxth	r0, r3
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	b29b      	uxth	r3, r3
 800114c:	3347      	adds	r3, #71	@ 0x47
 800114e:	b299      	uxth	r1, r3
 8001150:	2303      	movs	r3, #3
 8001152:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <DrawAxis+0x2b0>)
 8001154:	f002 f948 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+106, (uint8_t *)"15", LEFT_MODE);
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b14      	subs	r3, #20
 800115e:	b298      	uxth	r0, r3
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	b29b      	uxth	r3, r3
 8001164:	336a      	adds	r3, #106	@ 0x6a
 8001166:	b299      	uxth	r1, r3
 8001168:	2303      	movs	r3, #3
 800116a:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <DrawAxis+0x2b4>)
 800116c:	f002 f93c 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+142, (uint8_t *)"20", LEFT_MODE);
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	b29b      	uxth	r3, r3
 8001174:	3b14      	subs	r3, #20
 8001176:	b298      	uxth	r0, r3
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	b29b      	uxth	r3, r3
 800117c:	338e      	adds	r3, #142	@ 0x8e
 800117e:	b299      	uxth	r1, r3
 8001180:	2303      	movs	r3, #3
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <DrawAxis+0x2b8>)
 8001184:	f002 f930 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+177, (uint8_t *)"25", LEFT_MODE);
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b14      	subs	r3, #20
 800118e:	b298      	uxth	r0, r3
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b29b      	uxth	r3, r3
 8001194:	33b1      	adds	r3, #177	@ 0xb1
 8001196:	b299      	uxth	r1, r3
 8001198:	2303      	movs	r3, #3
 800119a:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <DrawAxis+0x2bc>)
 800119c:	f002 f924 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+212, (uint8_t *)"30", LEFT_MODE);
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	3b14      	subs	r3, #20
 80011a6:	b298      	uxth	r0, r3
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	33d4      	adds	r3, #212	@ 0xd4
 80011ae:	b299      	uxth	r1, r3
 80011b0:	2303      	movs	r3, #3
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <DrawAxis+0x2c0>)
 80011b4:	f002 f918 	bl	80033e8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(x_origin - 20, y_origin+250, (uint8_t *)"35", LEFT_MODE);
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b14      	subs	r3, #20
 80011be:	b298      	uxth	r0, r3
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	33fa      	adds	r3, #250	@ 0xfa
 80011c6:	b299      	uxth	r1, r3
 80011c8:	2303      	movs	r3, #3
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <DrawAxis+0x2c4>)
 80011cc:	f002 f90c 	bl	80033e8 <BSP_LCD_DisplayStringAt>
//      BSP_LCD_DisplayStringAt(x_origin - 20, y_origin + i-5, (uint8_t *)buffer, LEFT_MODE);  // Display the value below the X-axis
//  }



}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	@ 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000048 	.word	0x20000048
 80011dc:	0800a714 	.word	0x0800a714
 80011e0:	0800a724 	.word	0x0800a724
 80011e4:	55555556 	.word	0x55555556
 80011e8:	0800a734 	.word	0x0800a734
 80011ec:	0800a738 	.word	0x0800a738
 80011f0:	0800a73c 	.word	0x0800a73c
 80011f4:	0800a740 	.word	0x0800a740
 80011f8:	0800a744 	.word	0x0800a744
 80011fc:	0800a748 	.word	0x0800a748
 8001200:	0800a74c 	.word	0x0800a74c
 8001204:	0800a750 	.word	0x0800a750

08001208 <DrawFFTSpectrum>:

void DrawFFTSpectrum(float* display_magnitudes) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    int x_origin = 40;
 8001210:	2328      	movs	r3, #40	@ 0x28
 8001212:	613b      	str	r3, [r7, #16]
    int y_origin = 40;
 8001214:	2328      	movs	r3, #40	@ 0x28
 8001216:	60fb      	str	r3, [r7, #12]

    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001218:	4816      	ldr	r0, [pc, #88]	@ (8001274 <DrawFFTSpectrum+0x6c>)
 800121a:	f002 f847 	bl	80032ac <BSP_LCD_SetTextColor>

    // Draw each frequency bin as a vertical line
    for (int i = 0; i < NUM_FREQ_BINS && i < 250; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e01d      	b.n	8001260 <DrawFFTSpectrum+0x58>
        int height = (int)display_magnitudes[i];
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	60bb      	str	r3, [r7, #8]
        if (height > 0) {
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0c      	ble.n	800125a <DrawFFTSpectrum+0x52>
            // Draw a vertical line for each bin
            BSP_LCD_DrawHLine(x_origin, y_origin + i, height);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	b298      	uxth	r0, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	b29a      	uxth	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	b292      	uxth	r2, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f002 f985 	bl	8003564 <BSP_LCD_DrawHLine>
    for (int i = 0; i < NUM_FREQ_BINS && i < 250; i++) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2bf9      	cmp	r3, #249	@ 0xf9
 8001264:	dc02      	bgt.n	800126c <DrawFFTSpectrum+0x64>
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2bf9      	cmp	r3, #249	@ 0xf9
 800126a:	dddb      	ble.n	8001224 <DrawFFTSpectrum+0x1c>
        }
    }
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	ff0000ff 	.word	0xff0000ff

08001278 <complex_add>:

// Complex number operations
static inline complex_t complex_add(complex_t a, complex_t b) {
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	@ 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	eeb0 6a40 	vmov.f32	s12, s0
 8001282:	eef0 6a60 	vmov.f32	s13, s1
 8001286:	eeb0 7a41 	vmov.f32	s14, s2
 800128a:	eef0 7a61 	vmov.f32	s15, s3
 800128e:	ed87 6a04 	vstr	s12, [r7, #16]
 8001292:	edc7 6a05 	vstr	s13, [r7, #20]
 8001296:	ed87 7a02 	vstr	s14, [r7, #8]
 800129a:	edc7 7a03 	vstr	s15, [r7, #12]
    complex_t result;
    result.real = a.real + b.real;
 800129e:	ed97 7a04 	vldr	s14, [r7, #16]
 80012a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	edc7 7a06 	vstr	s15, [r7, #24]
    result.imag = a.imag + b.imag;
 80012ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	edc7 7a07 	vstr	s15, [r7, #28]
    return result;
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	f107 0218 	add.w	r2, r7, #24
 80012c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80012ce:	6a3a      	ldr	r2, [r7, #32]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	ee07 2a10 	vmov	s14, r2
 80012d6:	ee07 3a90 	vmov	s15, r3
}
 80012da:	eeb0 0a47 	vmov.f32	s0, s14
 80012de:	eef0 0a67 	vmov.f32	s1, s15
 80012e2:	372c      	adds	r7, #44	@ 0x2c
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <complex_sub>:

static inline complex_t complex_sub(complex_t a, complex_t b) {
 80012ec:	b480      	push	{r7}
 80012ee:	b08b      	sub	sp, #44	@ 0x2c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	eeb0 6a40 	vmov.f32	s12, s0
 80012f6:	eef0 6a60 	vmov.f32	s13, s1
 80012fa:	eeb0 7a41 	vmov.f32	s14, s2
 80012fe:	eef0 7a61 	vmov.f32	s15, s3
 8001302:	ed87 6a04 	vstr	s12, [r7, #16]
 8001306:	edc7 6a05 	vstr	s13, [r7, #20]
 800130a:	ed87 7a02 	vstr	s14, [r7, #8]
 800130e:	edc7 7a03 	vstr	s15, [r7, #12]


    complex_t result;
    result.real = a.real - b.real;
 8001312:	ed97 7a04 	vldr	s14, [r7, #16]
 8001316:	edd7 7a02 	vldr	s15, [r7, #8]
 800131a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131e:	edc7 7a06 	vstr	s15, [r7, #24]
    result.imag = a.imag - b.imag;
 8001322:	ed97 7a05 	vldr	s14, [r7, #20]
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a07 	vstr	s15, [r7, #28]
    return result;
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	f107 0218 	add.w	r2, r7, #24
 800133a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001342:	6a3a      	ldr	r2, [r7, #32]
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	ee07 2a10 	vmov	s14, r2
 800134a:	ee07 3a90 	vmov	s15, r3
}
 800134e:	eeb0 0a47 	vmov.f32	s0, s14
 8001352:	eef0 0a67 	vmov.f32	s1, s15
 8001356:	372c      	adds	r7, #44	@ 0x2c
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <complex_mul>:

static inline complex_t complex_mul(complex_t a, complex_t b) {
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	@ 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	eeb0 6a40 	vmov.f32	s12, s0
 800136a:	eef0 6a60 	vmov.f32	s13, s1
 800136e:	eeb0 7a41 	vmov.f32	s14, s2
 8001372:	eef0 7a61 	vmov.f32	s15, s3
 8001376:	ed87 6a04 	vstr	s12, [r7, #16]
 800137a:	edc7 6a05 	vstr	s13, [r7, #20]
 800137e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001382:	edc7 7a03 	vstr	s15, [r7, #12]
    complex_t result;
    result.real = a.real * b.real - a.imag * b.imag;
 8001386:	ed97 7a04 	vldr	s14, [r7, #16]
 800138a:	edd7 7a02 	vldr	s15, [r7, #8]
 800138e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001392:	edd7 6a05 	vldr	s13, [r7, #20]
 8001396:	edd7 7a03 	vldr	s15, [r7, #12]
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a2:	edc7 7a06 	vstr	s15, [r7, #24]
    result.imag = a.real * b.imag + a.imag * b.real;
 80013a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80013aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	edd7 6a05 	vldr	s13, [r7, #20]
 80013b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	edc7 7a07 	vstr	s15, [r7, #28]
    return result;
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	f107 0218 	add.w	r2, r7, #24
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80013d6:	6a3a      	ldr	r2, [r7, #32]
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	ee07 2a10 	vmov	s14, r2
 80013de:	ee07 3a90 	vmov	s15, r3
}
 80013e2:	eeb0 0a47 	vmov.f32	s0, s14
 80013e6:	eef0 0a67 	vmov.f32	s1, s15
 80013ea:	372c      	adds	r7, #44	@ 0x2c
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <complex_abs>:

static inline float complex_abs(complex_t a) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	eeb0 7a40 	vmov.f32	s14, s0
 80013fe:	eef0 7a60 	vmov.f32	s15, s1
 8001402:	ed87 7a00 	vstr	s14, [r7]
 8001406:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrtf(a.real * a.real + a.imag * a.imag);
 800140a:	ed97 7a00 	vldr	s14, [r7]
 800140e:	edd7 7a00 	vldr	s15, [r7]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	edd7 6a01 	vldr	s13, [r7, #4]
 800141a:	edd7 7a01 	vldr	s15, [r7, #4]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	f008 fa77 	bl	800991c <sqrtf>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <twiddle_factor>:

// Compute complex exponential (e^(-j*2*pi*k/N))
static complex_t twiddle_factor(int k, int N) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
    complex_t result;
    float angle = -2.0f * PI * (float)k / (float)N;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80014b4 <twiddle_factor+0x78>
 8001454:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001466:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    result.real = cosf(angle);
 800146a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800146e:	f008 fa73 	bl	8009958 <cosf>
 8001472:	eef0 7a40 	vmov.f32	s15, s0
 8001476:	edc7 7a05 	vstr	s15, [r7, #20]
    result.imag = sinf(angle);
 800147a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800147e:	f008 faaf 	bl	80099e0 <sinf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	edc7 7a06 	vstr	s15, [r7, #24]
    return result;
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	f107 0214 	add.w	r2, r7, #20
 8001492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001496:	e883 0003 	stmia.w	r3, {r0, r1}
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	ee07 2a10 	vmov	s14, r2
 80014a2:	ee07 3a90 	vmov	s15, r3
}
 80014a6:	eeb0 0a47 	vmov.f32	s0, s14
 80014aa:	eef0 0a67 	vmov.f32	s1, s15
 80014ae:	3728      	adds	r7, #40	@ 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	c0c90fdb 	.word	0xc0c90fdb

080014b8 <fft_recursive>:

void fft_recursive(complex_t* x, complex_t* output, int N) {
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b091      	sub	sp, #68	@ 0x44
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
    // Base case
    if (N == 1) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d106      	bne.n	80014d8 <fft_recursive+0x20>
        output[0] = x[0];
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d2:	e883 0003 	stmia.w	r3, {r0, r1}
        return;
 80014d6:	e0f3      	b.n	80016c0 <fft_recursive+0x208>
    }

    // Allocate memory for even and odd components
    complex_t* x_even = (complex_t*)malloc(N/2 * sizeof(complex_t));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0fda      	lsrs	r2, r3, #31
 80014dc:	4413      	add	r3, r2
 80014de:	105b      	asrs	r3, r3, #1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 f9b8 	bl	8008858 <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
    complex_t* x_odd = (complex_t*)malloc(N/2 * sizeof(complex_t));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0fda      	lsrs	r2, r3, #31
 80014f0:	4413      	add	r3, r2
 80014f2:	105b      	asrs	r3, r3, #1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 f9ae 	bl	8008858 <malloc>
 80014fc:	4603      	mov	r3, r0
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
    complex_t* X_even = (complex_t*)malloc(N/2 * sizeof(complex_t));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0fda      	lsrs	r2, r3, #31
 8001504:	4413      	add	r3, r2
 8001506:	105b      	asrs	r3, r3, #1
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4618      	mov	r0, r3
 800150c:	f007 f9a4 	bl	8008858 <malloc>
 8001510:	4603      	mov	r3, r0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    complex_t* X_odd = (complex_t*)malloc(N/2 * sizeof(complex_t));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	0fda      	lsrs	r2, r3, #31
 8001518:	4413      	add	r3, r2
 800151a:	105b      	asrs	r3, r3, #1
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4618      	mov	r0, r3
 8001520:	f007 f99a 	bl	8008858 <malloc>
 8001524:	4603      	mov	r3, r0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Split into even and odd indices
    for (int i = 0; i < N/2; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152c:	e01d      	b.n	800156a <fft_recursive+0xb2>
        x_even[i] = x[2*i];
 800152e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	18d1      	adds	r1, r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800153c:	4413      	add	r3, r2
 800153e:	460a      	mov	r2, r1
 8001540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001544:	e883 0003 	stmia.w	r3, {r0, r1}
        x_odd[i] = x[2*i + 1];
 8001548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	3308      	adds	r3, #8
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	18d1      	adds	r1, r2, r3
 8001552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001558:	4413      	add	r3, r2
 800155a:	460a      	mov	r2, r1
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < N/2; i++) {
 8001564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001566:	3301      	adds	r3, #1
 8001568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	461a      	mov	r2, r3
 8001574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001576:	4293      	cmp	r3, r2
 8001578:	dbd9      	blt.n	800152e <fft_recursive+0x76>
    }

    // Recursive FFT on even and odd components
    fft_recursive(x_even, X_even, N/2);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0fda      	lsrs	r2, r3, #31
 800157e:	4413      	add	r3, r2
 8001580:	105b      	asrs	r3, r3, #1
 8001582:	461a      	mov	r2, r3
 8001584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001586:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001588:	f7ff ff96 	bl	80014b8 <fft_recursive>
    fft_recursive(x_odd, X_odd, N/2);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0fda      	lsrs	r2, r3, #31
 8001590:	4413      	add	r3, r2
 8001592:	105b      	asrs	r3, r3, #1
 8001594:	461a      	mov	r2, r3
 8001596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800159a:	f7ff ff8d 	bl	80014b8 <fft_recursive>

    // Combine results with twiddle factors
    for (int k = 0; k < N/2; k++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015a2:	e078      	b.n	8001696 <fft_recursive+0x1de>
        complex_t tw = twiddle_factor(k, N);
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80015a8:	f7ff ff48 	bl	800143c <twiddle_factor>
 80015ac:	eeb0 7a40 	vmov.f32	s14, s0
 80015b0:	eef0 7a60 	vmov.f32	s15, s1
 80015b4:	ed87 7a08 	vstr	s14, [r7, #32]
 80015b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        complex_t p = X_even[k];
 80015bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c2:	441a      	add	r2, r3
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015cc:	e883 0003 	stmia.w	r3, {r0, r1}
        complex_t q = complex_mul(tw, X_odd[k]);
 80015d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d6:	4413      	add	r3, r2
 80015d8:	ed93 6a00 	vldr	s12, [r3]
 80015dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80015e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80015e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015e8:	eeb0 1a46 	vmov.f32	s2, s12
 80015ec:	eef0 1a66 	vmov.f32	s3, s13
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f7ff feb2 	bl	8001360 <complex_mul>
 80015fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001600:	eef0 7a60 	vmov.f32	s15, s1
 8001604:	ed87 7a04 	vstr	s14, [r7, #16]
 8001608:	edc7 7a05 	vstr	s15, [r7, #20]

        output[k] = complex_add(p, q);
 800160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	18d4      	adds	r4, r2, r3
 8001614:	ed97 6a04 	vldr	s12, [r7, #16]
 8001618:	edd7 6a05 	vldr	s13, [r7, #20]
 800161c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001620:	edd7 7a07 	vldr	s15, [r7, #28]
 8001624:	eeb0 1a46 	vmov.f32	s2, s12
 8001628:	eef0 1a66 	vmov.f32	s3, s13
 800162c:	eeb0 0a47 	vmov.f32	s0, s14
 8001630:	eef0 0a67 	vmov.f32	s1, s15
 8001634:	f7ff fe20 	bl	8001278 <complex_add>
 8001638:	eeb0 7a40 	vmov.f32	s14, s0
 800163c:	eef0 7a60 	vmov.f32	s15, s1
 8001640:	ed84 7a00 	vstr	s14, [r4]
 8001644:	edc4 7a01 	vstr	s15, [r4, #4]
        output[k + N/2] = complex_sub(p, q);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0fda      	lsrs	r2, r3, #31
 800164c:	4413      	add	r3, r2
 800164e:	105b      	asrs	r3, r3, #1
 8001650:	461a      	mov	r2, r3
 8001652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	18d4      	adds	r4, r2, r3
 800165c:	ed97 6a04 	vldr	s12, [r7, #16]
 8001660:	edd7 6a05 	vldr	s13, [r7, #20]
 8001664:	ed97 7a06 	vldr	s14, [r7, #24]
 8001668:	edd7 7a07 	vldr	s15, [r7, #28]
 800166c:	eeb0 1a46 	vmov.f32	s2, s12
 8001670:	eef0 1a66 	vmov.f32	s3, s13
 8001674:	eeb0 0a47 	vmov.f32	s0, s14
 8001678:	eef0 0a67 	vmov.f32	s1, s15
 800167c:	f7ff fe36 	bl	80012ec <complex_sub>
 8001680:	eeb0 7a40 	vmov.f32	s14, s0
 8001684:	eef0 7a60 	vmov.f32	s15, s1
 8001688:	ed84 7a00 	vstr	s14, [r4]
 800168c:	edc4 7a01 	vstr	s15, [r4, #4]
    for (int k = 0; k < N/2; k++) {
 8001690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001692:	3301      	adds	r3, #1
 8001694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0fda      	lsrs	r2, r3, #31
 800169a:	4413      	add	r3, r2
 800169c:	105b      	asrs	r3, r3, #1
 800169e:	461a      	mov	r2, r3
 80016a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f6ff af7e 	blt.w	80015a4 <fft_recursive+0xec>
    }

    // Free allocated memory
    free(x_even);
 80016a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016aa:	f007 f8dd 	bl	8008868 <free>
    free(x_odd);
 80016ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80016b0:	f007 f8da 	bl	8008868 <free>
    free(X_even);
 80016b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016b6:	f007 f8d7 	bl	8008868 <free>
    free(X_odd);
 80016ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016bc:	f007 f8d4 	bl	8008868 <free>
}
 80016c0:	3744      	adds	r7, #68	@ 0x44
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
	...

080016c8 <map_to_frequency_bins>:
//        }
//    }
//}

void map_to_frequency_bins(complex_t* fft_output, float* magnitudes, int fft_size,
                           float sample_rate, float window_mean) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	f2ad 4d1c 	subw	sp, sp, #1052	@ 0x41c
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80016d4:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80016d8:	6018      	str	r0, [r3, #0]
 80016da:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80016de:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80016e2:	6019      	str	r1, [r3, #0]
 80016e4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80016e8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80016f2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80016f6:	ed83 0a00 	vstr	s0, [r3]
 80016fa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80016fe:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001702:	edc3 0a00 	vstr	s1, [r3]
    // Calculate frequency resolution of the FFT
    float freq_resolution = sample_rate / (float)fft_size;
 8001706:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800170a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800171c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001720:	edd3 6a00 	vldr	s13, [r3]
 8001724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001728:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 800172c:	edc3 7a00 	vstr	s15, [r3]

    // Zero out the magnitudes array
    memset(magnitudes, 0, NUM_FREQ_BINS * sizeof(float));
 8001730:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001734:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800173c:	2100      	movs	r1, #0
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	f007 fb74 	bl	8008e2c <memset>

    // Count how many FFT bins map to each frequency bin
    int bin_counts[NUM_FREQ_BINS] = {0};
 8001744:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001748:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800174c:	4618      	mov	r0, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	461a      	mov	r2, r3
 8001754:	2100      	movs	r1, #0
 8001756:	f007 fb69 	bl	8008e2c <memset>

    // Map FFT bins to custom frequency bins
    for (int i = 0; i < fft_size/2; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001760:	e098      	b.n	8001894 <map_to_frequency_bins+0x1cc>
        // Calculate the frequency this FFT bin represents
        float bin_freq = i * freq_resolution;
 8001762:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800177e:	edc3 7a00 	vstr	s15, [r3]

        // Skip frequencies below 20Hz
        if (bin_freq < 40.0f) {
 8001782:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800196c <map_to_frequency_bins+0x2a4>
 800178e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d477      	bmi.n	8001888 <map_to_frequency_bins+0x1c0>
            continue;
        }

        // Calculate which custom bin this frequency falls into
        int bin_index = (int)(bin_freq / 160.0f);
 8001798:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001970 <map_to_frequency_bins+0x2a8>
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

        // Ensure we're within the target array bounds
        if (bin_index >= 0 && bin_index < NUM_FREQ_BINS) {
 80017b4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db66      	blt.n	800188a <map_to_frequency_bins+0x1c2>
 80017bc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80017c0:	2bf9      	cmp	r3, #249	@ 0xf9
 80017c2:	dc62      	bgt.n	800188a <map_to_frequency_bins+0x1c2>
            // Accumulate power into appropriate bin
            float magnitude = complex_abs(fft_output[i]);
 80017c4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 80017ce:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	edd3 7a01 	vldr	s15, [r3, #4]
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f7ff fe05 	bl	80013f4 <complex_abs>
 80017ea:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80017ee:	ed83 0a00 	vstr	s0, [r3]
            // Normalize and scale the magnitude
            magnitude = 2.0f * magnitude / (float)fft_size / window_mean;
 80017f2:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017fe:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001802:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001810:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001814:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001818:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001824:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001828:	edc3 7a00 	vstr	s15, [r3]
            magnitudes[bin_index] += magnitude;
 800182c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001836:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4413      	add	r3, r2
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800184c:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4413      	add	r3, r2
 8001854:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8001858:	edd2 7a00 	vldr	s15, [r2]
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	edc3 7a00 	vstr	s15, [r3]
            bin_counts[bin_index]++;
 8001864:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001868:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800186c:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	1c59      	adds	r1, r3, #1
 8001876:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800187a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800187e:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001886:	e000      	b.n	800188a <map_to_frequency_bins+0x1c2>
            continue;
 8001888:	bf00      	nop
    for (int i = 0; i < fft_size/2; i++) {
 800188a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800188e:	3301      	adds	r3, #1
 8001890:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001894:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001898:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0fda      	lsrs	r2, r3, #31
 80018a0:	4413      	add	r3, r2
 80018a2:	105b      	asrs	r3, r3, #1
 80018a4:	461a      	mov	r2, r3
 80018a6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f6ff af59 	blt.w	8001762 <map_to_frequency_bins+0x9a>
        }
    }

    // Calculate the average power in each bin and convert back to magnitude
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 80018b6:	e04e      	b.n	8001956 <map_to_frequency_bins+0x28e>
        if (bin_counts[i] > 0) {
 80018b8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80018bc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018c0:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dd3f      	ble.n	800194c <map_to_frequency_bins+0x284>
            // Average the power
            magnitudes[i] /= bin_counts[i];
 80018cc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 80018d6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	edd3 6a00 	vldr	s13, [r3]
 80018e2:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80018e6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018ea:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001904:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4413      	add	r3, r2
 800190c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001910:	edc3 7a00 	vstr	s15, [r3]
            // Convert power back to magnitude
            magnitudes[i] = sqrtf(magnitudes[i]);
 8001914:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800191e:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4413      	add	r3, r2
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001934:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	18d4      	adds	r4, r2, r3
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	f007 ffec 	bl	800991c <sqrtf>
 8001944:	eef0 7a40 	vmov.f32	s15, s0
 8001948:	edc4 7a00 	vstr	s15, [r4]
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 800194c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 8001956:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 800195a:	2bf9      	cmp	r3, #249	@ 0xf9
 800195c:	ddac      	ble.n	80018b8 <map_to_frequency_bins+0x1f0>
        }
    }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	f207 471c 	addw	r7, r7, #1052	@ 0x41c
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	42200000 	.word	0x42200000
 8001970:	43200000 	.word	0x43200000

08001974 <fft>:

void fft(int* signal, float* display_magnitudes, int signal_size) {
 8001974:	b580      	push	{r7, lr}
 8001976:	f6ad 4d28 	subw	sp, sp, #3112	@ 0xc28
 800197a:	af00      	add	r7, sp, #0
 800197c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001980:	f6a3 431c 	subw	r3, r3, #3100	@ 0xc1c
 8001984:	6018      	str	r0, [r3, #0]
 8001986:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800198a:	f5a3 6342 	sub.w	r3, r3, #3104	@ 0xc20
 800198e:	6019      	str	r1, [r3, #0]
 8001990:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001994:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001998:	601a      	str	r2, [r3, #0]
    // Apply Hanning window - using integers first, then converting to float
    float window_values[SIGNAL_SIZE];
    float window_sum = 0.0f;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f607 4224 	addw	r2, r7, #3108	@ 0xc24
 80019a2:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < signal_size; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 80019aa:	e046      	b.n	8001a3a <fft+0xc6>
        // Hanning window formula: 0.5 * (1 - cos(2π*i/(N-1)))
        window_values[i] = 0.5f * (1.0f - cosf(2.0f * PI * i / (signal_size - 1)));
 80019ac:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	ed9f 7ada 	vldr	s14, [pc, #872]	@ 8001d24 <fft+0x3b0>
 80019bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019c0:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80019c4:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019d8:	eeb0 0a66 	vmov.f32	s0, s13
 80019dc:	f007 ffbc 	bl	8009958 <cosf>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80019f8:	f5a3 6203 	sub.w	r2, r3, #2096	@ 0x830
 80019fc:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	edc3 7a00 	vstr	s15, [r3]
        window_sum += window_values[i];
 8001a08:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001a0c:	f5a3 6203 	sub.w	r2, r3, #2096	@ 0x830
 8001a10:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < signal_size; i++) {
 8001a30:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8001a34:	3301      	adds	r3, #1
 8001a36:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8001a3a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001a3e:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001a42:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	@ 0xc20
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbaf      	blt.n	80019ac <fft+0x38>
    }
    float window_mean = window_sum / signal_size;
 8001a4c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001a50:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5e:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8001a62:	edd3 6a00 	vldr	s13, [r3]
 8001a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6a:	f607 430c 	addw	r3, r7, #3084	@ 0xc0c
 8001a6e:	edc3 7a00 	vstr	s15, [r3]

    // Center the input signal around zero and apply window
    complex_t* complex_signal = (complex_t*)malloc(signal_size * sizeof(complex_t));
 8001a72:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001a76:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 feea 	bl	8008858 <malloc>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f8c7 3c08 	str.w	r3, [r7, #3080]	@ 0xc08
    if (!complex_signal) {
 8001a8a:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	@ 0xc08
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <fft+0x126>
        printf("Memory allocation failed\n");
 8001a92:	48a5      	ldr	r0, [pc, #660]	@ (8001d28 <fft+0x3b4>)
 8001a94:	f007 f8b6 	bl	8008c04 <puts>
        return;
 8001a98:	e140      	b.n	8001d1c <fft+0x3a8>
    }

    for (int i = 0; i < signal_size; i++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8001aa0:	e039      	b.n	8001b16 <fft+0x1a2>
        float centered_signal = (float)(signal[i] - 2048);
 8001aa2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8001aac:	f6a2 421c 	subw	r2, r2, #3100	@ 0xc1c
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac2:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
        complex_signal[i].real = centered_signal * window_values[i];
 8001aca:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001ace:	f5a3 6203 	sub.w	r2, r3, #2096	@ 0x830
 8001ad2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	ed93 7a00 	vldr	s14, [r3]
 8001ade:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f8d7 2c08 	ldr.w	r2, [r7, #3080]	@ 0xc08
 8001ae8:	4413      	add	r3, r2
 8001aea:	f607 32f8 	addw	r2, r7, #3064	@ 0xbf8
 8001aee:	edd2 7a00 	vldr	s15, [r2]
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	edc3 7a00 	vstr	s15, [r3]
        complex_signal[i].imag = 0.0f;
 8001afa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f8d7 2c08 	ldr.w	r2, [r7, #3080]	@ 0xc08
 8001b04:	4413      	add	r3, r2
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < signal_size; i++) {
 8001b0c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8001b16:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001b1a:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001b1e:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	@ 0xc1c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbbc      	blt.n	8001aa2 <fft+0x12e>
    }

    // Perform FFT
    complex_t* fft_output = (complex_t*)malloc(signal_size * sizeof(complex_t));
 8001b28:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001b2c:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f006 fe8f 	bl	8008858 <malloc>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8c7 3c04 	str.w	r3, [r7, #3076]	@ 0xc04
    if (!fft_output) {
 8001b40:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	@ 0xc04
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <fft+0x1e4>
        printf("Memory allocation failed\n");
 8001b48:	4877      	ldr	r0, [pc, #476]	@ (8001d28 <fft+0x3b4>)
 8001b4a:	f007 f85b 	bl	8008c04 <puts>
        free(complex_signal);
 8001b4e:	f8d7 0c08 	ldr.w	r0, [r7, #3080]	@ 0xc08
 8001b52:	f006 fe89 	bl	8008868 <free>
        return;
 8001b56:	e0e1      	b.n	8001d1c <fft+0x3a8>
    }

    fft_recursive(complex_signal, fft_output, signal_size);
 8001b58:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001b5c:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f8d7 1c04 	ldr.w	r1, [r7, #3076]	@ 0xc04
 8001b66:	f8d7 0c08 	ldr.w	r0, [r7, #3080]	@ 0xc08
 8001b6a:	f7ff fca5 	bl	80014b8 <fft_recursive>

    // Ensure magnitudes array is zeroed out
    float magnitudes[NUM_FREQ_BINS] = {0}; // Clear values before accumulating
 8001b6e:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001b72:	f6a3 4318 	subw	r3, r3, #3096	@ 0xc18
 8001b76:	4618      	mov	r0, r3
 8001b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f007 f954 	bl	8008e2c <memset>

    // Map FFT output to frequency bins
    map_to_frequency_bins(fft_output, magnitudes, signal_size, SAMPLE_RATE, window_mean);
 8001b84:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001b88:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8001b8c:	f107 0110 	add.w	r1, r7, #16
 8001b90:	f607 420c 	addw	r2, r7, #3084	@ 0xc0c
 8001b94:	edd2 0a00 	vldr	s1, [r2]
 8001b98:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001d2c <fft+0x3b8>
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f8d7 0c04 	ldr.w	r0, [r7, #3076]	@ 0xc04
 8001ba2:	f7ff fd91 	bl	80016c8 <map_to_frequency_bins>

    // Find the maximum magnitude for normalization
    float max_magnitude = 0.0f;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	f607 4218 	addw	r2, r7, #3096	@ 0xc18
 8001bae:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 8001bb6:	e023      	b.n	8001c00 <fft+0x28c>
        if (magnitudes[i] > max_magnitude) {
 8001bb8:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001bbc:	f6a3 4218 	subw	r2, r3, #3096	@ 0xc18
 8001bc0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d50b      	bpl.n	8001bf6 <fft+0x282>
            max_magnitude = magnitudes[i];
 8001bde:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001be2:	f6a3 4218 	subw	r2, r3, #3096	@ 0xc18
 8001be6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f607 4218 	addw	r2, r7, #3096	@ 0xc18
 8001bf4:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 8001bf6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 8001c00:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8001c04:	2bf9      	cmp	r3, #249	@ 0xf9
 8001c06:	ddd7      	ble.n	8001bb8 <fft+0x244>
        }
    }

    // Prevent division by zero
    float scale_factor = (max_magnitude > 0.01f) ? (DISPLAY_HEIGHT / max_magnitude) : (DISPLAY_HEIGHT * 10.0f);
 8001c08:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d30 <fft+0x3bc>
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	dd08      	ble.n	8001c30 <fft+0x2bc>
 8001c1e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001d34 <fft+0x3c0>
 8001c22:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	e001      	b.n	8001c34 <fft+0x2c0>
 8001c30:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8001d38 <fft+0x3c4>
 8001c34:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 8001c38:	edc3 7a00 	vstr	s15, [r3]

    // Limit scaling factor to prevent extreme values
    if (scale_factor > DISPLAY_HEIGHT * 100.0f) {
 8001c3c:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001d3c <fft+0x3c8>
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	dd03      	ble.n	8001c5a <fft+0x2e6>
        scale_factor = DISPLAY_HEIGHT * 100.0f;
 8001c52:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <fft+0x3cc>)
 8001c54:	f507 6240 	add.w	r2, r7, #3072	@ 0xc00
 8001c58:	6013      	str	r3, [r2, #0]
    }

    // Scale magnitudes to fit display
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
 8001c60:	e050      	b.n	8001d04 <fft+0x390>
        float log_scale = 20.0f * log10f(magnitudes[i]);
 8001c62:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001c66:	f6a3 4218 	subw	r2, r3, #3096	@ 0xc18
 8001c6a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	f007 fe21 	bl	80098c0 <log10f>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	f607 33fc 	addw	r3, r7, #3068	@ 0xbfc
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
        display_magnitudes[i] = log_scale * DISPLAY_HEIGHT / 30;
 8001c92:	f607 33fc 	addw	r3, r7, #3068	@ 0xbfc
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d34 <fft+0x3c0>
 8001c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ca2:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8001cac:	f5a2 6242 	sub.w	r2, r2, #3104	@ 0xc20
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	edc3 7a00 	vstr	s15, [r3]

        // Ensure values stay within display bounds
        if (display_magnitudes[i] > DISPLAY_HEIGHT) {
 8001cc0:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8001cca:	f5a2 6242 	sub.w	r2, r2, #3104	@ 0xc20
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d34 <fft+0x3c0>
 8001cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	dd0a      	ble.n	8001cfa <fft+0x386>
            display_magnitudes[i] = DISPLAY_HEIGHT;
 8001ce4:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8001cee:	f5a2 6242 	sub.w	r2, r2, #3104	@ 0xc20
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <fft+0x3d0>)
 8001cf8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_FREQ_BINS; i++) {
 8001cfa:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
 8001d04:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001d08:	2bf9      	cmp	r3, #249	@ 0xf9
 8001d0a:	ddaa      	ble.n	8001c62 <fft+0x2ee>
        }
    }

    // Free allocated memory
    free(complex_signal);
 8001d0c:	f8d7 0c08 	ldr.w	r0, [r7, #3080]	@ 0xc08
 8001d10:	f006 fdaa 	bl	8008868 <free>
    free(fft_output);
 8001d14:	f8d7 0c04 	ldr.w	r0, [r7, #3076]	@ 0xc04
 8001d18:	f006 fda6 	bl	8008868 <free>
}
 8001d1c:	f607 4728 	addw	r7, r7, #3112	@ 0xc28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40c90fdb 	.word	0x40c90fdb
 8001d28:	0800a754 	.word	0x0800a754
 8001d2c:	479c4000 	.word	0x479c4000
 8001d30:	3c23d70a 	.word	0x3c23d70a
 8001d34:	43340000 	.word	0x43340000
 8001d38:	44e10000 	.word	0x44e10000
 8001d3c:	468ca000 	.word	0x468ca000
 8001d40:	468ca000 	.word	0x468ca000
 8001d44:	43340000 	.word	0x43340000

08001d48 <generate_test_signal>:

void generate_test_signal(int* signal) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	ed2d 8b02 	vpush	{d8}
 8001d4e:	f5ad 6d02 	sub.w	sp, sp, #2080	@ 0x820
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001d58:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001d5c:	6018      	str	r0, [r3, #0]
    float t[SIGNAL_SIZE];

    // Create time vector
    for (int i = 0; i < SIGNAL_SIZE; i++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8001d64:	e018      	b.n	8001d98 <generate_test_signal+0x50>
        t[i] = (float)i / SAMPLE_RATE;
 8001d66:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d72:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001f48 <generate_test_signal+0x200>
 8001d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001d7e:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 8001d82:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < SIGNAL_SIZE; i++) {
 8001d8e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8001d98:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da0:	dbe1      	blt.n	8001d66 <generate_test_signal+0x1e>
    }

    // Generate a signal with multiple frequencies
    float freq1 = 5000.0f;  // 2 kHz
 8001da2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <generate_test_signal+0x204>)
 8001da4:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8001da8:	6013      	str	r3, [r2, #0]
    float freq2 = 10000.0f;  // 8 kHz
 8001daa:	4b69      	ldr	r3, [pc, #420]	@ (8001f50 <generate_test_signal+0x208>)
 8001dac:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 8001db0:	6013      	str	r3, [r2, #0]
    float freq3 = 15000.0f; // ~20 kHz
 8001db2:	4b68      	ldr	r3, [pc, #416]	@ (8001f54 <generate_test_signal+0x20c>)
 8001db4:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 8001db8:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < SIGNAL_SIZE; i++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8001dc0:	e0b4      	b.n	8001f2c <generate_test_signal+0x1e4>
        // Generate floating point signal (-1.0 to 1.0 range)
        float float_signal = 0.1f * sinf(2.0f * PI * freq1 * t[i]) +
 8001dc2:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f58 <generate_test_signal+0x210>
 8001dce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dd2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001dd6:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 8001dda:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	f007 fdf7 	bl	80099e0 <sinf>
 8001df2:	eef0 7a40 	vmov.f32	s15, s0
 8001df6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001f5c <generate_test_signal+0x214>
 8001dfa:	ee27 8a87 	vmul.f32	s16, s15, s14
                            0.1f * sinf(2.0f * PI * freq2 * t[i]) +
 8001dfe:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001f58 <generate_test_signal+0x210>
 8001e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e12:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 8001e16:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	f007 fdd9 	bl	80099e0 <sinf>
 8001e2e:	eef0 7a40 	vmov.f32	s15, s0
 8001e32:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001f5c <generate_test_signal+0x214>
 8001e36:	ee67 7a87 	vmul.f32	s15, s15, s14
        float float_signal = 0.1f * sinf(2.0f * PI * freq1 * t[i]) +
 8001e3a:	ee38 8a27 	vadd.f32	s16, s16, s15
                            0.1f * sinf(2.0f * PI * freq3 * t[i]);
 8001e3e:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001f58 <generate_test_signal+0x210>
 8001e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001e52:	f6a3 0218 	subw	r2, r3, #2072	@ 0x818
 8001e56:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f007 fdb9 	bl	80099e0 <sinf>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001f5c <generate_test_signal+0x214>
 8001e76:	ee67 7a87 	vmul.f32	s15, s15, s14
        float float_signal = 0.1f * sinf(2.0f * PI * freq1 * t[i]) +
 8001e7a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001e7e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001e82:	edc3 7a00 	vstr	s15, [r3]

        // Map from [-1.0, 1.0] to [0, 4095] for ADC range
        // First scale to [0, 1.0] then to [0, 4095]
        signal[i] = (int)((float_signal + 1.0f) * 0.5f * 4095.0f);
 8001e86:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f60 <generate_test_signal+0x218>
 8001ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001eb0:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebc:	ee17 2a90 	vmov	r2, s15
 8001ec0:	601a      	str	r2, [r3, #0]

        // Ensure signal stays within ADC range
        if (signal[i] < 0) signal[i] = 0;
 8001ec2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001ecc:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da0a      	bge.n	8001ef0 <generate_test_signal+0x1a8>
 8001eda:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001ee4:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
        if (signal[i] > 4095) signal[i] = 4095;
 8001ef0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001efa:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f08:	db0b      	blt.n	8001f22 <generate_test_signal+0x1da>
 8001f0a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001f14:	f6a2 021c 	subw	r2, r2, #2076	@ 0x81c
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001f20:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SIGNAL_SIZE; i++) {
 8001f22:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001f26:	3301      	adds	r3, #1
 8001f28:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8001f2c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f34:	f6ff af45 	blt.w	8001dc2 <generate_test_signal+0x7a>
    }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 8001f40:	46bd      	mov	sp, r7
 8001f42:	ecbd 8b02 	vpop	{d8}
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	479c4000 	.word	0x479c4000
 8001f4c:	459c4000 	.word	0x459c4000
 8001f50:	461c4000 	.word	0x461c4000
 8001f54:	466a6000 	.word	0x466a6000
 8001f58:	40c90fdb 	.word	0x40c90fdb
 8001f5c:	3dcccccd 	.word	0x3dcccccd
 8001f60:	457ff000 	.word	0x457ff000

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <Error_Handler+0x8>

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	@ 0x38
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8002154 <HAL_ADC_MspInit+0x194>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d159      	bne.n	8002096 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a5b      	ldr	r2, [pc, #364]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a54      	ldr	r2, [pc, #336]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201a:	2301      	movs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	484b      	ldr	r0, [pc, #300]	@ (800215c <HAL_ADC_MspInit+0x19c>)
 800202e:	f003 fbb5 	bl	800579c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002032:	4b4b      	ldr	r3, [pc, #300]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <HAL_ADC_MspInit+0x1a4>)
 8002036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002038:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203e:	4b48      	ldr	r3, [pc, #288]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002044:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800204a:	4b45      	ldr	r3, [pc, #276]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800204c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002054:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800205a:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800205c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002062:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800206a:	4b3d      	ldr	r3, [pc, #244]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800206c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002070:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002078:	4839      	ldr	r0, [pc, #228]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800207a:	f002 fd35 	bl	8004ae8 <HAL_DMA_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002084:	f7ff ff6e 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a35      	ldr	r2, [pc, #212]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 800208c:	639a      	str	r2, [r3, #56]	@ 0x38
 800208e:	4a34      	ldr	r2, [pc, #208]	@ (8002160 <HAL_ADC_MspInit+0x1a0>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002094:	e05a      	b.n	800214c <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a33      	ldr	r2, [pc, #204]	@ (8002168 <HAL_ADC_MspInit+0x1a8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d128      	bne.n	80020f2 <HAL_ADC_MspInit+0x132>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	481c      	ldr	r0, [pc, #112]	@ (800215c <HAL_ADC_MspInit+0x19c>)
 80020ec:	f003 fb56 	bl	800579c <HAL_GPIO_Init>
}
 80020f0:	e02c      	b.n	800214c <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_ADC_MspInit+0x1ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d127      	bne.n	800214c <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6453      	str	r3, [r2, #68]	@ 0x44
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6313      	str	r3, [r2, #48]	@ 0x30
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_ADC_MspInit+0x198>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002134:	2301      	movs	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	@ (800215c <HAL_ADC_MspInit+0x19c>)
 8002148:	f003 fb28 	bl	800579c <HAL_GPIO_Init>
}
 800214c:	bf00      	nop
 800214e:	3738      	adds	r7, #56	@ 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40012000 	.word	0x40012000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	200011b4 	.word	0x200011b4
 8002164:	40026470 	.word	0x40026470
 8002168:	40012100 	.word	0x40012100
 800216c:	40012200 	.word	0x40012200

08002170 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_DMA2D_MspInit+0x3c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_DMA2D_MspInit+0x40>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <HAL_DMA2D_MspInit+0x40>)
 800218c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_DMA2D_MspInit+0x40>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	4002b000 	.word	0x4002b000
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a29      	ldr	r2, [pc, #164]	@ (8002278 <HAL_I2C_MspInit+0xc4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d14b      	bne.n	800226e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a27      	ldr	r2, [pc, #156]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a20      	ldr	r2, [pc, #128]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800220e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002214:	2312      	movs	r3, #18
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002220:	2304      	movs	r3, #4
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4815      	ldr	r0, [pc, #84]	@ (8002280 <HAL_I2C_MspInit+0xcc>)
 800222c:	f003 fab6 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002236:	2312      	movs	r3, #18
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002242:	2304      	movs	r3, #4
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	480d      	ldr	r0, [pc, #52]	@ (8002284 <HAL_I2C_MspInit+0xd0>)
 800224e:	f003 faa5 	bl	800579c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 800225c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_I2C_MspInit+0xc8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	@ 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40005c00 	.word	0x40005c00
 800227c:	40023800 	.word	0x40023800
 8002280:	40020800 	.word	0x40020800
 8002284:	40020000 	.word	0x40020000

08002288 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b09a      	sub	sp, #104	@ 0x68
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a4:	2230      	movs	r2, #48	@ 0x30
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 fdbf 	bl	8008e2c <memset>
  if(hltdc->Instance==LTDC)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a81      	ldr	r2, [pc, #516]	@ (80024b8 <HAL_LTDC_MspInit+0x230>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	f040 80fa 	bne.w	80024ae <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022ba:	2308      	movs	r3, #8
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022be:	23c0      	movs	r3, #192	@ 0xc0
 80022c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80022c2:	2304      	movs	r3, #4
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80022c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fe8b 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80022dc:	f7ff fe42 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	4b75      	ldr	r3, [pc, #468]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	4a74      	ldr	r2, [pc, #464]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 80022ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f0:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	4b6e      	ldr	r3, [pc, #440]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	4a6d      	ldr	r2, [pc, #436]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002306:	f043 0320 	orr.w	r3, r3, #32
 800230a:	6313      	str	r3, [r2, #48]	@ 0x30
 800230c:	4b6b      	ldr	r3, [pc, #428]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	4b67      	ldr	r3, [pc, #412]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	4a66      	ldr	r2, [pc, #408]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6313      	str	r3, [r2, #48]	@ 0x30
 8002328:	4b64      	ldr	r3, [pc, #400]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	4a5f      	ldr	r2, [pc, #380]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	6313      	str	r3, [r2, #48]	@ 0x30
 8002344:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800235a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800235e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002360:	4b56      	ldr	r3, [pc, #344]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	4a51      	ldr	r2, [pc, #324]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6313      	str	r3, [r2, #48]	@ 0x30
 800237c:	4b4f      	ldr	r3, [pc, #316]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6313      	str	r3, [r2, #48]	@ 0x30
 8002398:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <HAL_LTDC_MspInit+0x234>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023b6:	230e      	movs	r3, #14
 80023b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023be:	4619      	mov	r1, r3
 80023c0:	483f      	ldr	r0, [pc, #252]	@ (80024c0 <HAL_LTDC_MspInit+0x238>)
 80023c2:	f003 f9eb 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 80023c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80023ca:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d8:	230e      	movs	r3, #14
 80023da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023e0:	4619      	mov	r1, r3
 80023e2:	4838      	ldr	r0, [pc, #224]	@ (80024c4 <HAL_LTDC_MspInit+0x23c>)
 80023e4:	f003 f9da 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023e8:	2303      	movs	r3, #3
 80023ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023f8:	2309      	movs	r3, #9
 80023fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002400:	4619      	mov	r1, r3
 8002402:	4831      	ldr	r0, [pc, #196]	@ (80024c8 <HAL_LTDC_MspInit+0x240>)
 8002404:	f003 f9ca 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002408:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800240c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800241a:	230e      	movs	r3, #14
 800241c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002422:	4619      	mov	r1, r3
 8002424:	4828      	ldr	r0, [pc, #160]	@ (80024c8 <HAL_LTDC_MspInit+0x240>)
 8002426:	f003 f9b9 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800242a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800243c:	230e      	movs	r3, #14
 800243e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002440:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002444:	4619      	mov	r1, r3
 8002446:	4821      	ldr	r0, [pc, #132]	@ (80024cc <HAL_LTDC_MspInit+0x244>)
 8002448:	f003 f9a8 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244c:	23c0      	movs	r3, #192	@ 0xc0
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800245c:	230e      	movs	r3, #14
 800245e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002464:	4619      	mov	r1, r3
 8002466:	481a      	ldr	r0, [pc, #104]	@ (80024d0 <HAL_LTDC_MspInit+0x248>)
 8002468:	f003 f998 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800246c:	2308      	movs	r3, #8
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800247c:	230e      	movs	r3, #14
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002480:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002484:	4619      	mov	r1, r3
 8002486:	4813      	ldr	r0, [pc, #76]	@ (80024d4 <HAL_LTDC_MspInit+0x24c>)
 8002488:	f003 f988 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800248c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002490:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800249e:	2309      	movs	r3, #9
 80024a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024a6:	4619      	mov	r1, r3
 80024a8:	4808      	ldr	r0, [pc, #32]	@ (80024cc <HAL_LTDC_MspInit+0x244>)
 80024aa:	f003 f977 	bl	800579c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80024ae:	bf00      	nop
 80024b0:	3768      	adds	r7, #104	@ 0x68
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40016800 	.word	0x40016800
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00

080024d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	@ (800255c <HAL_SPI_MspInit+0x84>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12c      	bne.n	8002554 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 8002504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002508:	6453      	str	r3, [r2, #68]	@ 0x44
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_SPI_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002532:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002544:	2305      	movs	r3, #5
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_SPI_MspInit+0x8c>)
 8002550:	f003 f924 	bl	800579c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40015000 	.word	0x40015000
 8002560:	40023800 	.word	0x40023800
 8002564:	40021400 	.word	0x40021400

08002568 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_SPI_MspDeInit+0x30>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10a      	bne.n	8002590 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_SPI_MspDeInit+0x34>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_SPI_MspDeInit+0x34>)
 8002580:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002584:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002586:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800258a:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <HAL_SPI_MspDeInit+0x38>)
 800258c:	f003 fab2 	bl	8005af4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40015000 	.word	0x40015000
 800259c:	40023800 	.word	0x40023800
 80025a0:	40021400 	.word	0x40021400

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	@ 0x30
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a33      	ldr	r2, [pc, #204]	@ (8002690 <HAL_UART_MspInit+0xec>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12d      	bne.n	8002622 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	4a31      	ldr	r2, [pc, #196]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025d0:	f043 0310 	orr.w	r3, r3, #16
 80025d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002610:	2307      	movs	r3, #7
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	481f      	ldr	r0, [pc, #124]	@ (8002698 <HAL_UART_MspInit+0xf4>)
 800261c:	f003 f8be 	bl	800579c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002620:	e031      	b.n	8002686 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1d      	ldr	r2, [pc, #116]	@ (800269c <HAL_UART_MspInit+0xf8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d12c      	bne.n	8002686 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263a:	6413      	str	r3, [r2, #64]	@ 0x40
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	4a10      	ldr	r2, [pc, #64]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6313      	str	r3, [r2, #48]	@ 0x30
 8002658:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <HAL_UART_MspInit+0xf0>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002664:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002676:	2307      	movs	r3, #7
 8002678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	4807      	ldr	r0, [pc, #28]	@ (80026a0 <HAL_UART_MspInit+0xfc>)
 8002682:	f003 f88b 	bl	800579c <HAL_GPIO_Init>
}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	@ 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40011000 	.word	0x40011000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000
 800269c:	40004800 	.word	0x40004800
 80026a0:	40020800 	.word	0x40020800

080026a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026b8:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_FMC_MspInit+0x104>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d16f      	bne.n	80027a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80026c0:	4b39      	ldr	r3, [pc, #228]	@ (80027a8 <HAL_FMC_MspInit+0x104>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_FMC_MspInit+0x108>)
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	4a37      	ldr	r2, [pc, #220]	@ (80027ac <HAL_FMC_MspInit+0x108>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80026d6:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <HAL_FMC_MspInit+0x108>)
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026e2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80026e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026f4:	230c      	movs	r3, #12
 80026f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	482c      	ldr	r0, [pc, #176]	@ (80027b0 <HAL_FMC_MspInit+0x10c>)
 80026fe:	f003 f84d 	bl	800579c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002702:	2301      	movs	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4826      	ldr	r0, [pc, #152]	@ (80027b4 <HAL_FMC_MspInit+0x110>)
 800271c:	f003 f83e 	bl	800579c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002720:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002724:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002732:	230c      	movs	r3, #12
 8002734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	481f      	ldr	r0, [pc, #124]	@ (80027b8 <HAL_FMC_MspInit+0x114>)
 800273c:	f003 f82e 	bl	800579c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002740:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002744:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002752:	230c      	movs	r3, #12
 8002754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4818      	ldr	r0, [pc, #96]	@ (80027bc <HAL_FMC_MspInit+0x118>)
 800275c:	f003 f81e 	bl	800579c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002760:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002764:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002772:	230c      	movs	r3, #12
 8002774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4811      	ldr	r0, [pc, #68]	@ (80027c0 <HAL_FMC_MspInit+0x11c>)
 800277c:	f003 f80e 	bl	800579c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002780:	2360      	movs	r3, #96	@ 0x60
 8002782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002790:	230c      	movs	r3, #12
 8002792:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	4619      	mov	r1, r3
 8002798:	480a      	ldr	r0, [pc, #40]	@ (80027c4 <HAL_FMC_MspInit+0x120>)
 800279a:	f002 ffff 	bl	800579c <HAL_GPIO_Init>
 800279e:	e000      	b.n	80027a2 <HAL_FMC_MspInit+0xfe>
    return;
 80027a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000146c 	.word	0x2000146c
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40020400 	.word	0x40020400

080027c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80027d0:	f7ff ff68 	bl	80026a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <NMI_Handler+0x4>

080027e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <MemManage_Handler+0x4>

080027f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <BusFault_Handler+0x4>

080027fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <UsageFault_Handler+0x4>

08002804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002832:	f001 fb21 	bl	8003e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002840:	4802      	ldr	r0, [pc, #8]	@ (800284c <DMA2_Stream4_IRQHandler+0x10>)
 8002842:	f002 fab5 	bl	8004db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200011b4 	.word	0x200011b4

08002850 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e00a      	b.n	8002878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002862:	f3af 8000 	nop.w
 8002866:	4601      	mov	r1, r0
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	60ba      	str	r2, [r7, #8]
 800286e:	b2ca      	uxtb	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbf0      	blt.n	8002862 <_read+0x12>
  }

  return len;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e009      	b.n	80028b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	60ba      	str	r2, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbf1      	blt.n	800289c <_write+0x12>
  }
  return len;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_close>:

int _close(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ea:	605a      	str	r2, [r3, #4]
  return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_isatty>:

int _isatty(int file)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f006 fac4 	bl	8008ee8 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20030000 	.word	0x20030000
 800298c:	00000400 	.word	0x00000400
 8002990:	20001470 	.word	0x20001470
 8002994:	20001818 	.word	0x20001818

08002998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029c0:	f7ff ffea 	bl	8002998 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	@ (80029fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f006 fa83 	bl	8008ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7fd fdc7 	bl	8000580 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002a00:	0800cad0 	.word	0x0800cad0
  ldr r2, =_sbss
 8002a04:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002a08:	20001818 	.word	0x20001818

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>

08002a0e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002a12:	f000 fa5d 	bl	8002ed0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002a16:	20ca      	movs	r0, #202	@ 0xca
 8002a18:	f000 f95d 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002a1c:	20c3      	movs	r0, #195	@ 0xc3
 8002a1e:	f000 f967 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002a22:	2008      	movs	r0, #8
 8002a24:	f000 f964 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002a28:	2050      	movs	r0, #80	@ 0x50
 8002a2a:	f000 f961 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002a2e:	20cf      	movs	r0, #207	@ 0xcf
 8002a30:	f000 f951 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 f95b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002a3a:	20c1      	movs	r0, #193	@ 0xc1
 8002a3c:	f000 f958 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002a40:	2030      	movs	r0, #48	@ 0x30
 8002a42:	f000 f955 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002a46:	20ed      	movs	r0, #237	@ 0xed
 8002a48:	f000 f945 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002a4c:	2064      	movs	r0, #100	@ 0x64
 8002a4e:	f000 f94f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002a52:	2003      	movs	r0, #3
 8002a54:	f000 f94c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002a58:	2012      	movs	r0, #18
 8002a5a:	f000 f949 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002a5e:	2081      	movs	r0, #129	@ 0x81
 8002a60:	f000 f946 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002a64:	20e8      	movs	r0, #232	@ 0xe8
 8002a66:	f000 f936 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002a6a:	2085      	movs	r0, #133	@ 0x85
 8002a6c:	f000 f940 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 f93d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002a76:	2078      	movs	r0, #120	@ 0x78
 8002a78:	f000 f93a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002a7c:	20cb      	movs	r0, #203	@ 0xcb
 8002a7e:	f000 f92a 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002a82:	2039      	movs	r0, #57	@ 0x39
 8002a84:	f000 f934 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002a88:	202c      	movs	r0, #44	@ 0x2c
 8002a8a:	f000 f931 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 f92e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002a94:	2034      	movs	r0, #52	@ 0x34
 8002a96:	f000 f92b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f000 f928 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002aa0:	20f7      	movs	r0, #247	@ 0xf7
 8002aa2:	f000 f918 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002aa6:	2020      	movs	r0, #32
 8002aa8:	f000 f922 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002aac:	20ea      	movs	r0, #234	@ 0xea
 8002aae:	f000 f912 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f000 f91c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f919 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002abe:	20b1      	movs	r0, #177	@ 0xb1
 8002ac0:	f000 f909 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f913 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002aca:	201b      	movs	r0, #27
 8002acc:	f000 f910 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ad0:	20b6      	movs	r0, #182	@ 0xb6
 8002ad2:	f000 f900 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002ad6:	200a      	movs	r0, #10
 8002ad8:	f000 f90a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002adc:	20a2      	movs	r0, #162	@ 0xa2
 8002ade:	f000 f907 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002ae2:	20c0      	movs	r0, #192	@ 0xc0
 8002ae4:	f000 f8f7 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ae8:	2010      	movs	r0, #16
 8002aea:	f000 f901 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002aee:	20c1      	movs	r0, #193	@ 0xc1
 8002af0:	f000 f8f1 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002af4:	2010      	movs	r0, #16
 8002af6:	f000 f8fb 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002afa:	20c5      	movs	r0, #197	@ 0xc5
 8002afc:	f000 f8eb 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002b00:	2045      	movs	r0, #69	@ 0x45
 8002b02:	f000 f8f5 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002b06:	2015      	movs	r0, #21
 8002b08:	f000 f8f2 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002b0c:	20c7      	movs	r0, #199	@ 0xc7
 8002b0e:	f000 f8e2 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002b12:	2090      	movs	r0, #144	@ 0x90
 8002b14:	f000 f8ec 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002b18:	2036      	movs	r0, #54	@ 0x36
 8002b1a:	f000 f8dc 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002b1e:	20c8      	movs	r0, #200	@ 0xc8
 8002b20:	f000 f8e6 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002b24:	20f2      	movs	r0, #242	@ 0xf2
 8002b26:	f000 f8d6 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f000 f8e0 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002b30:	20b0      	movs	r0, #176	@ 0xb0
 8002b32:	f000 f8d0 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002b36:	20c2      	movs	r0, #194	@ 0xc2
 8002b38:	f000 f8da 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002b3c:	20b6      	movs	r0, #182	@ 0xb6
 8002b3e:	f000 f8ca 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002b42:	200a      	movs	r0, #10
 8002b44:	f000 f8d4 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002b48:	20a7      	movs	r0, #167	@ 0xa7
 8002b4a:	f000 f8d1 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002b4e:	2027      	movs	r0, #39	@ 0x27
 8002b50:	f000 f8ce 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002b54:	2004      	movs	r0, #4
 8002b56:	f000 f8cb 	bl	8002cf0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002b5a:	202a      	movs	r0, #42	@ 0x2a
 8002b5c:	f000 f8bb 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 f8c5 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 f8c2 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 f8bf 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002b72:	20ef      	movs	r0, #239	@ 0xef
 8002b74:	f000 f8bc 	bl	8002cf0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002b78:	202b      	movs	r0, #43	@ 0x2b
 8002b7a:	f000 f8ac 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f8b6 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f000 f8b3 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 f8b0 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002b90:	203f      	movs	r0, #63	@ 0x3f
 8002b92:	f000 f8ad 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002b96:	20f6      	movs	r0, #246	@ 0xf6
 8002b98:	f000 f89d 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f000 f8a7 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f8a4 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f000 f8a1 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002bae:	202c      	movs	r0, #44	@ 0x2c
 8002bb0:	f000 f891 	bl	8002cd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002bb4:	20c8      	movs	r0, #200	@ 0xc8
 8002bb6:	f000 fa79 	bl	80030ac <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002bba:	2026      	movs	r0, #38	@ 0x26
 8002bbc:	f000 f88b 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f000 f895 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002bc6:	20e0      	movs	r0, #224	@ 0xe0
 8002bc8:	f000 f885 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002bcc:	200f      	movs	r0, #15
 8002bce:	f000 f88f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002bd2:	2029      	movs	r0, #41	@ 0x29
 8002bd4:	f000 f88c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002bd8:	2024      	movs	r0, #36	@ 0x24
 8002bda:	f000 f889 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002bde:	200c      	movs	r0, #12
 8002be0:	f000 f886 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002be4:	200e      	movs	r0, #14
 8002be6:	f000 f883 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002bea:	2009      	movs	r0, #9
 8002bec:	f000 f880 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002bf0:	204e      	movs	r0, #78	@ 0x4e
 8002bf2:	f000 f87d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002bf6:	2078      	movs	r0, #120	@ 0x78
 8002bf8:	f000 f87a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002bfc:	203c      	movs	r0, #60	@ 0x3c
 8002bfe:	f000 f877 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002c02:	2009      	movs	r0, #9
 8002c04:	f000 f874 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002c08:	2013      	movs	r0, #19
 8002c0a:	f000 f871 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002c0e:	2005      	movs	r0, #5
 8002c10:	f000 f86e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002c14:	2017      	movs	r0, #23
 8002c16:	f000 f86b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002c1a:	2011      	movs	r0, #17
 8002c1c:	f000 f868 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f000 f865 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002c26:	20e1      	movs	r0, #225	@ 0xe1
 8002c28:	f000 f855 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f000 f85f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002c32:	2016      	movs	r0, #22
 8002c34:	f000 f85c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002c38:	201b      	movs	r0, #27
 8002c3a:	f000 f859 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c3e:	2004      	movs	r0, #4
 8002c40:	f000 f856 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002c44:	2011      	movs	r0, #17
 8002c46:	f000 f853 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002c4a:	2007      	movs	r0, #7
 8002c4c:	f000 f850 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002c50:	2031      	movs	r0, #49	@ 0x31
 8002c52:	f000 f84d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002c56:	2033      	movs	r0, #51	@ 0x33
 8002c58:	f000 f84a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002c5c:	2042      	movs	r0, #66	@ 0x42
 8002c5e:	f000 f847 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002c62:	2005      	movs	r0, #5
 8002c64:	f000 f844 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002c68:	200c      	movs	r0, #12
 8002c6a:	f000 f841 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f000 f83e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002c74:	2028      	movs	r0, #40	@ 0x28
 8002c76:	f000 f83b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002c7a:	202f      	movs	r0, #47	@ 0x2f
 8002c7c:	f000 f838 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002c80:	200f      	movs	r0, #15
 8002c82:	f000 f835 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002c86:	2011      	movs	r0, #17
 8002c88:	f000 f825 	bl	8002cd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002c8c:	20c8      	movs	r0, #200	@ 0xc8
 8002c8e:	f000 fa0d 	bl	80030ac <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002c92:	2029      	movs	r0, #41	@ 0x29
 8002c94:	f000 f81f 	bl	8002cd6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002c98:	202c      	movs	r0, #44	@ 0x2c
 8002c9a:	f000 f81c 	bl	8002cd6 <ili9341_WriteReg>
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002ca6:	f000 f913 	bl	8002ed0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002caa:	2103      	movs	r1, #3
 8002cac:	20d3      	movs	r0, #211	@ 0xd3
 8002cae:	f000 f82c 	bl	8002d0a <ili9341_ReadData>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b29b      	uxth	r3, r3
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002cbe:	2029      	movs	r0, #41	@ 0x29
 8002cc0:	f000 f809 	bl	8002cd6 <ili9341_WriteReg>
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002ccc:	2028      	movs	r0, #40	@ 0x28
 8002cce:	f000 f802 	bl	8002cd6 <ili9341_WriteReg>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f98e 	bl	8003004 <LCD_IO_WriteReg>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f95f 	bl	8002fc0 <LCD_IO_WriteData>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	460a      	mov	r2, r1
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002d1a:	797a      	ldrb	r2, [r7, #5]
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f991 	bl	8003048 <LCD_IO_ReadData>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002d34:	23f0      	movs	r3, #240	@ 0xf0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002d44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002d58:	4819      	ldr	r0, [pc, #100]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d5a:	f005 f84f 	bl	8007dfc <HAL_SPI_GetState>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002d64:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d66:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <SPIx_Init+0x70>)
 8002d68:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d6a:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002d7c:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002d88:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002daa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002dae:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002db0:	4803      	ldr	r0, [pc, #12]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002db2:	f000 f853 	bl	8002e5c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002db6:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <SPIx_Init+0x6c>)
 8002db8:	f004 fb69 	bl	800748e <HAL_SPI_Init>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20001474 	.word	0x20001474
 8002dc4:	40015000 	.word	0x40015000

08002dc8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <SPIx_Read+0x38>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f107 0108 	add.w	r1, r7, #8
 8002de2:	4808      	ldr	r0, [pc, #32]	@ (8002e04 <SPIx_Read+0x3c>)
 8002de4:	f004 fd48 	bl	8007878 <HAL_SPI_Receive>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002df2:	f000 f827 	bl	8002e44 <SPIx_Error>
  }

  return readvalue;
 8002df6:	68bb      	ldr	r3, [r7, #8]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2000003c 	.word	0x2000003c
 8002e04:	20001474 	.word	0x20001474

08002e08 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <SPIx_Write+0x34>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	1db9      	adds	r1, r7, #6
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4808      	ldr	r0, [pc, #32]	@ (8002e40 <SPIx_Write+0x38>)
 8002e20:	f004 fbe6 	bl	80075f0 <HAL_SPI_Transmit>
 8002e24:	4603      	mov	r3, r0
 8002e26:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002e2e:	f000 f809 	bl	8002e44 <SPIx_Error>
  }
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000003c 	.word	0x2000003c
 8002e40:	20001474 	.word	0x20001474

08002e44 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002e48:	4803      	ldr	r0, [pc, #12]	@ (8002e58 <SPIx_Error+0x14>)
 8002e4a:	f004 fba9 	bl	80075a0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002e4e:	f7ff ff81 	bl	8002d54 <SPIx_Init>
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20001474 	.word	0x20001474

08002e5c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e72:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e74:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <SPIx_MspInit+0x6c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002e9c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002eae:	2305      	movs	r3, #5
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4804      	ldr	r0, [pc, #16]	@ (8002ecc <SPIx_MspInit+0x70>)
 8002eba:	f002 fc6f 	bl	800579c <HAL_GPIO_Init>
}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	@ 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40021400 	.word	0x40021400

08002ed0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8002ed6:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <LCD_IO_Init+0xe0>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d164      	bne.n	8002fa8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <LCD_IO_Init+0xe0>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	4b32      	ldr	r3, [pc, #200]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	4a31      	ldr	r2, [pc, #196]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4619      	mov	r1, r3
 8002f18:	4827      	ldr	r0, [pc, #156]	@ (8002fb8 <LCD_IO_Init+0xe8>)
 8002f1a:	f002 fc3f 	bl	800579c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a23      	ldr	r2, [pc, #140]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	4619      	mov	r1, r3
 8002f52:	4819      	ldr	r0, [pc, #100]	@ (8002fb8 <LCD_IO_Init+0xe8>)
 8002f54:	f002 fc22 	bl	800579c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	4a14      	ldr	r2, [pc, #80]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f68:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <LCD_IO_Init+0xe4>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002f74:	2304      	movs	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002f80:	2302      	movs	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480c      	ldr	r0, [pc, #48]	@ (8002fbc <LCD_IO_Init+0xec>)
 8002f8c:	f002 fc06 	bl	800579c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002f90:	2200      	movs	r2, #0
 8002f92:	2104      	movs	r1, #4
 8002f94:	4809      	ldr	r0, [pc, #36]	@ (8002fbc <LCD_IO_Init+0xec>)
 8002f96:	f002 feb9 	bl	8005d0c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	4807      	ldr	r0, [pc, #28]	@ (8002fbc <LCD_IO_Init+0xec>)
 8002fa0:	f002 feb4 	bl	8005d0c <HAL_GPIO_WritePin>

    SPIx_Init();
 8002fa4:	f7ff fed6 	bl	8002d54 <SPIx_Init>
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200014cc 	.word	0x200014cc
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fd0:	480a      	ldr	r0, [pc, #40]	@ (8002ffc <LCD_IO_WriteData+0x3c>)
 8002fd2:	f002 fe9b 	bl	8005d0c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2104      	movs	r1, #4
 8002fda:	4809      	ldr	r0, [pc, #36]	@ (8003000 <LCD_IO_WriteData+0x40>)
 8002fdc:	f002 fe96 	bl	8005d0c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff10 	bl	8002e08 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2104      	movs	r1, #4
 8002fec:	4804      	ldr	r0, [pc, #16]	@ (8003000 <LCD_IO_WriteData+0x40>)
 8002fee:	f002 fe8d 	bl	8005d0c <HAL_GPIO_WritePin>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40020800 	.word	0x40020800

08003004 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800300e:	2200      	movs	r2, #0
 8003010:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003014:	480a      	ldr	r0, [pc, #40]	@ (8003040 <LCD_IO_WriteReg+0x3c>)
 8003016:	f002 fe79 	bl	8005d0c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800301a:	2200      	movs	r2, #0
 800301c:	2104      	movs	r1, #4
 800301e:	4809      	ldr	r0, [pc, #36]	@ (8003044 <LCD_IO_WriteReg+0x40>)
 8003020:	f002 fe74 	bl	8005d0c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff feed 	bl	8002e08 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800302e:	2201      	movs	r2, #1
 8003030:	2104      	movs	r1, #4
 8003032:	4804      	ldr	r0, [pc, #16]	@ (8003044 <LCD_IO_WriteReg+0x40>)
 8003034:	f002 fe6a 	bl	8005d0c <HAL_GPIO_WritePin>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40020800 	.word	0x40020800

08003048 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	460a      	mov	r2, r1
 8003052:	80fb      	strh	r3, [r7, #6]
 8003054:	4613      	mov	r3, r2
 8003056:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800305c:	2200      	movs	r2, #0
 800305e:	2104      	movs	r1, #4
 8003060:	4810      	ldr	r0, [pc, #64]	@ (80030a4 <LCD_IO_ReadData+0x5c>)
 8003062:	f002 fe53 	bl	8005d0c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003066:	2200      	movs	r2, #0
 8003068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800306c:	480e      	ldr	r0, [pc, #56]	@ (80030a8 <LCD_IO_ReadData+0x60>)
 800306e:	f002 fe4d 	bl	8005d0c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fec7 	bl	8002e08 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800307a:	797b      	ldrb	r3, [r7, #5]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fea3 	bl	8002dc8 <SPIx_Read>
 8003082:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003084:	2201      	movs	r2, #1
 8003086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800308a:	4807      	ldr	r0, [pc, #28]	@ (80030a8 <LCD_IO_ReadData+0x60>)
 800308c:	f002 fe3e 	bl	8005d0c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003090:	2201      	movs	r2, #1
 8003092:	2104      	movs	r1, #4
 8003094:	4803      	ldr	r0, [pc, #12]	@ (80030a4 <LCD_IO_ReadData+0x5c>)
 8003096:	f002 fe39 	bl	8005d0c <HAL_GPIO_WritePin>

  return readvalue;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00

080030ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 feff 	bl	8003eb8 <HAL_Delay>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003184 <BSP_LCD_Init+0xc0>)
 80030cc:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030d0:	2209      	movs	r2, #9
 80030d2:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80030d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80030da:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030dc:	221d      	movs	r2, #29
 80030de:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80030e0:	4b27      	ldr	r3, [pc, #156]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030e2:	2203      	movs	r2, #3
 80030e4:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80030e6:	4b26      	ldr	r3, [pc, #152]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030e8:	f240 120d 	movw	r2, #269	@ 0x10d
 80030ec:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80030ee:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030f0:	f240 1243 	movw	r2, #323	@ 0x143
 80030f4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <BSP_LCD_Init+0xbc>)
 80030f8:	f240 1217 	movw	r2, #279	@ 0x117
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003100:	f240 1247 	movw	r2, #327	@ 0x147
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <BSP_LCD_Init+0xc4>)
 8003120:	2208      	movs	r2, #8
 8003122:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <BSP_LCD_Init+0xc4>)
 8003126:	22c0      	movs	r2, #192	@ 0xc0
 8003128:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800312a:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <BSP_LCD_Init+0xc4>)
 800312c:	2204      	movs	r2, #4
 800312e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003130:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <BSP_LCD_Init+0xc4>)
 8003132:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003138:	4813      	ldr	r0, [pc, #76]	@ (8003188 <BSP_LCD_Init+0xc4>)
 800313a:	f003 ff57 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003144:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <BSP_LCD_Init+0xbc>)
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <BSP_LCD_Init+0xbc>)
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8003156:	f000 fa85 	bl	8003664 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 800315a:	4809      	ldr	r0, [pc, #36]	@ (8003180 <BSP_LCD_Init+0xbc>)
 800315c:	f002 ffb0 	bl	80060c0 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <BSP_LCD_Init+0xc8>)
 8003162:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <BSP_LCD_Init+0xcc>)
 8003164:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <BSP_LCD_Init+0xc8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800316e:	f000 fc67 	bl	8003a40 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003172:	4808      	ldr	r0, [pc, #32]	@ (8003194 <BSP_LCD_Init+0xd0>)
 8003174:	f000 f8b2 	bl	80032dc <BSP_LCD_SetFont>

  return LCD_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200014d0 	.word	0x200014d0
 8003184:	40016800 	.word	0x40016800
 8003188:	200015b8 	.word	0x200015b8
 800318c:	20001604 	.word	0x20001604
 8003190:	20000004 	.word	0x20000004
 8003194:	20000040 	.word	0x20000040

08003198 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <BSP_LCD_GetXSize+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	4798      	blx	r3
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20001604 	.word	0x20001604

080031b0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80031b4:	4b03      	ldr	r3, [pc, #12]	@ (80031c4 <BSP_LCD_GetYSize+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	4798      	blx	r3
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20001604 	.word	0x20001604

080031c8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b090      	sub	sp, #64	@ 0x40
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80031d8:	f7ff ffde 	bl	8003198 <BSP_LCD_GetXSize>
 80031dc:	4603      	mov	r3, r0
 80031de:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80031e4:	f7ff ffe4 	bl	80031b0 <BSP_LCD_GetYSize>
 80031e8:	4603      	mov	r3, r0
 80031ea:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80031f4:	23ff      	movs	r3, #255	@ 0xff
 80031f6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800320e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003214:	2307      	movs	r3, #7
 8003216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003218:	f7ff ffbe 	bl	8003198 <BSP_LCD_GetXSize>
 800321c:	4603      	mov	r3, r0
 800321e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003220:	f7ff ffc6 	bl	80031b0 <BSP_LCD_GetYSize>
 8003224:	4603      	mov	r3, r0
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	4619      	mov	r1, r3
 8003230:	4814      	ldr	r0, [pc, #80]	@ (8003284 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003232:	f003 f815 	bl	8006260 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	4913      	ldr	r1, [pc, #76]	@ (8003288 <BSP_LCD_LayerDefaultInit+0xc0>)
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3304      	adds	r3, #4
 8003246:	f04f 32ff 	mov.w	r2, #4294967295
 800324a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	490e      	ldr	r1, [pc, #56]	@ (8003288 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3308      	adds	r3, #8
 800325c:	4a0b      	ldr	r2, [pc, #44]	@ (800328c <BSP_LCD_LayerDefaultInit+0xc4>)
 800325e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	4909      	ldr	r1, [pc, #36]	@ (8003288 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003272:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003274:	4803      	ldr	r0, [pc, #12]	@ (8003284 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003276:	f003 f831 	bl	80062dc <HAL_LTDC_EnableDither>
}
 800327a:	bf00      	nop
 800327c:	3740      	adds	r7, #64	@ 0x40
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200014d0 	.word	0x200014d0
 8003288:	200015ec 	.word	0x200015ec
 800328c:	20000040 	.word	0x20000040

08003290 <BSP_LCD_Reload>:
  *         - LCD_RELOAD_IMMEDIATE
  *         - LCD_RELOAD_VERTICAL_BLANKING
  * @retval None
  */
void BSP_LCD_Reload(uint32_t ReloadType)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_LTDC_Relaod(&LtdcHandler, ReloadType);
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4803      	ldr	r0, [pc, #12]	@ (80032a8 <BSP_LCD_Reload+0x18>)
 800329c:	f003 f848 	bl	8006330 <HAL_LTDC_Reload>
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200014d0 	.word	0x200014d0

080032ac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80032b4:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <BSP_LCD_SetTextColor+0x28>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4907      	ldr	r1, [pc, #28]	@ (80032d8 <BSP_LCD_SetTextColor+0x2c>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	200015e8 	.word	0x200015e8
 80032d8:	200015ec 	.word	0x200015ec

080032dc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <BSP_LCD_SetFont+0x2c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4908      	ldr	r1, [pc, #32]	@ (800330c <BSP_LCD_SetFont+0x30>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3308      	adds	r3, #8
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	200015e8 	.word	0x200015e8
 800330c:	200015ec 	.word	0x200015ec

08003310 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b085      	sub	sp, #20
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <BSP_LCD_Clear+0x48>)
 800331a:	681c      	ldr	r4, [r3, #0]
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <BSP_LCD_Clear+0x48>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0e      	ldr	r2, [pc, #56]	@ (800335c <BSP_LCD_Clear+0x4c>)
 8003322:	2134      	movs	r1, #52	@ 0x34
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	335c      	adds	r3, #92	@ 0x5c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461e      	mov	r6, r3
 8003330:	f7ff ff32 	bl	8003198 <BSP_LCD_GetXSize>
 8003334:	4605      	mov	r5, r0
 8003336:	f7ff ff3b 	bl	80031b0 <BSP_LCD_GetYSize>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	462a      	mov	r2, r5
 8003348:	4631      	mov	r1, r6
 800334a:	4620      	mov	r0, r4
 800334c:	f000 fb40 	bl	80039d0 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003358:	200015e8 	.word	0x200015e8
 800335c:	200014d0 	.word	0x200014d0

08003360 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
 800336a:	460b      	mov	r3, r1
 800336c:	80bb      	strh	r3, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <BSP_LCD_DisplayChar+0x80>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	491b      	ldr	r1, [pc, #108]	@ (80033e4 <BSP_LCD_DisplayChar+0x84>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3308      	adds	r3, #8
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <BSP_LCD_DisplayChar+0x80>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4c14      	ldr	r4, [pc, #80]	@ (80033e4 <BSP_LCD_DisplayChar+0x84>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4423      	add	r3, r4
 800339e:	3308      	adds	r3, #8
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80033a4:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80033a8:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <BSP_LCD_DisplayChar+0x80>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4c0d      	ldr	r4, [pc, #52]	@ (80033e4 <BSP_LCD_DisplayChar+0x84>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4423      	add	r3, r4
 80033b8:	3308      	adds	r3, #8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	3307      	adds	r3, #7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da00      	bge.n	80033c6 <BSP_LCD_DisplayChar+0x66>
 80033c4:	3307      	adds	r3, #7
 80033c6:	10db      	asrs	r3, r3, #3
 80033c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80033cc:	18ca      	adds	r2, r1, r3
 80033ce:	88b9      	ldrh	r1, [r7, #4]
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa42 	bl	800385c <DrawChar>
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}
 80033e0:	200015e8 	.word	0x200015e8
 80033e4:	200015ec 	.word	0x200015ec

080033e8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60ba      	str	r2, [r7, #8]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	81fb      	strh	r3, [r7, #14]
 80033f6:	460b      	mov	r3, r1
 80033f8:	81bb      	strh	r3, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80033fe:	2301      	movs	r3, #1
 8003400:	83fb      	strh	r3, [r7, #30]
 8003402:	2300      	movs	r3, #0
 8003404:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8003412:	e002      	b.n	800341a <BSP_LCD_DisplayStringAt+0x32>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	3301      	adds	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	617a      	str	r2, [r7, #20]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f6      	bne.n	8003414 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8003426:	f7ff feb7 	bl	8003198 <BSP_LCD_GetXSize>
 800342a:	4601      	mov	r1, r0
 800342c:	4b4b      	ldr	r3, [pc, #300]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	484b      	ldr	r0, [pc, #300]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4403      	add	r3, r0
 800343c:	3308      	adds	r3, #8
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	889b      	ldrh	r3, [r3, #4]
 8003442:	fbb1 f3f3 	udiv	r3, r1, r3
 8003446:	613b      	str	r3, [r7, #16]

  switch (mode)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d01c      	beq.n	8003488 <BSP_LCD_DisplayStringAt+0xa0>
 800344e:	2b03      	cmp	r3, #3
 8003450:	dc33      	bgt.n	80034ba <BSP_LCD_DisplayStringAt+0xd2>
 8003452:	2b01      	cmp	r3, #1
 8003454:	d002      	beq.n	800345c <BSP_LCD_DisplayStringAt+0x74>
 8003456:	2b02      	cmp	r3, #2
 8003458:	d019      	beq.n	800348e <BSP_LCD_DisplayStringAt+0xa6>
 800345a:	e02e      	b.n	80034ba <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad1      	subs	r1, r2, r3
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	483e      	ldr	r0, [pc, #248]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	3308      	adds	r3, #8
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	889b      	ldrh	r3, [r3, #4]
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	4413      	add	r3, r2
 8003484:	83fb      	strh	r3, [r7, #30]
      break;
 8003486:	e01b      	b.n	80034c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	83fb      	strh	r3, [r7, #30]
      break;
 800348c:	e018      	b.n	80034c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b299      	uxth	r1, r3
 8003496:	4b31      	ldr	r3, [pc, #196]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4831      	ldr	r0, [pc, #196]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4403      	add	r3, r0
 80034a6:	3308      	adds	r3, #8
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	889b      	ldrh	r3, [r3, #4]
 80034ac:	fb11 f303 	smulbb	r3, r1, r3
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	89fb      	ldrh	r3, [r7, #14]
 80034b4:	4413      	add	r3, r2
 80034b6:	83fb      	strh	r3, [r7, #30]
      break;
 80034b8:	e002      	b.n	80034c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	83fb      	strh	r3, [r7, #30]
      break;
 80034be:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80034c0:	e01a      	b.n	80034f8 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	89b9      	ldrh	r1, [r7, #12]
 80034c8:	8bfb      	ldrh	r3, [r7, #30]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ff48 	bl	8003360 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80034d0:	4b22      	ldr	r3, [pc, #136]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4922      	ldr	r1, [pc, #136]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3308      	adds	r3, #8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	889a      	ldrh	r2, [r3, #4]
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	4413      	add	r3, r2
 80034ea:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
    i++;
 80034f2:	8bbb      	ldrh	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2dc      	uxtb	r4, r3
 8003506:	f7ff fe47 	bl	8003198 <BSP_LCD_GetXSize>
 800350a:	8bb9      	ldrh	r1, [r7, #28]
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4d13      	ldr	r5, [pc, #76]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	442b      	add	r3, r5
 800351c:	3308      	adds	r3, #8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	1ac3      	subs	r3, r0, r3
 8003528:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <BSP_LCD_DisplayStringAt+0x174>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	480c      	ldr	r0, [pc, #48]	@ (8003560 <BSP_LCD_DisplayStringAt+0x178>)
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4403      	add	r3, r0
 800353a:	3308      	adds	r3, #8
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003540:	4299      	cmp	r1, r3
 8003542:	bf2c      	ite	cs
 8003544:	2301      	movcs	r3, #1
 8003546:	2300      	movcc	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4023      	ands	r3, r4
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1b7      	bne.n	80034c2 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bdb0      	pop	{r4, r5, r7, pc}
 800355c:	200015e8 	.word	0x200015e8
 8003560:	200015ec 	.word	0x200015ec

08003564 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	4603      	mov	r3, r0
 800356c:	80fb      	strh	r3, [r7, #6]
 800356e:	460b      	mov	r3, r1
 8003570:	80bb      	strh	r3, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <BSP_LCD_DrawHLine+0x70>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <BSP_LCD_DrawHLine+0x74>)
 8003580:	2134      	movs	r1, #52	@ 0x34
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	335c      	adds	r3, #92	@ 0x5c
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	f7ff fe04 	bl	8003198 <BSP_LCD_GetXSize>
 8003590:	4602      	mov	r2, r0
 8003592:	88bb      	ldrh	r3, [r7, #4]
 8003594:	fb03 f202 	mul.w	r2, r3, r2
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4423      	add	r3, r4
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80035a2:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <BSP_LCD_DrawHLine+0x70>)
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	887c      	ldrh	r4, [r7, #2]
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <BSP_LCD_DrawHLine+0x70>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4d0b      	ldr	r5, [pc, #44]	@ (80035dc <BSP_LCD_DrawHLine+0x78>)
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	442b      	add	r3, r5
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2301      	movs	r3, #1
 80035c4:	4622      	mov	r2, r4
 80035c6:	f000 fa03 	bl	80039d0 <FillBuffer>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200015e8 	.word	0x200015e8
 80035d8:	200014d0 	.word	0x200014d0
 80035dc:	200015ec 	.word	0x200015ec

080035e0 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
 80035ea:	460b      	mov	r3, r1
 80035ec:	80bb      	strh	r3, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80035f6:	4b18      	ldr	r3, [pc, #96]	@ (8003658 <BSP_LCD_DrawVLine+0x78>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <BSP_LCD_DrawVLine+0x7c>)
 80035fc:	2134      	movs	r1, #52	@ 0x34
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	335c      	adds	r3, #92	@ 0x5c
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	f7ff fdc6 	bl	8003198 <BSP_LCD_GetXSize>
 800360c:	4602      	mov	r2, r0
 800360e:	88bb      	ldrh	r3, [r7, #4]
 8003610:	fb03 f202 	mul.w	r2, r3, r2
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4423      	add	r3, r4
 800361c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800361e:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <BSP_LCD_DrawVLine+0x78>)
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	68fd      	ldr	r5, [r7, #12]
 8003624:	887e      	ldrh	r6, [r7, #2]
 8003626:	f7ff fdb7 	bl	8003198 <BSP_LCD_GetXSize>
 800362a:	4603      	mov	r3, r0
 800362c:	1e59      	subs	r1, r3, #1
 800362e:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <BSP_LCD_DrawVLine+0x78>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	480b      	ldr	r0, [pc, #44]	@ (8003660 <BSP_LCD_DrawVLine+0x80>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	9100      	str	r1, [sp, #0]
 8003644:	4633      	mov	r3, r6
 8003646:	2201      	movs	r2, #1
 8003648:	4629      	mov	r1, r5
 800364a:	4620      	mov	r0, r4
 800364c:	f000 f9c0 	bl	80039d0 <FillBuffer>
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003658:	200015e8 	.word	0x200015e8
 800365c:	200014d0 	.word	0x200014d0
 8003660:	200015ec 	.word	0x200015ec

08003664 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	@ 0x38
 8003668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	4b61      	ldr	r3, [pc, #388]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	4a60      	ldr	r2, [pc, #384]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003674:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003678:	6453      	str	r3, [r2, #68]	@ 0x44
 800367a:	4b5e      	ldr	r3, [pc, #376]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	4a59      	ldr	r2, [pc, #356]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003690:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003694:	6313      	str	r3, [r2, #48]	@ 0x30
 8003696:	4b57      	ldr	r3, [pc, #348]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b2:	4b50      	ldr	r3, [pc, #320]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	4b4c      	ldr	r3, [pc, #304]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b49      	ldr	r3, [pc, #292]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	4b45      	ldr	r3, [pc, #276]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	4a44      	ldr	r2, [pc, #272]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ea:	4b42      	ldr	r3, [pc, #264]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b3e      	ldr	r3, [pc, #248]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b3b      	ldr	r3, [pc, #236]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a36      	ldr	r2, [pc, #216]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b34      	ldr	r3, [pc, #208]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	4b30      	ldr	r3, [pc, #192]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	4a2f      	ldr	r2, [pc, #188]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373c:	6313      	str	r3, [r2, #48]	@ 0x30
 800373e:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <BSP_LCD_MspInit+0x190>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800374a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003758:	2302      	movs	r3, #2
 800375a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800375c:	230e      	movs	r3, #14
 800375e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	4824      	ldr	r0, [pc, #144]	@ (80037f8 <BSP_LCD_MspInit+0x194>)
 8003768:	f002 f818 	bl	800579c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800376c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003776:	4619      	mov	r1, r3
 8003778:	4820      	ldr	r0, [pc, #128]	@ (80037fc <BSP_LCD_MspInit+0x198>)
 800377a:	f002 f80f 	bl	800579c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800377e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003788:	4619      	mov	r1, r3
 800378a:	481d      	ldr	r0, [pc, #116]	@ (8003800 <BSP_LCD_MspInit+0x19c>)
 800378c:	f002 f806 	bl	800579c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003790:	2348      	movs	r3, #72	@ 0x48
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003798:	4619      	mov	r1, r3
 800379a:	481a      	ldr	r0, [pc, #104]	@ (8003804 <BSP_LCD_MspInit+0x1a0>)
 800379c:	f001 fffe 	bl	800579c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80037a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80037a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037aa:	4619      	mov	r1, r3
 80037ac:	4816      	ldr	r0, [pc, #88]	@ (8003808 <BSP_LCD_MspInit+0x1a4>)
 80037ae:	f001 fff5 	bl	800579c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80037b2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037bc:	4619      	mov	r1, r3
 80037be:	4813      	ldr	r0, [pc, #76]	@ (800380c <BSP_LCD_MspInit+0x1a8>)
 80037c0:	f001 ffec 	bl	800579c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80037c4:	2303      	movs	r3, #3
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80037c8:	2309      	movs	r3, #9
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	480a      	ldr	r0, [pc, #40]	@ (80037fc <BSP_LCD_MspInit+0x198>)
 80037d4:	f001 ffe2 	bl	800579c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80037d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	4809      	ldr	r0, [pc, #36]	@ (800380c <BSP_LCD_MspInit+0x1a8>)
 80037e6:	f001 ffd9 	bl	800579c <HAL_GPIO_Init>
}
 80037ea:	bf00      	nop
 80037ec:	3738      	adds	r7, #56	@ 0x38
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020800 	.word	0x40020800
 8003804:	40020c00 	.word	0x40020c00
 8003808:	40021400 	.word	0x40021400
 800380c:	40021800 	.word	0x40021800

08003810 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	603a      	str	r2, [r7, #0]
 800381a:	80fb      	strh	r3, [r7, #6]
 800381c:	460b      	mov	r3, r1
 800381e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003820:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <BSP_LCD_DrawPixel+0x44>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0c      	ldr	r2, [pc, #48]	@ (8003858 <BSP_LCD_DrawPixel+0x48>)
 8003826:	2134      	movs	r1, #52	@ 0x34
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	335c      	adds	r3, #92	@ 0x5c
 8003830:	681c      	ldr	r4, [r3, #0]
 8003832:	88bd      	ldrh	r5, [r7, #4]
 8003834:	f7ff fcb0 	bl	8003198 <BSP_LCD_GetXSize>
 8003838:	4603      	mov	r3, r0
 800383a:	fb03 f205 	mul.w	r2, r3, r5
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4423      	add	r3, r4
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}
 8003854:	200015e8 	.word	0x200015e8
 8003858:	200014d0 	.word	0x200014d0

0800385c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	603a      	str	r2, [r7, #0]
 8003866:	80fb      	strh	r3, [r7, #6]
 8003868:	460b      	mov	r3, r1
 800386a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003878:	4b53      	ldr	r3, [pc, #332]	@ (80039c8 <DrawChar+0x16c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4953      	ldr	r1, [pc, #332]	@ (80039cc <DrawChar+0x170>)
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3308      	adds	r3, #8
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	88db      	ldrh	r3, [r3, #6]
 800388e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003890:	4b4d      	ldr	r3, [pc, #308]	@ (80039c8 <DrawChar+0x16c>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	494d      	ldr	r1, [pc, #308]	@ (80039cc <DrawChar+0x170>)
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3308      	adds	r3, #8
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	889b      	ldrh	r3, [r3, #4]
 80038a6:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80038a8:	8a3b      	ldrh	r3, [r7, #16]
 80038aa:	3307      	adds	r3, #7
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da00      	bge.n	80038b2 <DrawChar+0x56>
 80038b0:	3307      	adds	r3, #7
 80038b2:	10db      	asrs	r3, r3, #3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	8a3b      	ldrh	r3, [r7, #16]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e076      	b.n	80039b6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80038c8:	8a3b      	ldrh	r3, [r7, #16]
 80038ca:	3307      	adds	r3, #7
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da00      	bge.n	80038d2 <DrawChar+0x76>
 80038d0:	3307      	adds	r3, #7
 80038d2:	10db      	asrs	r3, r3, #3
 80038d4:	461a      	mov	r2, r3
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80038e2:	8a3b      	ldrh	r3, [r7, #16]
 80038e4:	3307      	adds	r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	da00      	bge.n	80038ec <DrawChar+0x90>
 80038ea:	3307      	adds	r3, #7
 80038ec:	10db      	asrs	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d002      	beq.n	80038f8 <DrawChar+0x9c>
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d004      	beq.n	8003900 <DrawChar+0xa4>
 80038f6:	e00c      	b.n	8003912 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
        break;
 80038fe:	e016      	b.n	800392e <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	3201      	adds	r2, #1
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
        break;
 8003910:	e00d      	b.n	800392e <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	041a      	lsls	r2, r3, #16
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3301      	adds	r3, #1
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	4313      	orrs	r3, r2
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	3202      	adds	r2, #2
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
        break;
 800392c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e036      	b.n	80039a2 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003934:	8a3a      	ldrh	r2, [r7, #16]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	4413      	add	r3, r2
 800393e:	3b01      	subs	r3, #1
 8003940:	2201      	movs	r2, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	461a      	mov	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	b29a      	uxth	r2, r3
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	4413      	add	r3, r2
 8003958:	b298      	uxth	r0, r3
 800395a:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <DrawChar+0x16c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	491b      	ldr	r1, [pc, #108]	@ (80039cc <DrawChar+0x170>)
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	88bb      	ldrh	r3, [r7, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	f7ff ff4e 	bl	8003810 <BSP_LCD_DrawPixel>
 8003974:	e012      	b.n	800399c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	b29a      	uxth	r2, r3
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4413      	add	r3, r2
 800397e:	b298      	uxth	r0, r3
 8003980:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <DrawChar+0x16c>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4911      	ldr	r1, [pc, #68]	@ (80039cc <DrawChar+0x170>)
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3304      	adds	r3, #4
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	88bb      	ldrh	r3, [r7, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	f7ff ff3a 	bl	8003810 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3301      	adds	r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	8a3b      	ldrh	r3, [r7, #16]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3c4      	bcc.n	8003934 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80039aa:	88bb      	ldrh	r3, [r7, #4]
 80039ac:	3301      	adds	r3, #1
 80039ae:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	8a7b      	ldrh	r3, [r7, #18]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d384      	bcc.n	80038c8 <DrawChar+0x6c>
  }
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200015e8 	.word	0x200015e8
 80039cc:	200015ec 	.word	0x200015ec

080039d0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80039de:	4b16      	ldr	r3, [pc, #88]	@ (8003a38 <FillBuffer+0x68>)
 80039e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039e4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <FillBuffer+0x68>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80039ec:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <FillBuffer+0x68>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80039f2:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <FillBuffer+0x68>)
 80039f4:	4a11      	ldr	r2, [pc, #68]	@ (8003a3c <FillBuffer+0x6c>)
 80039f6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80039f8:	480f      	ldr	r0, [pc, #60]	@ (8003a38 <FillBuffer+0x68>)
 80039fa:	f001 fc43 	bl	8005284 <HAL_DMA2D_Init>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d115      	bne.n	8003a30 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	480c      	ldr	r0, [pc, #48]	@ (8003a38 <FillBuffer+0x68>)
 8003a08:	f001 fd9a 	bl	8005540 <HAL_DMA2D_ConfigLayer>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	4806      	ldr	r0, [pc, #24]	@ (8003a38 <FillBuffer+0x68>)
 8003a1e:	f001 fc7a 	bl	8005316 <HAL_DMA2D_Start>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d103      	bne.n	8003a30 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003a28:	210a      	movs	r1, #10
 8003a2a:	4803      	ldr	r0, [pc, #12]	@ (8003a38 <FillBuffer+0x68>)
 8003a2c:	f001 fc9e 	bl	800536c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20001578 	.word	0x20001578
 8003a3c:	4002b000 	.word	0x4002b000

08003a40 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003a44:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a46:	4a2a      	ldr	r2, [pc, #168]	@ (8003af0 <BSP_SDRAM_Init+0xb0>)
 8003a48:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a52:	2207      	movs	r2, #7
 8003a54:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003a56:	4b27      	ldr	r3, [pc, #156]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a58:	2204      	movs	r2, #4
 8003a5a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a5e:	2207      	movs	r2, #7
 8003a60:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003a62:	4b24      	ldr	r3, [pc, #144]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a64:	2202      	movs	r2, #2
 8003a66:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003a68:	4b22      	ldr	r3, [pc, #136]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003a6e:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003a70:	2202      	movs	r2, #2
 8003a72:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a82:	2204      	movs	r2, #4
 8003a84:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a88:	2210      	movs	r2, #16
 8003a8a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003a92:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003a98:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003aa0:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aa6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003aae:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	480c      	ldr	r0, [pc, #48]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003aba:	f000 f87f 	bl	8003bbc <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003abe:	490d      	ldr	r1, [pc, #52]	@ (8003af4 <BSP_SDRAM_Init+0xb4>)
 8003ac0:	480a      	ldr	r0, [pc, #40]	@ (8003aec <BSP_SDRAM_Init+0xac>)
 8003ac2:	f003 fc53 	bl	800736c <HAL_SDRAM_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <BSP_SDRAM_Init+0xb8>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ad4:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <BSP_SDRAM_Init+0xb8>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003ada:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003ade:	f000 f80d 	bl	8003afc <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <BSP_SDRAM_Init+0xb8>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20001608 	.word	0x20001608
 8003af0:	a0000140 	.word	0xa0000140
 8003af4:	2000163c 	.word	0x2000163c
 8003af8:	20000050 	.word	0x20000050

08003afc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b0e:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b10:	2208      	movs	r2, #8
 8003b12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b14:	4b27      	ldr	r3, [pc, #156]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b1a:	4b26      	ldr	r3, [pc, #152]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b24:	4923      	ldr	r1, [pc, #140]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b26:	4824      	ldr	r0, [pc, #144]	@ (8003bb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b28:	f003 fc54 	bl	80073d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 f9c3 	bl	8003eb8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b34:	2202      	movs	r2, #2
 8003b36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b38:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b4e:	4919      	ldr	r1, [pc, #100]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b50:	4819      	ldr	r0, [pc, #100]	@ (8003bb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b52:	f003 fc3f 	bl	80073d4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b58:	2203      	movs	r2, #3
 8003b5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b5c:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b5e:	2208      	movs	r2, #8
 8003b60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003b62:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b64:	2204      	movs	r2, #4
 8003b66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003b68:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b72:	4910      	ldr	r1, [pc, #64]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b74:	4810      	ldr	r0, [pc, #64]	@ (8003bb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b76:	f003 fc2d 	bl	80073d4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003b7a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003b7e:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b82:	2204      	movs	r2, #4
 8003b84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b88:	2208      	movs	r2, #8
 8003b8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b96:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b9c:	4905      	ldr	r1, [pc, #20]	@ (8003bb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b9e:	4806      	ldr	r0, [pc, #24]	@ (8003bb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ba0:	f003 fc18 	bl	80073d4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4804      	ldr	r0, [pc, #16]	@ (8003bb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ba8:	f003 fc49 	bl	800743e <HAL_SDRAM_ProgramRefreshRate>
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20001658 	.word	0x20001658
 8003bb8:	20001608 	.word	0x20001608

08003bbc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b090      	sub	sp, #64	@ 0x40
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80ec 	beq.w	8003da6 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd2:	4b77      	ldr	r3, [pc, #476]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd6:	4a76      	ldr	r2, [pc, #472]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8003bde:	4b74      	ldr	r3, [pc, #464]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bee:	4b70      	ldr	r3, [pc, #448]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003bf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	4b69      	ldr	r3, [pc, #420]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a68      	ldr	r2, [pc, #416]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b66      	ldr	r3, [pc, #408]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	4b62      	ldr	r3, [pc, #392]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a61      	ldr	r2, [pc, #388]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b5f      	ldr	r3, [pc, #380]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	4b5b      	ldr	r3, [pc, #364]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4e:	4b58      	ldr	r3, [pc, #352]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4b54      	ldr	r3, [pc, #336]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4a53      	ldr	r2, [pc, #332]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c64:	f043 0310 	orr.w	r3, r3, #16
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b51      	ldr	r3, [pc, #324]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c80:	f043 0320 	orr.w	r3, r3, #32
 8003c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c86:	4b4a      	ldr	r3, [pc, #296]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b46      	ldr	r3, [pc, #280]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	4a45      	ldr	r2, [pc, #276]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca2:	4b43      	ldr	r3, [pc, #268]	@ (8003db0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003cba:	230c      	movs	r3, #12
 8003cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003cbe:	2360      	movs	r3, #96	@ 0x60
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	483a      	ldr	r0, [pc, #232]	@ (8003db4 <BSP_SDRAM_MspInit+0x1f8>)
 8003cca:	f001 fd67 	bl	800579c <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4837      	ldr	r0, [pc, #220]	@ (8003db8 <BSP_SDRAM_MspInit+0x1fc>)
 8003cda:	f001 fd5f 	bl	800579c <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003cde:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4834      	ldr	r0, [pc, #208]	@ (8003dbc <BSP_SDRAM_MspInit+0x200>)
 8003cec:	f001 fd56 	bl	800579c <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003cf0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4830      	ldr	r0, [pc, #192]	@ (8003dc0 <BSP_SDRAM_MspInit+0x204>)
 8003cfe:	f001 fd4d 	bl	800579c <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8003d02:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	482d      	ldr	r0, [pc, #180]	@ (8003dc4 <BSP_SDRAM_MspInit+0x208>)
 8003d10:	f001 fd44 	bl	800579c <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003d14:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4829      	ldr	r0, [pc, #164]	@ (8003dc8 <BSP_SDRAM_MspInit+0x20c>)
 8003d22:	f001 fd3b 	bl	800579c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003d26:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003d2c:	4b27      	ldr	r3, [pc, #156]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003d32:	4b26      	ldr	r3, [pc, #152]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d40:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d42:	4b22      	ldr	r3, [pc, #136]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d48:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d4a:	4b20      	ldr	r3, [pc, #128]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d50:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8003d52:	4b1e      	ldr	r3, [pc, #120]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d58:	4b1c      	ldr	r3, [pc, #112]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d5e:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d66:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d68:	2203      	movs	r2, #3
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003d78:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d7a:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <BSP_SDRAM_MspInit+0x214>)
 8003d7c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d84:	4a11      	ldr	r2, [pc, #68]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8003d8a:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d8c:	f000 ff5a 	bl	8004c44 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8003d90:	480e      	ldr	r0, [pc, #56]	@ (8003dcc <BSP_SDRAM_MspInit+0x210>)
 8003d92:	f000 fea9 	bl	8004ae8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	210f      	movs	r1, #15
 8003d9a:	2038      	movs	r0, #56	@ 0x38
 8003d9c:	f000 fe6d 	bl	8004a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003da0:	2038      	movs	r0, #56	@ 0x38
 8003da2:	f000 fe86 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003da6:	bf00      	nop
 8003da8:	3740      	adds	r7, #64	@ 0x40
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	20001668 	.word	0x20001668
 8003dd0:	40026410 	.word	0x40026410

08003dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <HAL_Init+0x40>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e14 <HAL_Init+0x40>)
 8003dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_Init+0x40>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <HAL_Init+0x40>)
 8003dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_Init+0x40>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <HAL_Init+0x40>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	f000 fe31 	bl	8004a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e02:	200f      	movs	r0, #15
 8003e04:	f000 f808 	bl	8003e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e08:	f7fe f8b2 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00

08003e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_InitTick+0x54>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_InitTick+0x58>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fe49 	bl	8004ace <HAL_SYSTICK_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00e      	b.n	8003e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d80a      	bhi.n	8003e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f000 fe11 	bl	8004a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e58:	4a06      	ldr	r2, [pc, #24]	@ (8003e74 <HAL_InitTick+0x5c>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000058 	.word	0x20000058
 8003e74:	20000054 	.word	0x20000054

08003e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_IncTick+0x20>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_IncTick+0x24>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <HAL_IncTick+0x24>)
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000058 	.word	0x20000058
 8003e9c:	200016c8 	.word	0x200016c8

08003ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <HAL_GetTick+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200016c8 	.word	0x200016c8

08003eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff ffee 	bl	8003ea0 <HAL_GetTick>
 8003ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d005      	beq.n	8003ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <HAL_Delay+0x44>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ede:	bf00      	nop
 8003ee0:	f7ff ffde 	bl	8003ea0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d8f7      	bhi.n	8003ee0 <HAL_Delay+0x28>
  {
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000058 	.word	0x20000058

08003f00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e033      	b.n	8003f7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe f84e 	bl	8001fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d118      	bne.n	8003f70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f46:	f023 0302 	bic.w	r3, r3, #2
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa30 	bl	80043b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f6e:	e001      	b.n	8003f74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_Start+0x1a>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0b2      	b.n	8004108 <HAL_ADC_Start+0x180>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d018      	beq.n	8003fea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fc8:	4b52      	ldr	r3, [pc, #328]	@ (8004114 <HAL_ADC_Start+0x18c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_ADC_Start+0x190>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0c9a      	lsrs	r2, r3, #18
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003fdc:	e002      	b.n	8003fe4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f9      	bne.n	8003fde <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d17a      	bne.n	80040ee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004022:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004036:	d106      	bne.n	8004046 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403c:	f023 0206 	bic.w	r2, r3, #6
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	645a      	str	r2, [r3, #68]	@ 0x44
 8004044:	e002      	b.n	800404c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004054:	4b31      	ldr	r3, [pc, #196]	@ (800411c <HAL_ADC_Start+0x194>)
 8004056:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004060:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2b00      	cmp	r3, #0
 800406c:	d12a      	bne.n	80040c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2b      	ldr	r2, [pc, #172]	@ (8004120 <HAL_ADC_Start+0x198>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d015      	beq.n	80040a4 <HAL_ADC_Start+0x11c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a29      	ldr	r2, [pc, #164]	@ (8004124 <HAL_ADC_Start+0x19c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d105      	bne.n	800408e <HAL_ADC_Start+0x106>
 8004082:	4b26      	ldr	r3, [pc, #152]	@ (800411c <HAL_ADC_Start+0x194>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a25      	ldr	r2, [pc, #148]	@ (8004128 <HAL_ADC_Start+0x1a0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d136      	bne.n	8004106 <HAL_ADC_Start+0x17e>
 8004098:	4b20      	ldr	r3, [pc, #128]	@ (800411c <HAL_ADC_Start+0x194>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d130      	bne.n	8004106 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d129      	bne.n	8004106 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	e020      	b.n	8004106 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <HAL_ADC_Start+0x198>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d11b      	bne.n	8004106 <HAL_ADC_Start+0x17e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d114      	bne.n	8004106 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e00b      	b.n	8004106 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f043 0210 	orr.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20000000 	.word	0x20000000
 8004118:	431bde83 	.word	0x431bde83
 800411c:	40012300 	.word	0x40012300
 8004120:	40012000 	.word	0x40012000
 8004124:	40012100 	.word	0x40012100
 8004128:	40012200 	.word	0x40012200

0800412c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x1c>
 800416c:	2302      	movs	r3, #2
 800416e:	e113      	b.n	8004398 <HAL_ADC_ConfigChannel+0x244>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b09      	cmp	r3, #9
 800417e:	d925      	bls.n	80041cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	3b1e      	subs	r3, #30
 8004196:	2207      	movs	r2, #7
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43da      	mvns	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	400a      	ands	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4618      	mov	r0, r3
 80041b8:	4603      	mov	r3, r0
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4403      	add	r3, r0
 80041be:	3b1e      	subs	r3, #30
 80041c0:	409a      	lsls	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	e022      	b.n	8004212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6919      	ldr	r1, [r3, #16]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	2207      	movs	r2, #7
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	400a      	ands	r2, r1
 80041ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6919      	ldr	r1, [r3, #16]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4618      	mov	r0, r3
 8004202:	4603      	mov	r3, r0
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4403      	add	r3, r0
 8004208:	409a      	lsls	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d824      	bhi.n	8004264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	3b05      	subs	r3, #5
 800422c:	221f      	movs	r2, #31
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	400a      	ands	r2, r1
 800423a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	4618      	mov	r0, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	3b05      	subs	r3, #5
 8004256:	fa00 f203 	lsl.w	r2, r0, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	@ 0x34
 8004262:	e04c      	b.n	80042fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d824      	bhi.n	80042b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	3b23      	subs	r3, #35	@ 0x23
 800427e:	221f      	movs	r2, #31
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43da      	mvns	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	400a      	ands	r2, r1
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	3b23      	subs	r3, #35	@ 0x23
 80042a8:	fa00 f203 	lsl.w	r2, r0, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b4:	e023      	b.n	80042fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	3b41      	subs	r3, #65	@ 0x41
 80042c8:	221f      	movs	r2, #31
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4618      	mov	r0, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	3b41      	subs	r3, #65	@ 0x41
 80042f2:	fa00 f203 	lsl.w	r2, r0, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042fe:	4b29      	ldr	r3, [pc, #164]	@ (80043a4 <HAL_ADC_ConfigChannel+0x250>)
 8004300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a28      	ldr	r2, [pc, #160]	@ (80043a8 <HAL_ADC_ConfigChannel+0x254>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10f      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1d8>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b12      	cmp	r3, #18
 8004312:	d10b      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <HAL_ADC_ConfigChannel+0x254>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d12b      	bne.n	800438e <HAL_ADC_ConfigChannel+0x23a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1c      	ldr	r2, [pc, #112]	@ (80043ac <HAL_ADC_ConfigChannel+0x258>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <HAL_ADC_ConfigChannel+0x1f4>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b11      	cmp	r3, #17
 8004346:	d122      	bne.n	800438e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <HAL_ADC_ConfigChannel+0x258>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d111      	bne.n	800438e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800436a:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <HAL_ADC_ConfigChannel+0x25c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a11      	ldr	r2, [pc, #68]	@ (80043b4 <HAL_ADC_ConfigChannel+0x260>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0c9a      	lsrs	r2, r3, #18
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004380:	e002      	b.n	8004388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3b01      	subs	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f9      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40012300 	.word	0x40012300
 80043a8:	40012000 	.word	0x40012000
 80043ac:	10000012 	.word	0x10000012
 80043b0:	20000000 	.word	0x20000000
 80043b4:	431bde83 	.word	0x431bde83

080043b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c0:	4b79      	ldr	r3, [pc, #484]	@ (80045a8 <ADC_Init+0x1f0>)
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4a58      	ldr	r2, [pc, #352]	@ (80045ac <ADC_Init+0x1f4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800445e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6899      	ldr	r1, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6899      	ldr	r1, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	e00f      	b.n	80044b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0202 	bic.w	r2, r2, #2
 80044c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	7e1b      	ldrb	r3, [r3, #24]
 80044d0:	005a      	lsls	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	3b01      	subs	r3, #1
 8004510:	035a      	lsls	r2, r3, #13
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	e007      	b.n	800452c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	3b01      	subs	r3, #1
 8004548:	051a      	lsls	r2, r3, #20
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6899      	ldr	r1, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800456e:	025a      	lsls	r2, r3, #9
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	029a      	lsls	r2, r3, #10
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40012300 	.word	0x40012300
 80045ac:	0f000001 	.word	0x0f000001

080045b0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0ab      	b.n	8004726 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d018      	beq.n	8004616 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	609a      	str	r2, [r3, #8]

    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004730 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004734 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0c9a      	lsrs	r2, r3, #18
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004608:	e002      	b.n	8004610 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3b01      	subs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f9      	bne.n	800460a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d173      	bne.n	800470c <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800464e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004662:	d106      	bne.n	8004672 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	f023 0206 	bic.w	r2, r3, #6
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004670:	e002      	b.n	8004678 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	4a2c      	ldr	r2, [pc, #176]	@ (8004738 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8004686:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	4a2b      	ldr	r2, [pc, #172]	@ (800473c <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004694:	4a2a      	ldr	r2, [pc, #168]	@ (8004740 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8004696:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0202 	mvn.w	r2, #2
 80046a0:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80046b0:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80046b4:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e005      	b.n	80046da <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	605a      	str	r2, [r3, #4]
    }

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3308      	adds	r3, #8
 80046e2:	4619      	mov	r1, r3
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f000 fb0a 	bl	8004d00 <HAL_DMA_Start_IT>

    /* if no external trigger present enable software conversion of regular channels */
    if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d114      	bne.n	8004724 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	e00b      	b.n	8004724 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f043 0210 	orr.w	r2, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	f043 0201 	orr.w	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000000 	.word	0x20000000
 8004734:	431bde83 	.word	0x431bde83
 8004738:	080047d5 	.word	0x080047d5
 800473c:	0800487b 	.word	0x0800487b
 8004740:	08004897 	.word	0x08004897
 8004744:	40012300 	.word	0x40012300

08004748 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e031      	b.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004768:	4b19      	ldr	r3, [pc, #100]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 021f 	bic.w	r2, r3, #31
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	431a      	orrs	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40012300 	.word	0x40012300

080047d4 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13c      	bne.n	8004868 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d12b      	bne.n	8004860 <ADC_MultiModeDMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800480c:	2b00      	cmp	r3, #0
 800480e:	d127      	bne.n	8004860 <ADC_MultiModeDMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <ADC_MultiModeDMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004828:	2b00      	cmp	r3, #0
 800482a:	d119      	bne.n	8004860 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0220 	bic.w	r2, r2, #32
 800483a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7fc fb5d 	bl	8000f20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004866:	e004      	b.n	8004872 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fc4f 	bl	800412c <HAL_ADC_ConvHalfCpltCallback>
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2240      	movs	r2, #64	@ 0x40
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_ADC_ErrorCallback(hadc);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fc42 	bl	8004140 <HAL_ADC_ErrorCallback>
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <__NVIC_SetPriorityGrouping+0x44>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048e0:	4013      	ands	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f6:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <__NVIC_SetPriorityGrouping+0x44>)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	60d3      	str	r3, [r2, #12]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <__NVIC_GetPriorityGrouping+0x18>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	f003 0307 	and.w	r3, r3, #7
}
 800491a:	4618      	mov	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	e000ed00 	.word	0xe000ed00

08004928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db0b      	blt.n	8004952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	4907      	ldr	r1, [pc, #28]	@ (8004960 <__NVIC_EnableIRQ+0x38>)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2001      	movs	r0, #1
 800494a:	fa00 f202 	lsl.w	r2, r0, r2
 800494e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e100 	.word	0xe000e100

08004964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004974:	2b00      	cmp	r3, #0
 8004976:	db0a      	blt.n	800498e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	490c      	ldr	r1, [pc, #48]	@ (80049b0 <__NVIC_SetPriority+0x4c>)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	0112      	lsls	r2, r2, #4
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	440b      	add	r3, r1
 8004988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800498c:	e00a      	b.n	80049a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4908      	ldr	r1, [pc, #32]	@ (80049b4 <__NVIC_SetPriority+0x50>)
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	3b04      	subs	r3, #4
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	761a      	strb	r2, [r3, #24]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000e100 	.word	0xe000e100
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	@ 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f1c3 0307 	rsb	r3, r3, #7
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf28      	it	cs
 80049d6:	2304      	movcs	r3, #4
 80049d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3304      	adds	r3, #4
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d902      	bls.n	80049e8 <NVIC_EncodePriority+0x30>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3b03      	subs	r3, #3
 80049e6:	e000      	b.n	80049ea <NVIC_EncodePriority+0x32>
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43da      	mvns	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a00:	f04f 31ff 	mov.w	r1, #4294967295
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	43d9      	mvns	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a10:	4313      	orrs	r3, r2
         );
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	@ 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a30:	d301      	bcc.n	8004a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a32:	2301      	movs	r3, #1
 8004a34:	e00f      	b.n	8004a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a36:	4a0a      	ldr	r2, [pc, #40]	@ (8004a60 <SysTick_Config+0x40>)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a3e:	210f      	movs	r1, #15
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	f7ff ff8e 	bl	8004964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <SysTick_Config+0x40>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a4e:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <SysTick_Config+0x40>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000e010 	.word	0xe000e010

08004a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff29 	bl	80048c4 <__NVIC_SetPriorityGrouping>
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	4603      	mov	r3, r0
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a8c:	f7ff ff3e 	bl	800490c <__NVIC_GetPriorityGrouping>
 8004a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	6978      	ldr	r0, [r7, #20]
 8004a98:	f7ff ff8e 	bl	80049b8 <NVIC_EncodePriority>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff5d 	bl	8004964 <__NVIC_SetPriority>
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff31 	bl	8004928 <__NVIC_EnableIRQ>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ffa2 	bl	8004a20 <SysTick_Config>
 8004adc:	4603      	mov	r3, r0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004af4:	f7ff f9d4 	bl	8003ea0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e099      	b.n	8004c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b24:	e00f      	b.n	8004b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b26:	f7ff f9bb 	bl	8003ea0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d908      	bls.n	8004b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e078      	b.n	8004c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e8      	bne.n	8004b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4b38      	ldr	r3, [pc, #224]	@ (8004c40 <HAL_DMA_Init+0x158>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d107      	bne.n	8004bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d117      	bne.n	8004c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 facd 	bl	800518c <DMA_CheckFifoParam>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2240      	movs	r2, #64	@ 0x40
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c06:	2301      	movs	r3, #1
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa84 	bl	8005120 <DMA_CalcBaseAndBitshift>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c20:	223f      	movs	r2, #63	@ 0x3f
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	f010803f 	.word	0xf010803f

08004c44 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e050      	b.n	8004cf8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d101      	bne.n	8004c66 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	e048      	b.n	8004cf8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2221      	movs	r2, #33	@ 0x21
 8004ca4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa3a 	bl	8005120 <DMA_CalcBaseAndBitshift>
 8004cac:	4603      	mov	r3, r0
 8004cae:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd8:	223f      	movs	r2, #63	@ 0x3f
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_DMA_Start_IT+0x26>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e040      	b.n	8004da8 <HAL_DMA_Start_IT+0xa8>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d12f      	bne.n	8004d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f9b8 	bl	80050c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d58:	223f      	movs	r2, #63	@ 0x3f
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0216 	orr.w	r2, r2, #22
 8004d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0208 	orr.w	r2, r2, #8
 8004d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e005      	b.n	8004da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
 8004da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8004ff8 <HAL_DMA_IRQHandler+0x248>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8004ffc <HAL_DMA_IRQHandler+0x24c>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0a9b      	lsrs	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	2208      	movs	r2, #8
 8004ddc:	409a      	lsls	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01a      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	2208      	movs	r2, #8
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3e:	2201      	movs	r2, #1
 8004e40:	409a      	lsls	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	2204      	movs	r2, #4
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	2204      	movs	r2, #4
 8004e76:	409a      	lsls	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e80:	f043 0204 	orr.w	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d043      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03c      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	2210      	movs	r2, #16
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d024      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
 8004ede:	e01f      	b.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e016      	b.n	8004f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0208 	bic.w	r2, r2, #8
 8004f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	2220      	movs	r2, #32
 8004f26:	409a      	lsls	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 808f 	beq.w	8005050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8087 	beq.w	8005050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	2220      	movs	r2, #32
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d136      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0216 	bic.w	r2, r2, #22
 8004f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <HAL_DMA_IRQHandler+0x1da>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0208 	bic.w	r2, r2, #8
 8004f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	223f      	movs	r2, #63	@ 0x3f
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d07e      	beq.n	80050bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
        }
        return;
 8004fc6:	e079      	b.n	80050bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d031      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	e02c      	b.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
 8005010:	e01e      	b.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10f      	bne.n	8005040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0210 	bic.w	r2, r2, #16
 800502e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005054:	2b00      	cmp	r3, #0
 8005056:	d032      	beq.n	80050be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d022      	beq.n	80050aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2205      	movs	r2, #5
 8005068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	3301      	adds	r3, #1
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d307      	bcc.n	8005098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f2      	bne.n	800507c <HAL_DMA_IRQHandler+0x2cc>
 8005096:	e000      	b.n	800509a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	e000      	b.n	80050be <HAL_DMA_IRQHandler+0x30e>
        return;
 80050bc:	bf00      	nop
    }
  }
}
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d108      	bne.n	8005104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005102:	e007      	b.n	8005114 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	3b10      	subs	r3, #16
 8005130:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <DMA_CalcBaseAndBitshift+0x64>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800513a:	4a13      	ldr	r2, [pc, #76]	@ (8005188 <DMA_CalcBaseAndBitshift+0x68>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d909      	bls.n	8005162 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	1d1a      	adds	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005160:	e007      	b.n	8005172 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	aaaaaaab 	.word	0xaaaaaaab
 8005188:	0800c6b4 	.word	0x0800c6b4

0800518c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11f      	bne.n	80051e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d856      	bhi.n	800525a <DMA_CheckFifoParam+0xce>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <DMA_CheckFifoParam+0x28>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	0800525b 	.word	0x0800525b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d046      	beq.n	800525e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d4:	e043      	b.n	800525e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051de:	d140      	bne.n	8005262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e03d      	b.n	8005262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ee:	d121      	bne.n	8005234 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d837      	bhi.n	8005266 <DMA_CheckFifoParam+0xda>
 80051f6:	a201      	add	r2, pc, #4	@ (adr r2, 80051fc <DMA_CheckFifoParam+0x70>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005213 	.word	0x08005213
 8005204:	0800520d 	.word	0x0800520d
 8005208:	08005225 	.word	0x08005225
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e030      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d025      	beq.n	800526a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005222:	e022      	b.n	800526a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800522c:	d11f      	bne.n	800526e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005232:	e01c      	b.n	800526e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d903      	bls.n	8005242 <DMA_CheckFifoParam+0xb6>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d003      	beq.n	8005248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005240:	e018      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      break;
 8005246:	e015      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e00b      	b.n	8005272 <DMA_CheckFifoParam+0xe6>
      break;
 800525a:	bf00      	nop
 800525c:	e00a      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800525e:	bf00      	nop
 8005260:	e008      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005262:	bf00      	nop
 8005264:	e006      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;   
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005272:	bf00      	nop
    }
  } 
  
  return status; 
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e03b      	b.n	800530e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc ff60 	bl	8002170 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d4:	f023 0107 	bic.w	r1, r3, #7
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80052ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68d1      	ldr	r1, [r2, #12]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af02      	add	r7, sp, #8
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_DMA2D_Start+0x1c>
 800532e:	2302      	movs	r3, #2
 8005330:	e018      	b.n	8005364 <HAL_DMA2D_Start+0x4e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f989 	bl	8005664 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d056      	beq.n	8005436 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005388:	f7fe fd8a 	bl	8003ea0 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800538e:	e04b      	b.n	8005428 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d023      	beq.n	80053ea <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	f043 0202 	orr.w	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2221      	movs	r2, #33	@ 0x21
 80053d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0a5      	b.n	8005536 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d01a      	beq.n	8005428 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fe fd55 	bl	8003ea0 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <HAL_DMA2D_PollForTransfer+0x9c>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10f      	bne.n	8005428 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2203      	movs	r2, #3
 8005418:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e086      	b.n	8005536 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ac      	beq.n	8005390 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d061      	beq.n	800551c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005458:	f7fe fd22 	bl	8003ea0 <HAL_GetTick>
 800545c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800545e:	e056      	b.n	800550e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800546e:	2b00      	cmp	r3, #0
 8005470:	d02e      	beq.n	80054d0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005480:	f043 0204 	orr.w	r2, r3, #4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2229      	movs	r2, #41	@ 0x29
 80054ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d01a      	beq.n	800550e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054d8:	f7fe fce2 	bl	8003ea0 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <HAL_DMA2D_PollForTransfer+0x182>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2203      	movs	r2, #3
 80054fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e013      	b.n	8005536 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0a1      	beq.n	8005460 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2212      	movs	r2, #18
 8005522:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_DMA2D_ConfigLayer+0x20>
 800555c:	2302      	movs	r3, #2
 800555e:	e079      	b.n	8005654 <HAL_DMA2D_ConfigLayer+0x114>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	3318      	adds	r3, #24
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800558a:	4b35      	ldr	r3, [pc, #212]	@ (8005660 <HAL_DMA2D_ConfigLayer+0x120>)
 800558c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b0a      	cmp	r3, #10
 8005594:	d003      	beq.n	800559e <HAL_DMA2D_ConfigLayer+0x5e>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b09      	cmp	r3, #9
 800559c:	d107      	bne.n	80055ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e005      	b.n	80055ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d120      	bne.n	8005602 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	ea02 0103 	and.w	r1, r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b0a      	cmp	r3, #10
 80055e8:	d003      	beq.n	80055f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	d127      	bne.n	8005642 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80055fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005600:	e01f      	b.n	8005642 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	43db      	mvns	r3, r3
 800560c:	ea02 0103 	and.w	r1, r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	430a      	orrs	r2, r1
 8005618:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b0a      	cmp	r3, #10
 800562a:	d003      	beq.n	8005634 <HAL_DMA2D_ConfigLayer+0xf4>
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b09      	cmp	r3, #9
 8005632:	d106      	bne.n	8005642 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005640:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	ff03000f 	.word	0xff03000f

08005664 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005664:	b480      	push	{r7}
 8005666:	b08b      	sub	sp, #44	@ 0x2c
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005678:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	041a      	lsls	r2, r3, #16
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	431a      	orrs	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800569c:	d174      	bne.n	8005788 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80056a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80056ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80056b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d108      	bne.n	80056d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d4:	e053      	b.n	800577e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d106      	bne.n	80056ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ea:	e048      	b.n	800577e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d111      	bne.n	8005718 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	0cdb      	lsrs	r3, r3, #19
 80056f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	0a9b      	lsrs	r3, r3, #10
 80056fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	08db      	lsrs	r3, r3, #3
 8005704:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	02db      	lsls	r3, r3, #11
 800570e:	4313      	orrs	r3, r2
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	e032      	b.n	800577e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d117      	bne.n	8005750 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	0fdb      	lsrs	r3, r3, #31
 8005724:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	0cdb      	lsrs	r3, r3, #19
 800572a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	0adb      	lsrs	r3, r3, #11
 8005730:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	029b      	lsls	r3, r3, #10
 8005740:	431a      	orrs	r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	03db      	lsls	r3, r3, #15
 8005746:	4313      	orrs	r3, r2
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
 800574e:	e016      	b.n	800577e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	0f1b      	lsrs	r3, r3, #28
 8005754:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	0d1b      	lsrs	r3, r3, #20
 800575a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	0b1b      	lsrs	r3, r3, #12
 8005760:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	011a      	lsls	r2, r3, #4
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	431a      	orrs	r2, r3
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005786:	e003      	b.n	8005790 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	60da      	str	r2, [r3, #12]
}
 8005790:	bf00      	nop
 8005792:	372c      	adds	r7, #44	@ 0x2c
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e177      	b.n	8005aa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f040 8166 	bne.w	8005aa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d005      	beq.n	80057ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d130      	bne.n	8005850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2203      	movs	r2, #3
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d017      	beq.n	800588c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d123      	bne.n	80058e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	08da      	lsrs	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3208      	adds	r2, #8
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80c0 	beq.w	8005aa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b66      	ldr	r3, [pc, #408]	@ (8005ac0 <HAL_GPIO_Init+0x324>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	4a65      	ldr	r2, [pc, #404]	@ (8005ac0 <HAL_GPIO_Init+0x324>)
 800592c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005930:	6453      	str	r3, [r2, #68]	@ 0x44
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <HAL_GPIO_Init+0x324>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593e:	4a61      	ldr	r2, [pc, #388]	@ (8005ac4 <HAL_GPIO_Init+0x328>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a58      	ldr	r2, [pc, #352]	@ (8005ac8 <HAL_GPIO_Init+0x32c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d037      	beq.n	80059da <HAL_GPIO_Init+0x23e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a57      	ldr	r2, [pc, #348]	@ (8005acc <HAL_GPIO_Init+0x330>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d031      	beq.n	80059d6 <HAL_GPIO_Init+0x23a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a56      	ldr	r2, [pc, #344]	@ (8005ad0 <HAL_GPIO_Init+0x334>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02b      	beq.n	80059d2 <HAL_GPIO_Init+0x236>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a55      	ldr	r2, [pc, #340]	@ (8005ad4 <HAL_GPIO_Init+0x338>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d025      	beq.n	80059ce <HAL_GPIO_Init+0x232>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a54      	ldr	r2, [pc, #336]	@ (8005ad8 <HAL_GPIO_Init+0x33c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01f      	beq.n	80059ca <HAL_GPIO_Init+0x22e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a53      	ldr	r2, [pc, #332]	@ (8005adc <HAL_GPIO_Init+0x340>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d019      	beq.n	80059c6 <HAL_GPIO_Init+0x22a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a52      	ldr	r2, [pc, #328]	@ (8005ae0 <HAL_GPIO_Init+0x344>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_GPIO_Init+0x226>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a51      	ldr	r2, [pc, #324]	@ (8005ae4 <HAL_GPIO_Init+0x348>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00d      	beq.n	80059be <HAL_GPIO_Init+0x222>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <HAL_GPIO_Init+0x34c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <HAL_GPIO_Init+0x21e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a4f      	ldr	r2, [pc, #316]	@ (8005aec <HAL_GPIO_Init+0x350>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_GPIO_Init+0x21a>
 80059b2:	2309      	movs	r3, #9
 80059b4:	e012      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059b6:	230a      	movs	r3, #10
 80059b8:	e010      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059ba:	2308      	movs	r3, #8
 80059bc:	e00e      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059be:	2307      	movs	r3, #7
 80059c0:	e00c      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059c2:	2306      	movs	r3, #6
 80059c4:	e00a      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059c6:	2305      	movs	r3, #5
 80059c8:	e008      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059ca:	2304      	movs	r3, #4
 80059cc:	e006      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059ce:	2303      	movs	r3, #3
 80059d0:	e004      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e002      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_GPIO_Init+0x240>
 80059da:	2300      	movs	r3, #0
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	f002 0203 	and.w	r2, r2, #3
 80059e2:	0092      	lsls	r2, r2, #2
 80059e4:	4093      	lsls	r3, r2
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ec:	4935      	ldr	r1, [pc, #212]	@ (8005ac4 <HAL_GPIO_Init+0x328>)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	089b      	lsrs	r3, r3, #2
 80059f2:	3302      	adds	r3, #2
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059fa:	4b3d      	ldr	r3, [pc, #244]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a1e:	4a34      	ldr	r2, [pc, #208]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a24:	4b32      	ldr	r3, [pc, #200]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a4e:	4b28      	ldr	r3, [pc, #160]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a72:	4a1f      	ldr	r2, [pc, #124]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a78:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a9c:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <HAL_GPIO_Init+0x354>)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	f67f ae84 	bls.w	80057b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	3724      	adds	r7, #36	@ 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40013800 	.word	0x40013800
 8005ac8:	40020000 	.word	0x40020000
 8005acc:	40020400 	.word	0x40020400
 8005ad0:	40020800 	.word	0x40020800
 8005ad4:	40020c00 	.word	0x40020c00
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40021400 	.word	0x40021400
 8005ae0:	40021800 	.word	0x40021800
 8005ae4:	40021c00 	.word	0x40021c00
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	40022400 	.word	0x40022400
 8005af0:	40013c00 	.word	0x40013c00

08005af4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e0d9      	b.n	8005cc4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b10:	2201      	movs	r2, #1
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	f040 80c9 	bne.w	8005cbe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8005cdc <HAL_GPIO_DeInit+0x1e8>)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	3302      	adds	r3, #2
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	220f      	movs	r2, #15
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a63      	ldr	r2, [pc, #396]	@ (8005ce0 <HAL_GPIO_DeInit+0x1ec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d037      	beq.n	8005bc6 <HAL_GPIO_DeInit+0xd2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a62      	ldr	r2, [pc, #392]	@ (8005ce4 <HAL_GPIO_DeInit+0x1f0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_GPIO_DeInit+0xce>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a61      	ldr	r2, [pc, #388]	@ (8005ce8 <HAL_GPIO_DeInit+0x1f4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d02b      	beq.n	8005bbe <HAL_GPIO_DeInit+0xca>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a60      	ldr	r2, [pc, #384]	@ (8005cec <HAL_GPIO_DeInit+0x1f8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d025      	beq.n	8005bba <HAL_GPIO_DeInit+0xc6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a5f      	ldr	r2, [pc, #380]	@ (8005cf0 <HAL_GPIO_DeInit+0x1fc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01f      	beq.n	8005bb6 <HAL_GPIO_DeInit+0xc2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a5e      	ldr	r2, [pc, #376]	@ (8005cf4 <HAL_GPIO_DeInit+0x200>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d019      	beq.n	8005bb2 <HAL_GPIO_DeInit+0xbe>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a5d      	ldr	r2, [pc, #372]	@ (8005cf8 <HAL_GPIO_DeInit+0x204>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_GPIO_DeInit+0xba>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a5c      	ldr	r2, [pc, #368]	@ (8005cfc <HAL_GPIO_DeInit+0x208>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00d      	beq.n	8005baa <HAL_GPIO_DeInit+0xb6>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a5b      	ldr	r2, [pc, #364]	@ (8005d00 <HAL_GPIO_DeInit+0x20c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <HAL_GPIO_DeInit+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a5a      	ldr	r2, [pc, #360]	@ (8005d04 <HAL_GPIO_DeInit+0x210>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_GPIO_DeInit+0xae>
 8005b9e:	2309      	movs	r3, #9
 8005ba0:	e012      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	e010      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	e00e      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005baa:	2307      	movs	r3, #7
 8005bac:	e00c      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bae:	2306      	movs	r3, #6
 8005bb0:	e00a      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	e008      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e006      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e004      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e002      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_GPIO_DeInit+0xd4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	f002 0203 	and.w	r2, r2, #3
 8005bce:	0092      	lsls	r2, r2, #2
 8005bd0:	4093      	lsls	r3, r2
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d132      	bne.n	8005c3e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	4949      	ldr	r1, [pc, #292]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005be6:	4b48      	ldr	r3, [pc, #288]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	4946      	ldr	r1, [pc, #280]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bf4:	4b44      	ldr	r3, [pc, #272]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	4942      	ldr	r1, [pc, #264]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c02:	4b41      	ldr	r3, [pc, #260]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	493f      	ldr	r1, [pc, #252]	@ (8005d08 <HAL_GPIO_DeInit+0x214>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	220f      	movs	r2, #15
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c20:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <HAL_GPIO_DeInit+0x1e8>)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	3302      	adds	r3, #2
 8005c28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	482a      	ldr	r0, [pc, #168]	@ (8005cdc <HAL_GPIO_DeInit+0x1e8>)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	400a      	ands	r2, r1
 8005c38:	3302      	adds	r3, #2
 8005c3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	2103      	movs	r1, #3
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	08da      	lsrs	r2, r3, #3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3208      	adds	r2, #8
 8005c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	220f      	movs	r2, #15
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	08d2      	lsrs	r2, r2, #3
 8005c74:	4019      	ands	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3208      	adds	r2, #8
 8005c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2103      	movs	r1, #3
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	401a      	ands	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	2101      	movs	r1, #1
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	2103      	movs	r1, #3
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	401a      	ands	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	f67f af22 	bls.w	8005b10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40013800 	.word	0x40013800
 8005ce0:	40020000 	.word	0x40020000
 8005ce4:	40020400 	.word	0x40020400
 8005ce8:	40020800 	.word	0x40020800
 8005cec:	40020c00 	.word	0x40020c00
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40021400 	.word	0x40021400
 8005cf8:	40021800 	.word	0x40021800
 8005cfc:	40021c00 	.word	0x40021c00
 8005d00:	40022000 	.word	0x40022000
 8005d04:	40022400 	.word	0x40022400
 8005d08:	40013c00 	.word	0x40013c00

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d28:	e003      	b.n	8005d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	041a      	lsls	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	619a      	str	r2, [r3, #24]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e12b      	b.n	8005faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc fa24 	bl	80021b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	@ 0x24
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005da4:	f001 f8fa 	bl	8006f9c <HAL_RCC_GetPCLK1Freq>
 8005da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4a81      	ldr	r2, [pc, #516]	@ (8005fb4 <HAL_I2C_Init+0x274>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d807      	bhi.n	8005dc4 <HAL_I2C_Init+0x84>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a80      	ldr	r2, [pc, #512]	@ (8005fb8 <HAL_I2C_Init+0x278>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	bf94      	ite	ls
 8005dbc:	2301      	movls	r3, #1
 8005dbe:	2300      	movhi	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e006      	b.n	8005dd2 <HAL_I2C_Init+0x92>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8005fbc <HAL_I2C_Init+0x27c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	bf94      	ite	ls
 8005dcc:	2301      	movls	r3, #1
 8005dce:	2300      	movhi	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e0e7      	b.n	8005faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a78      	ldr	r2, [pc, #480]	@ (8005fc0 <HAL_I2C_Init+0x280>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	0c9b      	lsrs	r3, r3, #18
 8005de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a6a      	ldr	r2, [pc, #424]	@ (8005fb4 <HAL_I2C_Init+0x274>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d802      	bhi.n	8005e14 <HAL_I2C_Init+0xd4>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3301      	adds	r3, #1
 8005e12:	e009      	b.n	8005e28 <HAL_I2C_Init+0xe8>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	4a69      	ldr	r2, [pc, #420]	@ (8005fc4 <HAL_I2C_Init+0x284>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	099b      	lsrs	r3, r3, #6
 8005e26:	3301      	adds	r3, #1
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	495c      	ldr	r1, [pc, #368]	@ (8005fb4 <HAL_I2C_Init+0x274>)
 8005e44:	428b      	cmp	r3, r1
 8005e46:	d819      	bhi.n	8005e7c <HAL_I2C_Init+0x13c>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1e59      	subs	r1, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e56:	1c59      	adds	r1, r3, #1
 8005e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_I2C_Init+0x138>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1e59      	subs	r1, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e70:	3301      	adds	r3, #1
 8005e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e76:	e051      	b.n	8005f1c <HAL_I2C_Init+0x1dc>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	e04f      	b.n	8005f1c <HAL_I2C_Init+0x1dc>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d111      	bne.n	8005ea8 <HAL_I2C_Init+0x168>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1e58      	subs	r0, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	440b      	add	r3, r1
 8005e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	e012      	b.n	8005ece <HAL_I2C_Init+0x18e>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1e58      	subs	r0, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	0099      	lsls	r1, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_I2C_Init+0x196>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e022      	b.n	8005f1c <HAL_I2C_Init+0x1dc>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10e      	bne.n	8005efc <HAL_I2C_Init+0x1bc>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1e58      	subs	r0, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	440b      	add	r3, r1
 8005eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005efa:	e00f      	b.n	8005f1c <HAL_I2C_Init+0x1dc>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1e58      	subs	r0, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	0099      	lsls	r1, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f12:	3301      	adds	r3, #1
 8005f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	6809      	ldr	r1, [r1, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6911      	ldr	r1, [r2, #16]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	68d2      	ldr	r2, [r2, #12]
 8005f56:	4311      	orrs	r1, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	000186a0 	.word	0x000186a0
 8005fb8:	001e847f 	.word	0x001e847f
 8005fbc:	003d08ff 	.word	0x003d08ff
 8005fc0:	431bde83 	.word	0x431bde83
 8005fc4:	10624dd3 	.word	0x10624dd3

08005fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d129      	bne.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2224      	movs	r2, #36	@ 0x24
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0210 	bic.w	r2, r2, #16
 8006004:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e000      	b.n	8006034 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
  }
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b20      	cmp	r3, #32
 8006058:	d12a      	bne.n	80060b0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	@ 0x24
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800607a:	89fb      	ldrh	r3, [r7, #14]
 800607c:	f023 030f 	bic.w	r3, r3, #15
 8006080:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	b29a      	uxth	r2, r3
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	4313      	orrs	r3, r2
 800608a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	89fa      	ldrh	r2, [r7, #14]
 8006092:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e0bf      	b.n	8006252 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc f8ce 	bl	8002288 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006102:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006118:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b4a      	ldr	r3, [pc, #296]	@ (800625c <HAL_LTDC_Init+0x19c>)
 8006134:	400b      	ands	r3, r1
 8006136:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6899      	ldr	r1, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68d9      	ldr	r1, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b3e      	ldr	r3, [pc, #248]	@ (800625c <HAL_LTDC_Init+0x19c>)
 8006162:	400b      	ands	r3, r1
 8006164:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68d9      	ldr	r1, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1a      	ldr	r2, [r3, #32]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b33      	ldr	r3, [pc, #204]	@ (800625c <HAL_LTDC_Init+0x19c>)
 8006190:	400b      	ands	r3, r1
 8006192:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6959      	ldr	r1, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b27      	ldr	r3, [pc, #156]	@ (800625c <HAL_LTDC_Init+0x19c>)
 80061be:	400b      	ands	r3, r1
 80061c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80061f0:	041b      	lsls	r3, r3, #16
 80061f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0206 	orr.w	r2, r2, #6
 800622e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	f000f800 	.word	0xf000f800

08006260 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006260:	b5b0      	push	{r4, r5, r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_LTDC_ConfigLayer+0x1a>
 8006276:	2302      	movs	r3, #2
 8006278:	e02c      	b.n	80062d4 <HAL_LTDC_ConfigLayer+0x74>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2134      	movs	r1, #52	@ 0x34
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	4413      	add	r3, r2
 8006296:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f86a 	bl	800638e <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bdb0      	pop	{r4, r5, r7, pc}

080062dc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_LTDC_EnableDither+0x16>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e016      	b.n	8006320 <HAL_LTDC_EnableDither+0x44>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <HAL_LTDC_EnableDither+0x50>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4a09      	ldr	r2, [pc, #36]	@ (800632c <HAL_LTDC_EnableDither+0x50>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40016800 	.word	0x40016800

08006330 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_LTDC_Reload+0x18>
 8006344:	2302      	movs	r3, #2
 8006346:	e01c      	b.n	8006382 <HAL_LTDC_Reload+0x52>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800638e:	b480      	push	{r7}
 8006390:	b089      	sub	sp, #36	@ 0x24
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063aa:	4413      	add	r3, r2
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	01db      	lsls	r3, r3, #7
 80063ba:	4413      	add	r3, r2
 80063bc:	3384      	adds	r3, #132	@ 0x84
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	4611      	mov	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	01d2      	lsls	r2, r2, #7
 80063ca:	440a      	add	r2, r1
 80063cc:	3284      	adds	r2, #132	@ 0x84
 80063ce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80063d2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063e4:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063e6:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4619      	mov	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	01db      	lsls	r3, r3, #7
 80063f2:	440b      	add	r3, r1
 80063f4:	3384      	adds	r3, #132	@ 0x84
 80063f6:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80063fc:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800640c:	4413      	add	r3, r2
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	3384      	adds	r3, #132	@ 0x84
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4611      	mov	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	01d2      	lsls	r2, r2, #7
 800642c:	440a      	add	r2, r1
 800642e:	3284      	adds	r2, #132	@ 0x84
 8006430:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006434:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006444:	4413      	add	r3, r2
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4619      	mov	r1, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	440b      	add	r3, r1
 8006454:	3384      	adds	r3, #132	@ 0x84
 8006456:	4619      	mov	r1, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4413      	add	r3, r2
 800646a:	3384      	adds	r3, #132	@ 0x84
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	4611      	mov	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	01d2      	lsls	r2, r2, #7
 8006478:	440a      	add	r2, r1
 800647a:	3284      	adds	r2, #132	@ 0x84
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	@ 0x84
 8006490:	461a      	mov	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	01db      	lsls	r3, r3, #7
 80064be:	4413      	add	r3, r2
 80064c0:	3384      	adds	r3, #132	@ 0x84
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	01db      	lsls	r3, r3, #7
 80064ce:	4413      	add	r3, r2
 80064d0:	3384      	adds	r3, #132	@ 0x84
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80064de:	461a      	mov	r2, r3
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	440b      	add	r3, r1
 80064f4:	3384      	adds	r3, #132	@ 0x84
 80064f6:	4619      	mov	r1, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	01db      	lsls	r3, r3, #7
 8006508:	4413      	add	r3, r2
 800650a:	3384      	adds	r3, #132	@ 0x84
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	4611      	mov	r1, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	01d2      	lsls	r2, r2, #7
 8006518:	440a      	add	r2, r1
 800651a:	3284      	adds	r2, #132	@ 0x84
 800651c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006520:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	4413      	add	r3, r2
 800652e:	3384      	adds	r3, #132	@ 0x84
 8006530:	461a      	mov	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	@ 0x84
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4611      	mov	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	01d2      	lsls	r2, r2, #7
 8006552:	440a      	add	r2, r1
 8006554:	3284      	adds	r2, #132	@ 0x84
 8006556:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	68f9      	ldr	r1, [r7, #12]
 800656a:	6809      	ldr	r1, [r1, #0]
 800656c:	4608      	mov	r0, r1
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	01c9      	lsls	r1, r1, #7
 8006572:	4401      	add	r1, r0
 8006574:	3184      	adds	r1, #132	@ 0x84
 8006576:	4313      	orrs	r3, r2
 8006578:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	4413      	add	r3, r2
 8006586:	3384      	adds	r3, #132	@ 0x84
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	01db      	lsls	r3, r3, #7
 8006594:	4413      	add	r3, r2
 8006596:	3384      	adds	r3, #132	@ 0x84
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	01db      	lsls	r3, r3, #7
 80065a8:	4413      	add	r3, r2
 80065aa:	3384      	adds	r3, #132	@ 0x84
 80065ac:	461a      	mov	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80065bc:	2304      	movs	r3, #4
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	e01b      	b.n	80065fa <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d102      	bne.n	80065d0 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80065ca:	2303      	movs	r3, #3
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	e014      	b.n	80065fa <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d00b      	beq.n	80065f0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d007      	beq.n	80065f0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d003      	beq.n	80065f0 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ec:	2b07      	cmp	r3, #7
 80065ee:	d102      	bne.n	80065f6 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80065f0:	2302      	movs	r3, #2
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e001      	b.n	80065fa <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065f6:	2301      	movs	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	4413      	add	r3, r2
 8006606:	3384      	adds	r3, #132	@ 0x84
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	4611      	mov	r1, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	01d2      	lsls	r2, r2, #7
 8006614:	440a      	add	r2, r1
 8006616:	3284      	adds	r2, #132	@ 0x84
 8006618:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800661c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	fb02 f303 	mul.w	r3, r2, r3
 8006628:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6859      	ldr	r1, [r3, #4]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1acb      	subs	r3, r1, r3
 8006634:	69f9      	ldr	r1, [r7, #28]
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	6809      	ldr	r1, [r1, #0]
 8006640:	4608      	mov	r0, r1
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	01c9      	lsls	r1, r1, #7
 8006646:	4401      	add	r1, r0
 8006648:	3184      	adds	r1, #132	@ 0x84
 800664a:	4313      	orrs	r3, r2
 800664c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	4413      	add	r3, r2
 800665a:	3384      	adds	r3, #132	@ 0x84
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	4611      	mov	r1, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	01d2      	lsls	r2, r2, #7
 8006668:	440a      	add	r2, r1
 800666a:	3284      	adds	r2, #132	@ 0x84
 800666c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	4413      	add	r3, r2
 8006682:	3384      	adds	r3, #132	@ 0x84
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	01db      	lsls	r3, r3, #7
 8006696:	4413      	add	r3, r2
 8006698:	3384      	adds	r3, #132	@ 0x84
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	4611      	mov	r1, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	01d2      	lsls	r2, r2, #7
 80066a6:	440a      	add	r2, r1
 80066a8:	3284      	adds	r2, #132	@ 0x84
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	3724      	adds	r7, #36	@ 0x24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e267      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d075      	beq.n	80067c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066da:	4b88      	ldr	r3, [pc, #544]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 030c 	and.w	r3, r3, #12
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d00c      	beq.n	8006700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066e6:	4b85      	ldr	r3, [pc, #532]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d112      	bne.n	8006718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b82      	ldr	r3, [pc, #520]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066fe:	d10b      	bne.n	8006718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006700:	4b7e      	ldr	r3, [pc, #504]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05b      	beq.n	80067c4 <HAL_RCC_OscConfig+0x108>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d157      	bne.n	80067c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e242      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d106      	bne.n	8006730 <HAL_RCC_OscConfig+0x74>
 8006722:	4b76      	ldr	r3, [pc, #472]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a75      	ldr	r2, [pc, #468]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e01d      	b.n	800676c <HAL_RCC_OscConfig+0xb0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006738:	d10c      	bne.n	8006754 <HAL_RCC_OscConfig+0x98>
 800673a:	4b70      	ldr	r3, [pc, #448]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a6f      	ldr	r2, [pc, #444]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	4b6d      	ldr	r3, [pc, #436]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6c      	ldr	r2, [pc, #432]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e00b      	b.n	800676c <HAL_RCC_OscConfig+0xb0>
 8006754:	4b69      	ldr	r3, [pc, #420]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a68      	ldr	r2, [pc, #416]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800675a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4b66      	ldr	r3, [pc, #408]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a65      	ldr	r2, [pc, #404]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800676a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d013      	beq.n	800679c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fd fb94 	bl	8003ea0 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800677c:	f7fd fb90 	bl	8003ea0 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	@ 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e207      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b5b      	ldr	r3, [pc, #364]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0xc0>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fd fb80 	bl	8003ea0 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a4:	f7fd fb7c 	bl	8003ea0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b64      	cmp	r3, #100	@ 0x64
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e1f3      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b6:	4b51      	ldr	r3, [pc, #324]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0xe8>
 80067c2:	e000      	b.n	80067c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d063      	beq.n	800689a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067d2:	4b4a      	ldr	r3, [pc, #296]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067de:	4b47      	ldr	r3, [pc, #284]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d11c      	bne.n	8006824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b44      	ldr	r3, [pc, #272]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d116      	bne.n	8006824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	4b41      	ldr	r3, [pc, #260]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_RCC_OscConfig+0x152>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e1c7      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680e:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4937      	ldr	r1, [pc, #220]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006822:	e03a      	b.n	800689a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800682c:	4b34      	ldr	r3, [pc, #208]	@ (8006900 <HAL_RCC_OscConfig+0x244>)
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fd fb35 	bl	8003ea0 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683a:	f7fd fb31 	bl	8003ea0 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e1a8      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684c:	4b2b      	ldr	r3, [pc, #172]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	4b28      	ldr	r3, [pc, #160]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4925      	ldr	r1, [pc, #148]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006868:	4313      	orrs	r3, r2
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	e015      	b.n	800689a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <HAL_RCC_OscConfig+0x244>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fd fb14 	bl	8003ea0 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800687c:	f7fd fb10 	bl	8003ea0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e187      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688e:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d036      	beq.n	8006914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ae:	4b15      	ldr	r3, [pc, #84]	@ (8006904 <HAL_RCC_OscConfig+0x248>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b4:	f7fd faf4 	bl	8003ea0 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068bc:	f7fd faf0 	bl	8003ea0 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e167      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ce:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <HAL_RCC_OscConfig+0x240>)
 80068d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x200>
 80068da:	e01b      	b.n	8006914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068dc:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <HAL_RCC_OscConfig+0x248>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e2:	f7fd fadd 	bl	8003ea0 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e8:	e00e      	b.n	8006908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ea:	f7fd fad9 	bl	8003ea0 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d907      	bls.n	8006908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e150      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
 80068fc:	40023800 	.word	0x40023800
 8006900:	42470000 	.word	0x42470000
 8006904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006908:	4b88      	ldr	r3, [pc, #544]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 800690a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1ea      	bne.n	80068ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8097 	beq.w	8006a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006926:	4b81      	ldr	r3, [pc, #516]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10f      	bne.n	8006952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	4b7d      	ldr	r3, [pc, #500]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6413      	str	r3, [r2, #64]	@ 0x40
 8006942:	4b7a      	ldr	r3, [pc, #488]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006952:	4b77      	ldr	r3, [pc, #476]	@ (8006b30 <HAL_RCC_OscConfig+0x474>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d118      	bne.n	8006990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800695e:	4b74      	ldr	r3, [pc, #464]	@ (8006b30 <HAL_RCC_OscConfig+0x474>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a73      	ldr	r2, [pc, #460]	@ (8006b30 <HAL_RCC_OscConfig+0x474>)
 8006964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696a:	f7fd fa99 	bl	8003ea0 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006972:	f7fd fa95 	bl	8003ea0 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e10c      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006984:	4b6a      	ldr	r3, [pc, #424]	@ (8006b30 <HAL_RCC_OscConfig+0x474>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d106      	bne.n	80069a6 <HAL_RCC_OscConfig+0x2ea>
 8006998:	4b64      	ldr	r3, [pc, #400]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699c:	4a63      	ldr	r2, [pc, #396]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a4:	e01c      	b.n	80069e0 <HAL_RCC_OscConfig+0x324>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b05      	cmp	r3, #5
 80069ac:	d10c      	bne.n	80069c8 <HAL_RCC_OscConfig+0x30c>
 80069ae:	4b5f      	ldr	r3, [pc, #380]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b2:	4a5e      	ldr	r2, [pc, #376]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069b4:	f043 0304 	orr.w	r3, r3, #4
 80069b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ba:	4b5c      	ldr	r3, [pc, #368]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	4a5b      	ldr	r2, [pc, #364]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c6:	e00b      	b.n	80069e0 <HAL_RCC_OscConfig+0x324>
 80069c8:	4b58      	ldr	r3, [pc, #352]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069cc:	4a57      	ldr	r2, [pc, #348]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d4:	4b55      	ldr	r3, [pc, #340]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d8:	4a54      	ldr	r2, [pc, #336]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 80069da:	f023 0304 	bic.w	r3, r3, #4
 80069de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d015      	beq.n	8006a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fd fa5a 	bl	8003ea0 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f0:	f7fd fa56 	bl	8003ea0 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e0cb      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a06:	4b49      	ldr	r3, [pc, #292]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ee      	beq.n	80069f0 <HAL_RCC_OscConfig+0x334>
 8006a12:	e014      	b.n	8006a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a14:	f7fd fa44 	bl	8003ea0 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1c:	f7fd fa40 	bl	8003ea0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e0b5      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a32:	4b3e      	ldr	r3, [pc, #248]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1ee      	bne.n	8006a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d105      	bne.n	8006a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a44:	4b39      	ldr	r3, [pc, #228]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a48:	4a38      	ldr	r2, [pc, #224]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a1 	beq.w	8006b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a5a:	4b34      	ldr	r3, [pc, #208]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d05c      	beq.n	8006b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d141      	bne.n	8006af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6e:	4b31      	ldr	r3, [pc, #196]	@ (8006b34 <HAL_RCC_OscConfig+0x478>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fd fa14 	bl	8003ea0 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fd fa10 	bl	8003ea0 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e087      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a8e:	4b27      	ldr	r3, [pc, #156]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	019b      	lsls	r3, r3, #6
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	491b      	ldr	r1, [pc, #108]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b34 <HAL_RCC_OscConfig+0x478>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aca:	f7fd f9e9 	bl	8003ea0 <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad2:	f7fd f9e5 	bl	8003ea0 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e05c      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae4:	4b11      	ldr	r3, [pc, #68]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x416>
 8006af0:	e054      	b.n	8006b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <HAL_RCC_OscConfig+0x478>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af8:	f7fd f9d2 	bl	8003ea0 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fd f9ce 	bl	8003ea0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e045      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <HAL_RCC_OscConfig+0x470>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_RCC_OscConfig+0x444>
 8006b1e:	e03d      	b.n	8006b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e038      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	40007000 	.word	0x40007000
 8006b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba8 <HAL_RCC_OscConfig+0x4ec>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d028      	beq.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d121      	bne.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d11a      	bne.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b68:	4013      	ands	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d111      	bne.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	3b01      	subs	r3, #1
 8006b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d107      	bne.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40023800 	.word	0x40023800

08006bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0cc      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b68      	ldr	r3, [pc, #416]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d90c      	bls.n	8006be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b65      	ldr	r3, [pc, #404]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd6:	4b63      	ldr	r3, [pc, #396]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0b8      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c00:	4b59      	ldr	r3, [pc, #356]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4a58      	ldr	r2, [pc, #352]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c18:	4b53      	ldr	r3, [pc, #332]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4a52      	ldr	r2, [pc, #328]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c24:	4b50      	ldr	r3, [pc, #320]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	494d      	ldr	r1, [pc, #308]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d044      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	4b47      	ldr	r3, [pc, #284]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d119      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e07f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d003      	beq.n	8006c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d107      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e06f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e067      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c8a:	4b37      	ldr	r3, [pc, #220]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 0203 	bic.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4934      	ldr	r1, [pc, #208]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c9c:	f7fd f900 	bl	8003ea0 <HAL_GetTick>
 8006ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca4:	f7fd f8fc 	bl	8003ea0 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e04f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	4b2b      	ldr	r3, [pc, #172]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 020c 	and.w	r2, r3, #12
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d1eb      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b25      	ldr	r3, [pc, #148]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d20c      	bcs.n	8006cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b22      	ldr	r3, [pc, #136]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e032      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d00:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4916      	ldr	r1, [pc, #88]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1e:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	490e      	ldr	r1, [pc, #56]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d32:	f000 f821 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	490a      	ldr	r1, [pc, #40]	@ (8006d6c <HAL_RCC_ClockConfig+0x1c0>)
 8006d44:	5ccb      	ldrb	r3, [r1, r3]
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	4a09      	ldr	r2, [pc, #36]	@ (8006d70 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <HAL_RCC_ClockConfig+0x1c8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd f860 	bl	8003e18 <HAL_InitTick>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40023c00 	.word	0x40023c00
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	0800a770 	.word	0x0800a770
 8006d70:	20000000 	.word	0x20000000
 8006d74:	20000054 	.word	0x20000054

08006d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d7c:	b094      	sub	sp, #80	@ 0x50
 8006d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d90:	4b79      	ldr	r3, [pc, #484]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 030c 	and.w	r3, r3, #12
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d00d      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x40>
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	f200 80e1 	bhi.w	8006f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_RCC_GetSysClockFreq+0x34>
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d003      	beq.n	8006db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006daa:	e0db      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dac:	4b73      	ldr	r3, [pc, #460]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8006dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006db0:	e0db      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006db2:	4b73      	ldr	r3, [pc, #460]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8006db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006db6:	e0d8      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db8:	4b6f      	ldr	r3, [pc, #444]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d063      	beq.n	8006e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dce:	4b6a      	ldr	r3, [pc, #424]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	099b      	lsrs	r3, r3, #6
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006dea:	4622      	mov	r2, r4
 8006dec:	462b      	mov	r3, r5
 8006dee:	f04f 0000 	mov.w	r0, #0
 8006df2:	f04f 0100 	mov.w	r1, #0
 8006df6:	0159      	lsls	r1, r3, #5
 8006df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dfc:	0150      	lsls	r0, r2, #5
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4621      	mov	r1, r4
 8006e04:	1a51      	subs	r1, r2, r1
 8006e06:	6139      	str	r1, [r7, #16]
 8006e08:	4629      	mov	r1, r5
 8006e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	018b      	lsls	r3, r1, #6
 8006e20:	4651      	mov	r1, sl
 8006e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e26:	4651      	mov	r1, sl
 8006e28:	018a      	lsls	r2, r1, #6
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8006e30:	4659      	mov	r1, fp
 8006e32:	eb63 0901 	sbc.w	r9, r3, r1
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	eb18 0303 	adds.w	r3, r8, r3
 8006e54:	60bb      	str	r3, [r7, #8]
 8006e56:	462b      	mov	r3, r5
 8006e58:	eb49 0303 	adc.w	r3, r9, r3
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	024b      	lsls	r3, r1, #9
 8006e6e:	4621      	mov	r1, r4
 8006e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e74:	4621      	mov	r1, r4
 8006e76:	024a      	lsls	r2, r1, #9
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e7e:	2200      	movs	r2, #0
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e88:	f7f9 fa02 	bl	8000290 <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4613      	mov	r3, r2
 8006e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e94:	e058      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e96:	4b38      	ldr	r3, [pc, #224]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ea6:	623b      	str	r3, [r7, #32]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	f04f 0100 	mov.w	r1, #0
 8006ebc:	0159      	lsls	r1, r3, #5
 8006ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec2:	0150      	lsls	r0, r2, #5
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4641      	mov	r1, r8
 8006eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8006eec:	eb63 050b 	sbc.w	r5, r3, fp
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	00eb      	lsls	r3, r5, #3
 8006efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efe:	00e2      	lsls	r2, r4, #3
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	18e3      	adds	r3, r4, r3
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	eb45 0303 	adc.w	r3, r5, r3
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	f04f 0300 	mov.w	r3, #0
 8006f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f1e:	4629      	mov	r1, r5
 8006f20:	028b      	lsls	r3, r1, #10
 8006f22:	4621      	mov	r1, r4
 8006f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f28:	4621      	mov	r1, r4
 8006f2a:	028a      	lsls	r2, r1, #10
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f32:	2200      	movs	r2, #0
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	61fa      	str	r2, [r7, #28]
 8006f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3c:	f7f9 f9a8 	bl	8000290 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4613      	mov	r3, r2
 8006f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	3301      	adds	r3, #1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f62:	e002      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f64:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3750      	adds	r7, #80	@ 0x50
 8006f70:	46bd      	mov	sp, r7
 8006f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	00f42400 	.word	0x00f42400
 8006f80:	007a1200 	.word	0x007a1200

08006f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f88:	4b03      	ldr	r3, [pc, #12]	@ (8006f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000000 	.word	0x20000000

08006f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fa0:	f7ff fff0 	bl	8006f84 <HAL_RCC_GetHCLKFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	0a9b      	lsrs	r3, r3, #10
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	4903      	ldr	r1, [pc, #12]	@ (8006fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	0800a780 	.word	0x0800a780

08006fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fc8:	f7ff ffdc 	bl	8006f84 <HAL_RCC_GetHCLKFreq>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	4b05      	ldr	r3, [pc, #20]	@ (8006fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0b5b      	lsrs	r3, r3, #13
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	4903      	ldr	r1, [pc, #12]	@ (8006fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fda:	5ccb      	ldrb	r3, [r1, r3]
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	0800a780 	.word	0x0800a780

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d075      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fc ff3b 	bl	8003ea0 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fc ff37 	bl	8003ea0 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e189      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007040:	4b8a      	ldr	r3, [pc, #552]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	019a      	lsls	r2, r3, #6
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	071b      	lsls	r3, r3, #28
 8007064:	4981      	ldr	r1, [pc, #516]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007078:	4b7c      	ldr	r3, [pc, #496]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	019a      	lsls	r2, r3, #6
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	431a      	orrs	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	071b      	lsls	r3, r3, #28
 8007098:	4974      	ldr	r1, [pc, #464]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070a0:	4b72      	ldr	r3, [pc, #456]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a6:	f023 021f 	bic.w	r2, r3, #31
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	496e      	ldr	r1, [pc, #440]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	019a      	lsls	r2, r3, #6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	071b      	lsls	r3, r3, #28
 80070d8:	4964      	ldr	r1, [pc, #400]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070e0:	4b61      	ldr	r3, [pc, #388]	@ (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e6:	f7fc fedb 	bl	8003ea0 <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ec:	e008      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070ee:	f7fc fed7 	bl	8003ea0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e129      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007100:	4b5a      	ldr	r3, [pc, #360]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d079      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007124:	4b52      	ldr	r3, [pc, #328]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fc feb9 	bl	8003ea0 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007132:	f7fc feb5 	bl	8003ea0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e107      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007144:	4b49      	ldr	r3, [pc, #292]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007150:	d0ef      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d020      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800715e:	4b43      	ldr	r3, [pc, #268]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007164:	0f1b      	lsrs	r3, r3, #28
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	019a      	lsls	r2, r3, #6
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	431a      	orrs	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	071b      	lsls	r3, r3, #28
 800717e:	493b      	ldr	r1, [pc, #236]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007186:	4b39      	ldr	r3, [pc, #228]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800718c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	3b01      	subs	r3, #1
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4934      	ldr	r1, [pc, #208]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ac:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b2:	0e1b      	lsrs	r3, r3, #24
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	019a      	lsls	r2, r3, #6
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	071b      	lsls	r3, r3, #28
 80071cc:	4927      	ldr	r1, [pc, #156]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071d4:	4b25      	ldr	r3, [pc, #148]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	4922      	ldr	r1, [pc, #136]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071ea:	4b21      	ldr	r3, [pc, #132]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f0:	f7fc fe56 	bl	8003ea0 <HAL_GetTick>
 80071f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071f8:	f7fc fe52 	bl	8003ea0 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0a4      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800720a:	4b18      	ldr	r3, [pc, #96]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007216:	d1ef      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 808b 	beq.w	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	4b10      	ldr	r3, [pc, #64]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	4a0f      	ldr	r2, [pc, #60]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	@ 0x40
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a0b      	ldr	r2, [pc, #44]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800724c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800724e:	f7fc fe27 	bl	8003ea0 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007254:	e010      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fc fe23 	bl	8003ea0 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d909      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e075      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007268:	42470068 	.word	0x42470068
 800726c:	40023800 	.word	0x40023800
 8007270:	42470070 	.word	0x42470070
 8007274:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007278:	4b38      	ldr	r3, [pc, #224]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0e8      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007284:	4b36      	ldr	r3, [pc, #216]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d028      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ac:	4b2d      	ldr	r3, [pc, #180]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b8:	4a29      	ldr	r2, [pc, #164]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072be:	4b28      	ldr	r3, [pc, #160]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d114      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072ca:	f7fc fde9 	bl	8003ea0 <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fc fde5 	bl	8003ea0 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e035      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ee      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007300:	d10d      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007302:	4b17      	ldr	r3, [pc, #92]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007316:	4912      	ldr	r1, [pc, #72]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007318:	4313      	orrs	r3, r2
 800731a:	608b      	str	r3, [r1, #8]
 800731c:	e005      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800731e:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007324:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007328:	6093      	str	r3, [r2, #8]
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800732c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	490a      	ldr	r1, [pc, #40]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007338:	4313      	orrs	r3, r2
 800733a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007350:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40007000 	.word	0x40007000
 8007360:	40023800 	.word	0x40023800
 8007364:	42470e40 	.word	0x42470e40
 8007368:	424711e0 	.word	0x424711e0

0800736c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e025      	b.n	80073cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fb fa17 	bl	80027c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f001 f939 	bl	8008624 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	f001 f98e 	bl	80086de <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d101      	bne.n	80073f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
 80073f0:	e021      	b.n	8007436 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d002      	beq.n	80073fe <HAL_SDRAM_SendCommand+0x2a>
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d118      	bne.n	8007430 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f001 f9ce 	bl	80087b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d104      	bne.n	8007426 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2205      	movs	r2, #5
 8007420:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007424:	e006      	b.n	8007434 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800742e:	e001      	b.n	8007434 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d101      	bne.n	8007458 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
 8007456:	e016      	b.n	8007486 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10f      	bne.n	8007484 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f9d9 	bl	800882a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e07b      	b.n	8007598 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d108      	bne.n	80074ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074b0:	d009      	beq.n	80074c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	61da      	str	r2, [r3, #28]
 80074b8:	e005      	b.n	80074c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fa fff9 	bl	80024d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754a:	ea42 0103 	orr.w	r1, r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	0c1b      	lsrs	r3, r3, #16
 8007564:	f003 0104 	and.w	r1, r3, #4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	f003 0210 	and.w	r2, r3, #16
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69da      	ldr	r2, [r3, #28]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e01a      	b.n	80075e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa ffcc 	bl	8002568 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007600:	f7fc fc4e 	bl	8003ea0 <HAL_GetTick>
 8007604:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d001      	beq.n	800761a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007616:	2302      	movs	r3, #2
 8007618:	e12a      	b.n	8007870 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_Transmit+0x36>
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e122      	b.n	8007870 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_SPI_Transmit+0x48>
 8007634:	2302      	movs	r3, #2
 8007636:	e11b      	b.n	8007870 <HAL_SPI_Transmit+0x280>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2203      	movs	r2, #3
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007686:	d10f      	bne.n	80076a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d007      	beq.n	80076c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ce:	d152      	bne.n	8007776 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SPI_Transmit+0xee>
 80076d8:	8b7b      	ldrh	r3, [r7, #26]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d145      	bne.n	800776a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007702:	e032      	b.n	800776a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d112      	bne.n	8007738 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007716:	881a      	ldrh	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007736:	e018      	b.n	800776a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007738:	f7fc fbb2 	bl	8003ea0 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d803      	bhi.n	8007750 <HAL_SPI_Transmit+0x160>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d102      	bne.n	8007756 <HAL_SPI_Transmit+0x166>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e082      	b.n	8007870 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1c7      	bne.n	8007704 <HAL_SPI_Transmit+0x114>
 8007774:	e053      	b.n	800781e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Transmit+0x194>
 800777e:	8b7b      	ldrh	r3, [r7, #26]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d147      	bne.n	8007814 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077aa:	e033      	b.n	8007814 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d113      	bne.n	80077e2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077e0:	e018      	b.n	8007814 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e2:	f7fc fb5d 	bl	8003ea0 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d803      	bhi.n	80077fa <HAL_SPI_Transmit+0x20a>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d102      	bne.n	8007800 <HAL_SPI_Transmit+0x210>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e02d      	b.n	8007870 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1c6      	bne.n	80077ac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fbe6 	bl	8007ff4 <SPI_EndRxTxTransaction>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800786e:	2300      	movs	r3, #0
  }
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	d001      	beq.n	8007898 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
 8007896:	e104      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078a0:	d112      	bne.n	80078c8 <HAL_SPI_Receive+0x50>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10e      	bne.n	80078c8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2204      	movs	r2, #4
 80078ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f8f3 	bl	8007aaa <HAL_SPI_TransmitReceive>
 80078c4:	4603      	mov	r3, r0
 80078c6:	e0ec      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c8:	f7fc faea 	bl	8003ea0 <HAL_GetTick>
 80078cc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_SPI_Receive+0x62>
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0e1      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_SPI_Receive+0x74>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e0da      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2204      	movs	r2, #4
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	88fa      	ldrh	r2, [r7, #6]
 8007912:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800793a:	d10f      	bne.n	800795c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800794a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800795a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d007      	beq.n	800797a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d170      	bne.n	8007a64 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007982:	e035      	b.n	80079f0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d115      	bne.n	80079be <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f103 020c 	add.w	r2, r3, #12
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079bc:	e018      	b.n	80079f0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079be:	f7fc fa6f 	bl	8003ea0 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d803      	bhi.n	80079d6 <HAL_SPI_Receive+0x15e>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d102      	bne.n	80079dc <HAL_SPI_Receive+0x164>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e058      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1c4      	bne.n	8007984 <HAL_SPI_Receive+0x10c>
 80079fa:	e038      	b.n	8007a6e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d113      	bne.n	8007a32 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	b292      	uxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	1c9a      	adds	r2, r3, #2
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a30:	e018      	b.n	8007a64 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a32:	f7fc fa35 	bl	8003ea0 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d803      	bhi.n	8007a4a <HAL_SPI_Receive+0x1d2>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d102      	bne.n	8007a50 <HAL_SPI_Receive+0x1d8>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e01e      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1c6      	bne.n	80079fc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fa58 	bl	8007f28 <SPI_EndRxTransaction>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08a      	sub	sp, #40	@ 0x28
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007abc:	f7fc f9f0 	bl	8003ea0 <HAL_GetTick>
 8007ac0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ac8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ad4:	7ffb      	ldrb	r3, [r7, #31]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d00c      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x4a>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae0:	d106      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x46>
 8007aea:	7ffb      	ldrb	r3, [r7, #31]
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d001      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
 8007af2:	e17f      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x5c>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x5c>
 8007b00:	887b      	ldrh	r3, [r7, #2]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e174      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x6e>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e16d      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d003      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2205      	movs	r2, #5
 8007b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	887a      	ldrh	r2, [r7, #2]
 8007b44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	887a      	ldrh	r2, [r7, #2]
 8007b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	887a      	ldrh	r2, [r7, #2]
 8007b56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	887a      	ldrh	r2, [r7, #2]
 8007b5c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	d007      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b90:	d17e      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0xf6>
 8007b9a:	8afb      	ldrh	r3, [r7, #22]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d16c      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc4:	e059      	b.n	8007c7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d11b      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x162>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <HAL_SPI_TransmitReceive+0x162>
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d113      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf4:	1c9a      	adds	r2, r3, #2
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d119      	bne.n	8007c4e <HAL_SPI_TransmitReceive+0x1a4>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d014      	beq.n	8007c4e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c4e:	f7fc f927 	bl	8003ea0 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d80d      	bhi.n	8007c7a <HAL_SPI_TransmitReceive+0x1d0>
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c64:	d009      	beq.n	8007c7a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e0bc      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1a0      	bne.n	8007bc6 <HAL_SPI_TransmitReceive+0x11c>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d19b      	bne.n	8007bc6 <HAL_SPI_TransmitReceive+0x11c>
 8007c8e:	e082      	b.n	8007d96 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x1f4>
 8007c98:	8afb      	ldrh	r3, [r7, #22]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d171      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc4:	e05d      	b.n	8007d82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d11c      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x264>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d017      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x264>
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d114      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	330c      	adds	r3, #12
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d119      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x2a6>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d014      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d50:	f7fc f8a6 	bl	8003ea0 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d803      	bhi.n	8007d68 <HAL_SPI_TransmitReceive+0x2be>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d102      	bne.n	8007d6e <HAL_SPI_TransmitReceive+0x2c4>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e038      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d19c      	bne.n	8007cc6 <HAL_SPI_TransmitReceive+0x21c>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d197      	bne.n	8007cc6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d96:	6a3a      	ldr	r2, [r7, #32]
 8007d98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f92a 	bl	8007ff4 <SPI_EndRxTxTransaction>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2220      	movs	r2, #32
 8007daa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e01d      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3728      	adds	r7, #40	@ 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e0a:	b2db      	uxtb	r3, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e28:	f7fc f83a 	bl	8003ea0 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e38:	f7fc f832 	bl	8003ea0 <HAL_GetTick>
 8007e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e3e:	4b39      	ldr	r3, [pc, #228]	@ (8007f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	015b      	lsls	r3, r3, #5
 8007e44:	0d1b      	lsrs	r3, r3, #20
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	fb02 f303 	mul.w	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e4e:	e054      	b.n	8007efa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d050      	beq.n	8007efa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e58:	f7fc f822 	bl	8003ea0 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d902      	bls.n	8007e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d13d      	bne.n	8007eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e86:	d111      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e90:	d004      	beq.n	8007e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9a:	d107      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d10f      	bne.n	8007ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e017      	b.n	8007f1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4013      	ands	r3, r2
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d19b      	bne.n	8007e50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000000 	.word	0x20000000

08007f28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f3c:	d111      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f46:	d004      	beq.n	8007f52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f50:	d107      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f6a:	d12a      	bne.n	8007fc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f74:	d012      	beq.n	8007f9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2180      	movs	r1, #128	@ 0x80
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff ff49 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02d      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f90:	f043 0220 	orr.w	r2, r3, #32
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e026      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff ff36 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01a      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e013      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2101      	movs	r1, #1
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff23 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e000      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2201      	movs	r2, #1
 8008008:	2102      	movs	r1, #2
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f7ff ff04 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	f043 0220 	orr.w	r2, r3, #32
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e032      	b.n	800808c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008026:	4b1b      	ldr	r3, [pc, #108]	@ (8008094 <SPI_EndRxTxTransaction+0xa0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1b      	ldr	r2, [pc, #108]	@ (8008098 <SPI_EndRxTxTransaction+0xa4>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	0d5b      	lsrs	r3, r3, #21
 8008032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008044:	d112      	bne.n	800806c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	@ 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fee1 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d016      	beq.n	800808a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e00f      	b.n	800808c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3b01      	subs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	2b80      	cmp	r3, #128	@ 0x80
 8008084:	d0f2      	beq.n	800806c <SPI_EndRxTxTransaction+0x78>
 8008086:	e000      	b.n	800808a <SPI_EndRxTxTransaction+0x96>
        break;
 8008088:	bf00      	nop
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000000 	.word	0x20000000
 8008098:	165e9f81 	.word	0x165e9f81

0800809c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e042      	b.n	8008134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fa fa6e 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	@ 0x24
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f82b 	bl	800813c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695a      	ldr	r2, [r3, #20]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800813c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008140:	b0c0      	sub	sp, #256	@ 0x100
 8008142:	af00      	add	r7, sp, #0
 8008144:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008158:	68d9      	ldr	r1, [r3, #12]
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	ea40 0301 	orr.w	r3, r0, r1
 8008164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	431a      	orrs	r2, r3
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	431a      	orrs	r2, r3
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008194:	f021 010c 	bic.w	r1, r1, #12
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081a2:	430b      	orrs	r3, r1
 80081a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b6:	6999      	ldr	r1, [r3, #24]
 80081b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	ea40 0301 	orr.w	r3, r0, r1
 80081c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b8f      	ldr	r3, [pc, #572]	@ (8008408 <UART_SetConfig+0x2cc>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d005      	beq.n	80081dc <UART_SetConfig+0xa0>
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4b8d      	ldr	r3, [pc, #564]	@ (800840c <UART_SetConfig+0x2d0>)
 80081d8:	429a      	cmp	r2, r3
 80081da:	d104      	bne.n	80081e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081dc:	f7fe fef2 	bl	8006fc4 <HAL_RCC_GetPCLK2Freq>
 80081e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081e4:	e003      	b.n	80081ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fe fed9 	bl	8006f9c <HAL_RCC_GetPCLK1Freq>
 80081ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081f8:	f040 810c 	bne.w	8008414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008200:	2200      	movs	r2, #0
 8008202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008206:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800820a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	1891      	adds	r1, r2, r2
 8008214:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008216:	415b      	adcs	r3, r3
 8008218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800821a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800821e:	4621      	mov	r1, r4
 8008220:	eb12 0801 	adds.w	r8, r2, r1
 8008224:	4629      	mov	r1, r5
 8008226:	eb43 0901 	adc.w	r9, r3, r1
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800823a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800823e:	4690      	mov	r8, r2
 8008240:	4699      	mov	r9, r3
 8008242:	4623      	mov	r3, r4
 8008244:	eb18 0303 	adds.w	r3, r8, r3
 8008248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800824c:	462b      	mov	r3, r5
 800824e:	eb49 0303 	adc.w	r3, r9, r3
 8008252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008262:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800826a:	460b      	mov	r3, r1
 800826c:	18db      	adds	r3, r3, r3
 800826e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008270:	4613      	mov	r3, r2
 8008272:	eb42 0303 	adc.w	r3, r2, r3
 8008276:	657b      	str	r3, [r7, #84]	@ 0x54
 8008278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800827c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008280:	f7f8 f806 	bl	8000290 <__aeabi_uldivmod>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4b61      	ldr	r3, [pc, #388]	@ (8008410 <UART_SetConfig+0x2d4>)
 800828a:	fba3 2302 	umull	r2, r3, r3, r2
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	011c      	lsls	r4, r3, #4
 8008292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008296:	2200      	movs	r2, #0
 8008298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800829c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80082a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	1891      	adds	r1, r2, r2
 80082aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80082ac:	415b      	adcs	r3, r3
 80082ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80082b4:	4641      	mov	r1, r8
 80082b6:	eb12 0a01 	adds.w	sl, r2, r1
 80082ba:	4649      	mov	r1, r9
 80082bc:	eb43 0b01 	adc.w	fp, r3, r1
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082d4:	4692      	mov	sl, r2
 80082d6:	469b      	mov	fp, r3
 80082d8:	4643      	mov	r3, r8
 80082da:	eb1a 0303 	adds.w	r3, sl, r3
 80082de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082e2:	464b      	mov	r3, r9
 80082e4:	eb4b 0303 	adc.w	r3, fp, r3
 80082e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008300:	460b      	mov	r3, r1
 8008302:	18db      	adds	r3, r3, r3
 8008304:	643b      	str	r3, [r7, #64]	@ 0x40
 8008306:	4613      	mov	r3, r2
 8008308:	eb42 0303 	adc.w	r3, r2, r3
 800830c:	647b      	str	r3, [r7, #68]	@ 0x44
 800830e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008316:	f7f7 ffbb 	bl	8000290 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4611      	mov	r1, r2
 8008320:	4b3b      	ldr	r3, [pc, #236]	@ (8008410 <UART_SetConfig+0x2d4>)
 8008322:	fba3 2301 	umull	r2, r3, r3, r1
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2264      	movs	r2, #100	@ 0x64
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	1acb      	subs	r3, r1, r3
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008336:	4b36      	ldr	r3, [pc, #216]	@ (8008410 <UART_SetConfig+0x2d4>)
 8008338:	fba3 2302 	umull	r2, r3, r3, r2
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008344:	441c      	add	r4, r3
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008350:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008358:	4642      	mov	r2, r8
 800835a:	464b      	mov	r3, r9
 800835c:	1891      	adds	r1, r2, r2
 800835e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008360:	415b      	adcs	r3, r3
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008368:	4641      	mov	r1, r8
 800836a:	1851      	adds	r1, r2, r1
 800836c:	6339      	str	r1, [r7, #48]	@ 0x30
 800836e:	4649      	mov	r1, r9
 8008370:	414b      	adcs	r3, r1
 8008372:	637b      	str	r3, [r7, #52]	@ 0x34
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008380:	4659      	mov	r1, fp
 8008382:	00cb      	lsls	r3, r1, #3
 8008384:	4651      	mov	r1, sl
 8008386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800838a:	4651      	mov	r1, sl
 800838c:	00ca      	lsls	r2, r1, #3
 800838e:	4610      	mov	r0, r2
 8008390:	4619      	mov	r1, r3
 8008392:	4603      	mov	r3, r0
 8008394:	4642      	mov	r2, r8
 8008396:	189b      	adds	r3, r3, r2
 8008398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800839c:	464b      	mov	r3, r9
 800839e:	460a      	mov	r2, r1
 80083a0:	eb42 0303 	adc.w	r3, r2, r3
 80083a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80083b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083bc:	460b      	mov	r3, r1
 80083be:	18db      	adds	r3, r3, r3
 80083c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083c2:	4613      	mov	r3, r2
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083d2:	f7f7 ff5d 	bl	8000290 <__aeabi_uldivmod>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4b0d      	ldr	r3, [pc, #52]	@ (8008410 <UART_SetConfig+0x2d4>)
 80083dc:	fba3 1302 	umull	r1, r3, r3, r2
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	2164      	movs	r1, #100	@ 0x64
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	3332      	adds	r3, #50	@ 0x32
 80083ee:	4a08      	ldr	r2, [pc, #32]	@ (8008410 <UART_SetConfig+0x2d4>)
 80083f0:	fba2 2303 	umull	r2, r3, r2, r3
 80083f4:	095b      	lsrs	r3, r3, #5
 80083f6:	f003 0207 	and.w	r2, r3, #7
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4422      	add	r2, r4
 8008402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008404:	e106      	b.n	8008614 <UART_SetConfig+0x4d8>
 8008406:	bf00      	nop
 8008408:	40011000 	.word	0x40011000
 800840c:	40011400 	.word	0x40011400
 8008410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008418:	2200      	movs	r2, #0
 800841a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800841e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008426:	4642      	mov	r2, r8
 8008428:	464b      	mov	r3, r9
 800842a:	1891      	adds	r1, r2, r2
 800842c:	6239      	str	r1, [r7, #32]
 800842e:	415b      	adcs	r3, r3
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
 8008432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008436:	4641      	mov	r1, r8
 8008438:	1854      	adds	r4, r2, r1
 800843a:	4649      	mov	r1, r9
 800843c:	eb43 0501 	adc.w	r5, r3, r1
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	00eb      	lsls	r3, r5, #3
 800844a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800844e:	00e2      	lsls	r2, r4, #3
 8008450:	4614      	mov	r4, r2
 8008452:	461d      	mov	r5, r3
 8008454:	4643      	mov	r3, r8
 8008456:	18e3      	adds	r3, r4, r3
 8008458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800845c:	464b      	mov	r3, r9
 800845e:	eb45 0303 	adc.w	r3, r5, r3
 8008462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008482:	4629      	mov	r1, r5
 8008484:	008b      	lsls	r3, r1, #2
 8008486:	4621      	mov	r1, r4
 8008488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800848c:	4621      	mov	r1, r4
 800848e:	008a      	lsls	r2, r1, #2
 8008490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008494:	f7f7 fefc 	bl	8000290 <__aeabi_uldivmod>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4b60      	ldr	r3, [pc, #384]	@ (8008620 <UART_SetConfig+0x4e4>)
 800849e:	fba3 2302 	umull	r2, r3, r3, r2
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	011c      	lsls	r4, r3, #4
 80084a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80084b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	1891      	adds	r1, r2, r2
 80084be:	61b9      	str	r1, [r7, #24]
 80084c0:	415b      	adcs	r3, r3
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c8:	4641      	mov	r1, r8
 80084ca:	1851      	adds	r1, r2, r1
 80084cc:	6139      	str	r1, [r7, #16]
 80084ce:	4649      	mov	r1, r9
 80084d0:	414b      	adcs	r3, r1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084e0:	4659      	mov	r1, fp
 80084e2:	00cb      	lsls	r3, r1, #3
 80084e4:	4651      	mov	r1, sl
 80084e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ea:	4651      	mov	r1, sl
 80084ec:	00ca      	lsls	r2, r1, #3
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	4642      	mov	r2, r8
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084fc:	464b      	mov	r3, r9
 80084fe:	460a      	mov	r2, r1
 8008500:	eb42 0303 	adc.w	r3, r2, r3
 8008504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008512:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008520:	4649      	mov	r1, r9
 8008522:	008b      	lsls	r3, r1, #2
 8008524:	4641      	mov	r1, r8
 8008526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800852a:	4641      	mov	r1, r8
 800852c:	008a      	lsls	r2, r1, #2
 800852e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008532:	f7f7 fead 	bl	8000290 <__aeabi_uldivmod>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4611      	mov	r1, r2
 800853c:	4b38      	ldr	r3, [pc, #224]	@ (8008620 <UART_SetConfig+0x4e4>)
 800853e:	fba3 2301 	umull	r2, r3, r3, r1
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	2264      	movs	r2, #100	@ 0x64
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	1acb      	subs	r3, r1, r3
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	3332      	adds	r3, #50	@ 0x32
 8008550:	4a33      	ldr	r2, [pc, #204]	@ (8008620 <UART_SetConfig+0x4e4>)
 8008552:	fba2 2303 	umull	r2, r3, r2, r3
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800855c:	441c      	add	r4, r3
 800855e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008562:	2200      	movs	r2, #0
 8008564:	673b      	str	r3, [r7, #112]	@ 0x70
 8008566:	677a      	str	r2, [r7, #116]	@ 0x74
 8008568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	1891      	adds	r1, r2, r2
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	415b      	adcs	r3, r3
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800857c:	4641      	mov	r1, r8
 800857e:	1851      	adds	r1, r2, r1
 8008580:	6039      	str	r1, [r7, #0]
 8008582:	4649      	mov	r1, r9
 8008584:	414b      	adcs	r3, r1
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008594:	4659      	mov	r1, fp
 8008596:	00cb      	lsls	r3, r1, #3
 8008598:	4651      	mov	r1, sl
 800859a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859e:	4651      	mov	r1, sl
 80085a0:	00ca      	lsls	r2, r1, #3
 80085a2:	4610      	mov	r0, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	4642      	mov	r2, r8
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ae:	464b      	mov	r3, r9
 80085b0:	460a      	mov	r2, r1
 80085b2:	eb42 0303 	adc.w	r3, r2, r3
 80085b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085d0:	4649      	mov	r1, r9
 80085d2:	008b      	lsls	r3, r1, #2
 80085d4:	4641      	mov	r1, r8
 80085d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085da:	4641      	mov	r1, r8
 80085dc:	008a      	lsls	r2, r1, #2
 80085de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085e2:	f7f7 fe55 	bl	8000290 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <UART_SetConfig+0x4e4>)
 80085ec:	fba3 1302 	umull	r1, r3, r3, r2
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	2164      	movs	r1, #100	@ 0x64
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	3332      	adds	r3, #50	@ 0x32
 80085fe:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <UART_SetConfig+0x4e4>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f003 020f 	and.w	r2, r3, #15
 800860a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4422      	add	r2, r4
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800861a:	46bd      	mov	sp, r7
 800861c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008620:	51eb851f 	.word	0x51eb851f

08008624 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d123      	bne.n	800867e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800863e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	6851      	ldr	r1, [r2, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6892      	ldr	r2, [r2, #8]
 800864a:	4311      	orrs	r1, r2
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	68d2      	ldr	r2, [r2, #12]
 8008650:	4311      	orrs	r1, r2
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	6912      	ldr	r2, [r2, #16]
 8008656:	4311      	orrs	r1, r2
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	6952      	ldr	r2, [r2, #20]
 800865c:	4311      	orrs	r1, r2
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	6992      	ldr	r2, [r2, #24]
 8008662:	4311      	orrs	r1, r2
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	69d2      	ldr	r2, [r2, #28]
 8008668:	4311      	orrs	r1, r2
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	6a12      	ldr	r2, [r2, #32]
 800866e:	4311      	orrs	r1, r2
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008674:	430a      	orrs	r2, r1
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e028      	b.n	80086d0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	69d9      	ldr	r1, [r3, #28]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	4319      	orrs	r1, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	430b      	orrs	r3, r1
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80086a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	6851      	ldr	r1, [r2, #4]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	6892      	ldr	r2, [r2, #8]
 80086b0:	4311      	orrs	r1, r2
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	68d2      	ldr	r2, [r2, #12]
 80086b6:	4311      	orrs	r1, r2
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	6912      	ldr	r2, [r2, #16]
 80086bc:	4311      	orrs	r1, r2
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	6952      	ldr	r2, [r2, #20]
 80086c2:	4311      	orrs	r1, r2
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	6992      	ldr	r2, [r2, #24]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d128      	bne.n	8008742 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	1e59      	subs	r1, r3, #1
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	3b01      	subs	r3, #1
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	4319      	orrs	r1, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	3b01      	subs	r3, #1
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	4319      	orrs	r1, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	3b01      	subs	r3, #1
 8008718:	031b      	lsls	r3, r3, #12
 800871a:	4319      	orrs	r1, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	3b01      	subs	r3, #1
 8008722:	041b      	lsls	r3, r3, #16
 8008724:	4319      	orrs	r1, r3
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	3b01      	subs	r3, #1
 800872c:	051b      	lsls	r3, r3, #20
 800872e:	4319      	orrs	r1, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	3b01      	subs	r3, #1
 8008736:	061b      	lsls	r3, r3, #24
 8008738:	430b      	orrs	r3, r1
 800873a:	431a      	orrs	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	609a      	str	r2, [r3, #8]
 8008740:	e02f      	b.n	80087a2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800874a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	68d2      	ldr	r2, [r2, #12]
 8008752:	3a01      	subs	r2, #1
 8008754:	0311      	lsls	r1, r2, #12
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	6952      	ldr	r2, [r2, #20]
 800875a:	3a01      	subs	r2, #1
 800875c:	0512      	lsls	r2, r2, #20
 800875e:	430a      	orrs	r2, r1
 8008760:	431a      	orrs	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	1e59      	subs	r1, r3, #1
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	3b01      	subs	r3, #1
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	4319      	orrs	r1, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	3b01      	subs	r3, #1
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	4319      	orrs	r1, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	3b01      	subs	r3, #1
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	4319      	orrs	r1, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	3b01      	subs	r3, #1
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	430b      	orrs	r3, r1
 800879c:	431a      	orrs	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	0d9b      	lsrs	r3, r3, #22
 80087c6:	059b      	lsls	r3, r3, #22
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	6811      	ldr	r1, [r2, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	6852      	ldr	r2, [r2, #4]
 80087d0:	4311      	orrs	r1, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	6892      	ldr	r2, [r2, #8]
 80087d6:	3a01      	subs	r2, #1
 80087d8:	0152      	lsls	r2, r2, #5
 80087da:	4311      	orrs	r1, r2
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	68d2      	ldr	r2, [r2, #12]
 80087e0:	0252      	lsls	r2, r2, #9
 80087e2:	430a      	orrs	r2, r1
 80087e4:	431a      	orrs	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80087ea:	f7fb fb59 	bl	8003ea0 <HAL_GetTick>
 80087ee:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80087f0:	e010      	b.n	8008814 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d00c      	beq.n	8008814 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <FMC_SDRAM_SendCommand+0x60>
 8008800:	f7fb fb4e 	bl	8003ea0 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d201      	bcs.n	8008814 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e006      	b.n	8008822 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b20      	cmp	r3, #32
 800881e:	d0e8      	beq.n	80087f2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800883c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	0052      	lsls	r2, r2, #1
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <malloc>:
 8008858:	4b02      	ldr	r3, [pc, #8]	@ (8008864 <malloc+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f000 b82d 	b.w	80088bc <_malloc_r>
 8008862:	bf00      	nop
 8008864:	20000068 	.word	0x20000068

08008868 <free>:
 8008868:	4b02      	ldr	r3, [pc, #8]	@ (8008874 <free+0xc>)
 800886a:	4601      	mov	r1, r0
 800886c:	6818      	ldr	r0, [r3, #0]
 800886e:	f000 bb69 	b.w	8008f44 <_free_r>
 8008872:	bf00      	nop
 8008874:	20000068 	.word	0x20000068

08008878 <sbrk_aligned>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	4e0f      	ldr	r6, [pc, #60]	@ (80088b8 <sbrk_aligned+0x40>)
 800887c:	460c      	mov	r4, r1
 800887e:	6831      	ldr	r1, [r6, #0]
 8008880:	4605      	mov	r5, r0
 8008882:	b911      	cbnz	r1, 800888a <sbrk_aligned+0x12>
 8008884:	f000 fb0e 	bl	8008ea4 <_sbrk_r>
 8008888:	6030      	str	r0, [r6, #0]
 800888a:	4621      	mov	r1, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f000 fb09 	bl	8008ea4 <_sbrk_r>
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	d103      	bne.n	800889e <sbrk_aligned+0x26>
 8008896:	f04f 34ff 	mov.w	r4, #4294967295
 800889a:	4620      	mov	r0, r4
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	1cc4      	adds	r4, r0, #3
 80088a0:	f024 0403 	bic.w	r4, r4, #3
 80088a4:	42a0      	cmp	r0, r4
 80088a6:	d0f8      	beq.n	800889a <sbrk_aligned+0x22>
 80088a8:	1a21      	subs	r1, r4, r0
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 fafa 	bl	8008ea4 <_sbrk_r>
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1f2      	bne.n	800889a <sbrk_aligned+0x22>
 80088b4:	e7ef      	b.n	8008896 <sbrk_aligned+0x1e>
 80088b6:	bf00      	nop
 80088b8:	200016cc 	.word	0x200016cc

080088bc <_malloc_r>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	1ccd      	adds	r5, r1, #3
 80088c2:	f025 0503 	bic.w	r5, r5, #3
 80088c6:	3508      	adds	r5, #8
 80088c8:	2d0c      	cmp	r5, #12
 80088ca:	bf38      	it	cc
 80088cc:	250c      	movcc	r5, #12
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	4606      	mov	r6, r0
 80088d2:	db01      	blt.n	80088d8 <_malloc_r+0x1c>
 80088d4:	42a9      	cmp	r1, r5
 80088d6:	d904      	bls.n	80088e2 <_malloc_r+0x26>
 80088d8:	230c      	movs	r3, #12
 80088da:	6033      	str	r3, [r6, #0]
 80088dc:	2000      	movs	r0, #0
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089b8 <_malloc_r+0xfc>
 80088e6:	f000 f869 	bl	80089bc <__malloc_lock>
 80088ea:	f8d8 3000 	ldr.w	r3, [r8]
 80088ee:	461c      	mov	r4, r3
 80088f0:	bb44      	cbnz	r4, 8008944 <_malloc_r+0x88>
 80088f2:	4629      	mov	r1, r5
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff ffbf 	bl	8008878 <sbrk_aligned>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	4604      	mov	r4, r0
 80088fe:	d158      	bne.n	80089b2 <_malloc_r+0xf6>
 8008900:	f8d8 4000 	ldr.w	r4, [r8]
 8008904:	4627      	mov	r7, r4
 8008906:	2f00      	cmp	r7, #0
 8008908:	d143      	bne.n	8008992 <_malloc_r+0xd6>
 800890a:	2c00      	cmp	r4, #0
 800890c:	d04b      	beq.n	80089a6 <_malloc_r+0xea>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	4639      	mov	r1, r7
 8008912:	4630      	mov	r0, r6
 8008914:	eb04 0903 	add.w	r9, r4, r3
 8008918:	f000 fac4 	bl	8008ea4 <_sbrk_r>
 800891c:	4581      	cmp	r9, r0
 800891e:	d142      	bne.n	80089a6 <_malloc_r+0xea>
 8008920:	6821      	ldr	r1, [r4, #0]
 8008922:	1a6d      	subs	r5, r5, r1
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ffa6 	bl	8008878 <sbrk_aligned>
 800892c:	3001      	adds	r0, #1
 800892e:	d03a      	beq.n	80089a6 <_malloc_r+0xea>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	442b      	add	r3, r5
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	f8d8 3000 	ldr.w	r3, [r8]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	bb62      	cbnz	r2, 8008998 <_malloc_r+0xdc>
 800893e:	f8c8 7000 	str.w	r7, [r8]
 8008942:	e00f      	b.n	8008964 <_malloc_r+0xa8>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	1b52      	subs	r2, r2, r5
 8008948:	d420      	bmi.n	800898c <_malloc_r+0xd0>
 800894a:	2a0b      	cmp	r2, #11
 800894c:	d917      	bls.n	800897e <_malloc_r+0xc2>
 800894e:	1961      	adds	r1, r4, r5
 8008950:	42a3      	cmp	r3, r4
 8008952:	6025      	str	r5, [r4, #0]
 8008954:	bf18      	it	ne
 8008956:	6059      	strne	r1, [r3, #4]
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	bf08      	it	eq
 800895c:	f8c8 1000 	streq.w	r1, [r8]
 8008960:	5162      	str	r2, [r4, r5]
 8008962:	604b      	str	r3, [r1, #4]
 8008964:	4630      	mov	r0, r6
 8008966:	f000 f82f 	bl	80089c8 <__malloc_unlock>
 800896a:	f104 000b 	add.w	r0, r4, #11
 800896e:	1d23      	adds	r3, r4, #4
 8008970:	f020 0007 	bic.w	r0, r0, #7
 8008974:	1ac2      	subs	r2, r0, r3
 8008976:	bf1c      	itt	ne
 8008978:	1a1b      	subne	r3, r3, r0
 800897a:	50a3      	strne	r3, [r4, r2]
 800897c:	e7af      	b.n	80088de <_malloc_r+0x22>
 800897e:	6862      	ldr	r2, [r4, #4]
 8008980:	42a3      	cmp	r3, r4
 8008982:	bf0c      	ite	eq
 8008984:	f8c8 2000 	streq.w	r2, [r8]
 8008988:	605a      	strne	r2, [r3, #4]
 800898a:	e7eb      	b.n	8008964 <_malloc_r+0xa8>
 800898c:	4623      	mov	r3, r4
 800898e:	6864      	ldr	r4, [r4, #4]
 8008990:	e7ae      	b.n	80088f0 <_malloc_r+0x34>
 8008992:	463c      	mov	r4, r7
 8008994:	687f      	ldr	r7, [r7, #4]
 8008996:	e7b6      	b.n	8008906 <_malloc_r+0x4a>
 8008998:	461a      	mov	r2, r3
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	42a3      	cmp	r3, r4
 800899e:	d1fb      	bne.n	8008998 <_malloc_r+0xdc>
 80089a0:	2300      	movs	r3, #0
 80089a2:	6053      	str	r3, [r2, #4]
 80089a4:	e7de      	b.n	8008964 <_malloc_r+0xa8>
 80089a6:	230c      	movs	r3, #12
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f80c 	bl	80089c8 <__malloc_unlock>
 80089b0:	e794      	b.n	80088dc <_malloc_r+0x20>
 80089b2:	6005      	str	r5, [r0, #0]
 80089b4:	e7d6      	b.n	8008964 <_malloc_r+0xa8>
 80089b6:	bf00      	nop
 80089b8:	200016d0 	.word	0x200016d0

080089bc <__malloc_lock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__malloc_lock+0x8>)
 80089be:	f000 babe 	b.w	8008f3e <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	20001814 	.word	0x20001814

080089c8 <__malloc_unlock>:
 80089c8:	4801      	ldr	r0, [pc, #4]	@ (80089d0 <__malloc_unlock+0x8>)
 80089ca:	f000 bab9 	b.w	8008f40 <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	20001814 	.word	0x20001814

080089d4 <std>:
 80089d4:	2300      	movs	r3, #0
 80089d6:	b510      	push	{r4, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	e9c0 3300 	strd	r3, r3, [r0]
 80089de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089e2:	6083      	str	r3, [r0, #8]
 80089e4:	8181      	strh	r1, [r0, #12]
 80089e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80089e8:	81c2      	strh	r2, [r0, #14]
 80089ea:	6183      	str	r3, [r0, #24]
 80089ec:	4619      	mov	r1, r3
 80089ee:	2208      	movs	r2, #8
 80089f0:	305c      	adds	r0, #92	@ 0x5c
 80089f2:	f000 fa1b 	bl	8008e2c <memset>
 80089f6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <std+0x58>)
 80089f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80089fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <std+0x5c>)
 80089fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <std+0x60>)
 8008a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a02:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <std+0x64>)
 8008a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a06:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <std+0x68>)
 8008a08:	6224      	str	r4, [r4, #32]
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d006      	beq.n	8008a1c <std+0x48>
 8008a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a12:	4294      	cmp	r4, r2
 8008a14:	d002      	beq.n	8008a1c <std+0x48>
 8008a16:	33d0      	adds	r3, #208	@ 0xd0
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d105      	bne.n	8008a28 <std+0x54>
 8008a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a24:	f000 ba8a 	b.w	8008f3c <__retarget_lock_init_recursive>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08008c7d 	.word	0x08008c7d
 8008a30:	08008c9f 	.word	0x08008c9f
 8008a34:	08008cd7 	.word	0x08008cd7
 8008a38:	08008cfb 	.word	0x08008cfb
 8008a3c:	200016d4 	.word	0x200016d4

08008a40 <stdio_exit_handler>:
 8008a40:	4a02      	ldr	r2, [pc, #8]	@ (8008a4c <stdio_exit_handler+0xc>)
 8008a42:	4903      	ldr	r1, [pc, #12]	@ (8008a50 <stdio_exit_handler+0x10>)
 8008a44:	4803      	ldr	r0, [pc, #12]	@ (8008a54 <stdio_exit_handler+0x14>)
 8008a46:	f000 b869 	b.w	8008b1c <_fwalk_sglue>
 8008a4a:	bf00      	nop
 8008a4c:	2000005c 	.word	0x2000005c
 8008a50:	080096ad 	.word	0x080096ad
 8008a54:	2000006c 	.word	0x2000006c

08008a58 <cleanup_stdio>:
 8008a58:	6841      	ldr	r1, [r0, #4]
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <cleanup_stdio+0x34>)
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4604      	mov	r4, r0
 8008a62:	d001      	beq.n	8008a68 <cleanup_stdio+0x10>
 8008a64:	f000 fe22 	bl	80096ac <_fflush_r>
 8008a68:	68a1      	ldr	r1, [r4, #8]
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <cleanup_stdio+0x38>)
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <cleanup_stdio+0x1e>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fe1b 	bl	80096ac <_fflush_r>
 8008a76:	68e1      	ldr	r1, [r4, #12]
 8008a78:	4b06      	ldr	r3, [pc, #24]	@ (8008a94 <cleanup_stdio+0x3c>)
 8008a7a:	4299      	cmp	r1, r3
 8008a7c:	d004      	beq.n	8008a88 <cleanup_stdio+0x30>
 8008a7e:	4620      	mov	r0, r4
 8008a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a84:	f000 be12 	b.w	80096ac <_fflush_r>
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200016d4 	.word	0x200016d4
 8008a90:	2000173c 	.word	0x2000173c
 8008a94:	200017a4 	.word	0x200017a4

08008a98 <global_stdio_init.part.0>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac8 <global_stdio_init.part.0+0x30>)
 8008a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8008acc <global_stdio_init.part.0+0x34>)
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad0 <global_stdio_init.part.0+0x38>)
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2104      	movs	r1, #4
 8008aa8:	f7ff ff94 	bl	80089d4 <std>
 8008aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	2109      	movs	r1, #9
 8008ab4:	f7ff ff8e 	bl	80089d4 <std>
 8008ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008abc:	2202      	movs	r2, #2
 8008abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	f7ff bf86 	b.w	80089d4 <std>
 8008ac8:	2000180c 	.word	0x2000180c
 8008acc:	200016d4 	.word	0x200016d4
 8008ad0:	08008a41 	.word	0x08008a41

08008ad4 <__sfp_lock_acquire>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__sfp_lock_acquire+0x8>)
 8008ad6:	f000 ba32 	b.w	8008f3e <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20001815 	.word	0x20001815

08008ae0 <__sfp_lock_release>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__sfp_lock_release+0x8>)
 8008ae2:	f000 ba2d 	b.w	8008f40 <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20001815 	.word	0x20001815

08008aec <__sinit>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	4604      	mov	r4, r0
 8008af0:	f7ff fff0 	bl	8008ad4 <__sfp_lock_acquire>
 8008af4:	6a23      	ldr	r3, [r4, #32]
 8008af6:	b11b      	cbz	r3, 8008b00 <__sinit+0x14>
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f7ff bff0 	b.w	8008ae0 <__sfp_lock_release>
 8008b00:	4b04      	ldr	r3, [pc, #16]	@ (8008b14 <__sinit+0x28>)
 8008b02:	6223      	str	r3, [r4, #32]
 8008b04:	4b04      	ldr	r3, [pc, #16]	@ (8008b18 <__sinit+0x2c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1f5      	bne.n	8008af8 <__sinit+0xc>
 8008b0c:	f7ff ffc4 	bl	8008a98 <global_stdio_init.part.0>
 8008b10:	e7f2      	b.n	8008af8 <__sinit+0xc>
 8008b12:	bf00      	nop
 8008b14:	08008a59 	.word	0x08008a59
 8008b18:	2000180c 	.word	0x2000180c

08008b1c <_fwalk_sglue>:
 8008b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	4607      	mov	r7, r0
 8008b22:	4688      	mov	r8, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	2600      	movs	r6, #0
 8008b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b30:	d505      	bpl.n	8008b3e <_fwalk_sglue+0x22>
 8008b32:	6824      	ldr	r4, [r4, #0]
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	d1f7      	bne.n	8008b28 <_fwalk_sglue+0xc>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d907      	bls.n	8008b54 <_fwalk_sglue+0x38>
 8008b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	d003      	beq.n	8008b54 <_fwalk_sglue+0x38>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c0      	blx	r8
 8008b52:	4306      	orrs	r6, r0
 8008b54:	3568      	adds	r5, #104	@ 0x68
 8008b56:	e7e9      	b.n	8008b2c <_fwalk_sglue+0x10>

08008b58 <_puts_r>:
 8008b58:	6a03      	ldr	r3, [r0, #32]
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	6884      	ldr	r4, [r0, #8]
 8008b5e:	4605      	mov	r5, r0
 8008b60:	460e      	mov	r6, r1
 8008b62:	b90b      	cbnz	r3, 8008b68 <_puts_r+0x10>
 8008b64:	f7ff ffc2 	bl	8008aec <__sinit>
 8008b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6a:	07db      	lsls	r3, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_puts_r+0x22>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	0598      	lsls	r0, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_puts_r+0x22>
 8008b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b76:	f000 f9e2 	bl	8008f3e <__retarget_lock_acquire_recursive>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	0719      	lsls	r1, r3, #28
 8008b7e:	d502      	bpl.n	8008b86 <_puts_r+0x2e>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d135      	bne.n	8008bf2 <_puts_r+0x9a>
 8008b86:	4621      	mov	r1, r4
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 f8f9 	bl	8008d80 <__swsetup_r>
 8008b8e:	b380      	cbz	r0, 8008bf2 <_puts_r+0x9a>
 8008b90:	f04f 35ff 	mov.w	r5, #4294967295
 8008b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b96:	07da      	lsls	r2, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_puts_r+0x4e>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	059b      	lsls	r3, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_puts_r+0x4e>
 8008ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba2:	f000 f9cd 	bl	8008f40 <__retarget_lock_release_recursive>
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da04      	bge.n	8008bb8 <_puts_r+0x60>
 8008bae:	69a2      	ldr	r2, [r4, #24]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	dc17      	bgt.n	8008be4 <_puts_r+0x8c>
 8008bb4:	290a      	cmp	r1, #10
 8008bb6:	d015      	beq.n	8008be4 <_puts_r+0x8c>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	7019      	strb	r1, [r3, #0]
 8008bc0:	68a3      	ldr	r3, [r4, #8]
 8008bc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d1ed      	bne.n	8008baa <_puts_r+0x52>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da11      	bge.n	8008bf6 <_puts_r+0x9e>
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	210a      	movs	r1, #10
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f893 	bl	8008d02 <__swbuf_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d0d7      	beq.n	8008b90 <_puts_r+0x38>
 8008be0:	250a      	movs	r5, #10
 8008be2:	e7d7      	b.n	8008b94 <_puts_r+0x3c>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f88b 	bl	8008d02 <__swbuf_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1e7      	bne.n	8008bc0 <_puts_r+0x68>
 8008bf0:	e7ce      	b.n	8008b90 <_puts_r+0x38>
 8008bf2:	3e01      	subs	r6, #1
 8008bf4:	e7e4      	b.n	8008bc0 <_puts_r+0x68>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	6022      	str	r2, [r4, #0]
 8008bfc:	220a      	movs	r2, #10
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e7ee      	b.n	8008be0 <_puts_r+0x88>
	...

08008c04 <puts>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	@ (8008c10 <puts+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f7ff bfa5 	b.w	8008b58 <_puts_r>
 8008c0e:	bf00      	nop
 8008c10:	20000068 	.word	0x20000068

08008c14 <sniprintf>:
 8008c14:	b40c      	push	{r2, r3}
 8008c16:	b530      	push	{r4, r5, lr}
 8008c18:	4b17      	ldr	r3, [pc, #92]	@ (8008c78 <sniprintf+0x64>)
 8008c1a:	1e0c      	subs	r4, r1, #0
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	b09d      	sub	sp, #116	@ 0x74
 8008c20:	da08      	bge.n	8008c34 <sniprintf+0x20>
 8008c22:	238b      	movs	r3, #139	@ 0x8b
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	b01d      	add	sp, #116	@ 0x74
 8008c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c30:	b002      	add	sp, #8
 8008c32:	4770      	bx	lr
 8008c34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c3c:	bf14      	ite	ne
 8008c3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c42:	4623      	moveq	r3, r4
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c4c:	9002      	str	r0, [sp, #8]
 8008c4e:	9006      	str	r0, [sp, #24]
 8008c50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c56:	ab21      	add	r3, sp, #132	@ 0x84
 8008c58:	a902      	add	r1, sp, #8
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	f000 fa17 	bl	8009090 <_svfiprintf_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	bfbc      	itt	lt
 8008c66:	238b      	movlt	r3, #139	@ 0x8b
 8008c68:	602b      	strlt	r3, [r5, #0]
 8008c6a:	2c00      	cmp	r4, #0
 8008c6c:	d0dd      	beq.n	8008c2a <sniprintf+0x16>
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]
 8008c74:	e7d9      	b.n	8008c2a <sniprintf+0x16>
 8008c76:	bf00      	nop
 8008c78:	20000068 	.word	0x20000068

08008c7c <__sread>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	460c      	mov	r4, r1
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	f000 f8fc 	bl	8008e80 <_read_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	bfab      	itete	ge
 8008c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c90:	181b      	addge	r3, r3, r0
 8008c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c96:	bfac      	ite	ge
 8008c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c9a:	81a3      	strhlt	r3, [r4, #12]
 8008c9c:	bd10      	pop	{r4, pc}

08008c9e <__swrite>:
 8008c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	461f      	mov	r7, r3
 8008ca4:	898b      	ldrh	r3, [r1, #12]
 8008ca6:	05db      	lsls	r3, r3, #23
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4616      	mov	r6, r2
 8008cae:	d505      	bpl.n	8008cbc <__swrite+0x1e>
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f000 f8d0 	bl	8008e5c <_lseek_r>
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	463b      	mov	r3, r7
 8008ccc:	4628      	mov	r0, r5
 8008cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	f000 b8f7 	b.w	8008ec4 <_write_r>

08008cd6 <__sseek>:
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	460c      	mov	r4, r1
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 f8bd 	bl	8008e5c <_lseek_r>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	bf15      	itete	ne
 8008ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cf2:	81a3      	strheq	r3, [r4, #12]
 8008cf4:	bf18      	it	ne
 8008cf6:	81a3      	strhne	r3, [r4, #12]
 8008cf8:	bd10      	pop	{r4, pc}

08008cfa <__sclose>:
 8008cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfe:	f000 b89d 	b.w	8008e3c <_close_r>

08008d02 <__swbuf_r>:
 8008d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d04:	460e      	mov	r6, r1
 8008d06:	4614      	mov	r4, r2
 8008d08:	4605      	mov	r5, r0
 8008d0a:	b118      	cbz	r0, 8008d14 <__swbuf_r+0x12>
 8008d0c:	6a03      	ldr	r3, [r0, #32]
 8008d0e:	b90b      	cbnz	r3, 8008d14 <__swbuf_r+0x12>
 8008d10:	f7ff feec 	bl	8008aec <__sinit>
 8008d14:	69a3      	ldr	r3, [r4, #24]
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	071a      	lsls	r2, r3, #28
 8008d1c:	d501      	bpl.n	8008d22 <__swbuf_r+0x20>
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	b943      	cbnz	r3, 8008d34 <__swbuf_r+0x32>
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 f82b 	bl	8008d80 <__swsetup_r>
 8008d2a:	b118      	cbz	r0, 8008d34 <__swbuf_r+0x32>
 8008d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d30:	4638      	mov	r0, r7
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	6922      	ldr	r2, [r4, #16]
 8008d38:	1a98      	subs	r0, r3, r2
 8008d3a:	6963      	ldr	r3, [r4, #20]
 8008d3c:	b2f6      	uxtb	r6, r6
 8008d3e:	4283      	cmp	r3, r0
 8008d40:	4637      	mov	r7, r6
 8008d42:	dc05      	bgt.n	8008d50 <__swbuf_r+0x4e>
 8008d44:	4621      	mov	r1, r4
 8008d46:	4628      	mov	r0, r5
 8008d48:	f000 fcb0 	bl	80096ac <_fflush_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d1ed      	bne.n	8008d2c <__swbuf_r+0x2a>
 8008d50:	68a3      	ldr	r3, [r4, #8]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	60a3      	str	r3, [r4, #8]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	6022      	str	r2, [r4, #0]
 8008d5c:	701e      	strb	r6, [r3, #0]
 8008d5e:	6962      	ldr	r2, [r4, #20]
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d004      	beq.n	8008d70 <__swbuf_r+0x6e>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	07db      	lsls	r3, r3, #31
 8008d6a:	d5e1      	bpl.n	8008d30 <__swbuf_r+0x2e>
 8008d6c:	2e0a      	cmp	r6, #10
 8008d6e:	d1df      	bne.n	8008d30 <__swbuf_r+0x2e>
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 fc9a 	bl	80096ac <_fflush_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0d9      	beq.n	8008d30 <__swbuf_r+0x2e>
 8008d7c:	e7d6      	b.n	8008d2c <__swbuf_r+0x2a>
	...

08008d80 <__swsetup_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4b29      	ldr	r3, [pc, #164]	@ (8008e28 <__swsetup_r+0xa8>)
 8008d84:	4605      	mov	r5, r0
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	460c      	mov	r4, r1
 8008d8a:	b118      	cbz	r0, 8008d94 <__swsetup_r+0x14>
 8008d8c:	6a03      	ldr	r3, [r0, #32]
 8008d8e:	b90b      	cbnz	r3, 8008d94 <__swsetup_r+0x14>
 8008d90:	f7ff feac 	bl	8008aec <__sinit>
 8008d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d98:	0719      	lsls	r1, r3, #28
 8008d9a:	d422      	bmi.n	8008de2 <__swsetup_r+0x62>
 8008d9c:	06da      	lsls	r2, r3, #27
 8008d9e:	d407      	bmi.n	8008db0 <__swsetup_r+0x30>
 8008da0:	2209      	movs	r2, #9
 8008da2:	602a      	str	r2, [r5, #0]
 8008da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	e033      	b.n	8008e18 <__swsetup_r+0x98>
 8008db0:	0758      	lsls	r0, r3, #29
 8008db2:	d512      	bpl.n	8008dda <__swsetup_r+0x5a>
 8008db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db6:	b141      	cbz	r1, 8008dca <__swsetup_r+0x4a>
 8008db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	d002      	beq.n	8008dc6 <__swsetup_r+0x46>
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f000 f8bf 	bl	8008f44 <_free_r>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f043 0308 	orr.w	r3, r3, #8
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	b94b      	cbnz	r3, 8008dfa <__swsetup_r+0x7a>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df0:	d003      	beq.n	8008dfa <__swsetup_r+0x7a>
 8008df2:	4621      	mov	r1, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 fca7 	bl	8009748 <__smakebuf_r>
 8008dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dfe:	f013 0201 	ands.w	r2, r3, #1
 8008e02:	d00a      	beq.n	8008e1a <__swsetup_r+0x9a>
 8008e04:	2200      	movs	r2, #0
 8008e06:	60a2      	str	r2, [r4, #8]
 8008e08:	6962      	ldr	r2, [r4, #20]
 8008e0a:	4252      	negs	r2, r2
 8008e0c:	61a2      	str	r2, [r4, #24]
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	b942      	cbnz	r2, 8008e24 <__swsetup_r+0xa4>
 8008e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e16:	d1c5      	bne.n	8008da4 <__swsetup_r+0x24>
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	0799      	lsls	r1, r3, #30
 8008e1c:	bf58      	it	pl
 8008e1e:	6962      	ldrpl	r2, [r4, #20]
 8008e20:	60a2      	str	r2, [r4, #8]
 8008e22:	e7f4      	b.n	8008e0e <__swsetup_r+0x8e>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7f7      	b.n	8008e18 <__swsetup_r+0x98>
 8008e28:	20000068 	.word	0x20000068

08008e2c <memset>:
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d100      	bne.n	8008e36 <memset+0xa>
 8008e34:	4770      	bx	lr
 8008e36:	f803 1b01 	strb.w	r1, [r3], #1
 8008e3a:	e7f9      	b.n	8008e30 <memset+0x4>

08008e3c <_close_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	@ (8008e58 <_close_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f9 fd3b 	bl	80028c2 <_close>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_close_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_close_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	20001810 	.word	0x20001810

08008e5c <_lseek_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4d07      	ldr	r5, [pc, #28]	@ (8008e7c <_lseek_r+0x20>)
 8008e60:	4604      	mov	r4, r0
 8008e62:	4608      	mov	r0, r1
 8008e64:	4611      	mov	r1, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	602a      	str	r2, [r5, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f7f9 fd50 	bl	8002910 <_lseek>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_lseek_r+0x1e>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_lseek_r+0x1e>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	20001810 	.word	0x20001810

08008e80 <_read_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	@ (8008ea0 <_read_r+0x20>)
 8008e84:	4604      	mov	r4, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f9 fcde 	bl	8002850 <_read>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_read_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_read_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20001810 	.word	0x20001810

08008ea4 <_sbrk_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d06      	ldr	r5, [pc, #24]	@ (8008ec0 <_sbrk_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	f7f9 fd3c 	bl	800292c <_sbrk>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_sbrk_r+0x1a>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_sbrk_r+0x1a>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20001810 	.word	0x20001810

08008ec4 <_write_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	@ (8008ee4 <_write_r+0x20>)
 8008ec8:	4604      	mov	r4, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	4611      	mov	r1, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7f9 fcd9 	bl	800288a <_write>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_write_r+0x1e>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_write_r+0x1e>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20001810 	.word	0x20001810

08008ee8 <__errno>:
 8008ee8:	4b01      	ldr	r3, [pc, #4]	@ (8008ef0 <__errno+0x8>)
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000068 	.word	0x20000068

08008ef4 <__libc_init_array>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8008f2c <__libc_init_array+0x38>)
 8008ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8008f30 <__libc_init_array+0x3c>)
 8008efa:	1b64      	subs	r4, r4, r5
 8008efc:	10a4      	asrs	r4, r4, #2
 8008efe:	2600      	movs	r6, #0
 8008f00:	42a6      	cmp	r6, r4
 8008f02:	d109      	bne.n	8008f18 <__libc_init_array+0x24>
 8008f04:	4d0b      	ldr	r5, [pc, #44]	@ (8008f34 <__libc_init_array+0x40>)
 8008f06:	4c0c      	ldr	r4, [pc, #48]	@ (8008f38 <__libc_init_array+0x44>)
 8008f08:	f001 fbf8 	bl	800a6fc <_init>
 8008f0c:	1b64      	subs	r4, r4, r5
 8008f0e:	10a4      	asrs	r4, r4, #2
 8008f10:	2600      	movs	r6, #0
 8008f12:	42a6      	cmp	r6, r4
 8008f14:	d105      	bne.n	8008f22 <__libc_init_array+0x2e>
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1c:	4798      	blx	r3
 8008f1e:	3601      	adds	r6, #1
 8008f20:	e7ee      	b.n	8008f00 <__libc_init_array+0xc>
 8008f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f26:	4798      	blx	r3
 8008f28:	3601      	adds	r6, #1
 8008f2a:	e7f2      	b.n	8008f12 <__libc_init_array+0x1e>
 8008f2c:	0800cac8 	.word	0x0800cac8
 8008f30:	0800cac8 	.word	0x0800cac8
 8008f34:	0800cac8 	.word	0x0800cac8
 8008f38:	0800cacc 	.word	0x0800cacc

08008f3c <__retarget_lock_init_recursive>:
 8008f3c:	4770      	bx	lr

08008f3e <__retarget_lock_acquire_recursive>:
 8008f3e:	4770      	bx	lr

08008f40 <__retarget_lock_release_recursive>:
 8008f40:	4770      	bx	lr
	...

08008f44 <_free_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	d041      	beq.n	8008fd0 <_free_r+0x8c>
 8008f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f50:	1f0c      	subs	r4, r1, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfb8      	it	lt
 8008f56:	18e4      	addlt	r4, r4, r3
 8008f58:	f7ff fd30 	bl	80089bc <__malloc_lock>
 8008f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd4 <_free_r+0x90>)
 8008f5e:	6813      	ldr	r3, [r2, #0]
 8008f60:	b933      	cbnz	r3, 8008f70 <_free_r+0x2c>
 8008f62:	6063      	str	r3, [r4, #4]
 8008f64:	6014      	str	r4, [r2, #0]
 8008f66:	4628      	mov	r0, r5
 8008f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6c:	f7ff bd2c 	b.w	80089c8 <__malloc_unlock>
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	d908      	bls.n	8008f86 <_free_r+0x42>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	1821      	adds	r1, r4, r0
 8008f78:	428b      	cmp	r3, r1
 8008f7a:	bf01      	itttt	eq
 8008f7c:	6819      	ldreq	r1, [r3, #0]
 8008f7e:	685b      	ldreq	r3, [r3, #4]
 8008f80:	1809      	addeq	r1, r1, r0
 8008f82:	6021      	streq	r1, [r4, #0]
 8008f84:	e7ed      	b.n	8008f62 <_free_r+0x1e>
 8008f86:	461a      	mov	r2, r3
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	b10b      	cbz	r3, 8008f90 <_free_r+0x4c>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d9fa      	bls.n	8008f86 <_free_r+0x42>
 8008f90:	6811      	ldr	r1, [r2, #0]
 8008f92:	1850      	adds	r0, r2, r1
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d10b      	bne.n	8008fb0 <_free_r+0x6c>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	4401      	add	r1, r0
 8008f9c:	1850      	adds	r0, r2, r1
 8008f9e:	4283      	cmp	r3, r0
 8008fa0:	6011      	str	r1, [r2, #0]
 8008fa2:	d1e0      	bne.n	8008f66 <_free_r+0x22>
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	6053      	str	r3, [r2, #4]
 8008faa:	4408      	add	r0, r1
 8008fac:	6010      	str	r0, [r2, #0]
 8008fae:	e7da      	b.n	8008f66 <_free_r+0x22>
 8008fb0:	d902      	bls.n	8008fb8 <_free_r+0x74>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	e7d6      	b.n	8008f66 <_free_r+0x22>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	1821      	adds	r1, r4, r0
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	bf04      	itt	eq
 8008fc0:	6819      	ldreq	r1, [r3, #0]
 8008fc2:	685b      	ldreq	r3, [r3, #4]
 8008fc4:	6063      	str	r3, [r4, #4]
 8008fc6:	bf04      	itt	eq
 8008fc8:	1809      	addeq	r1, r1, r0
 8008fca:	6021      	streq	r1, [r4, #0]
 8008fcc:	6054      	str	r4, [r2, #4]
 8008fce:	e7ca      	b.n	8008f66 <_free_r+0x22>
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200016d0 	.word	0x200016d0

08008fd8 <__ssputs_r>:
 8008fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	688e      	ldr	r6, [r1, #8]
 8008fde:	461f      	mov	r7, r3
 8008fe0:	42be      	cmp	r6, r7
 8008fe2:	680b      	ldr	r3, [r1, #0]
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	4690      	mov	r8, r2
 8008fea:	d82d      	bhi.n	8009048 <__ssputs_r+0x70>
 8008fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ff4:	d026      	beq.n	8009044 <__ssputs_r+0x6c>
 8008ff6:	6965      	ldr	r5, [r4, #20]
 8008ff8:	6909      	ldr	r1, [r1, #16]
 8008ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ffe:	eba3 0901 	sub.w	r9, r3, r1
 8009002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009006:	1c7b      	adds	r3, r7, #1
 8009008:	444b      	add	r3, r9
 800900a:	106d      	asrs	r5, r5, #1
 800900c:	429d      	cmp	r5, r3
 800900e:	bf38      	it	cc
 8009010:	461d      	movcc	r5, r3
 8009012:	0553      	lsls	r3, r2, #21
 8009014:	d527      	bpl.n	8009066 <__ssputs_r+0x8e>
 8009016:	4629      	mov	r1, r5
 8009018:	f7ff fc50 	bl	80088bc <_malloc_r>
 800901c:	4606      	mov	r6, r0
 800901e:	b360      	cbz	r0, 800907a <__ssputs_r+0xa2>
 8009020:	6921      	ldr	r1, [r4, #16]
 8009022:	464a      	mov	r2, r9
 8009024:	f000 fc08 	bl	8009838 <memcpy>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800902e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	6126      	str	r6, [r4, #16]
 8009036:	6165      	str	r5, [r4, #20]
 8009038:	444e      	add	r6, r9
 800903a:	eba5 0509 	sub.w	r5, r5, r9
 800903e:	6026      	str	r6, [r4, #0]
 8009040:	60a5      	str	r5, [r4, #8]
 8009042:	463e      	mov	r6, r7
 8009044:	42be      	cmp	r6, r7
 8009046:	d900      	bls.n	800904a <__ssputs_r+0x72>
 8009048:	463e      	mov	r6, r7
 800904a:	6820      	ldr	r0, [r4, #0]
 800904c:	4632      	mov	r2, r6
 800904e:	4641      	mov	r1, r8
 8009050:	f000 fbb6 	bl	80097c0 <memmove>
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	1b9b      	subs	r3, r3, r6
 8009058:	60a3      	str	r3, [r4, #8]
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	4433      	add	r3, r6
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	2000      	movs	r0, #0
 8009062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009066:	462a      	mov	r2, r5
 8009068:	f000 fbf4 	bl	8009854 <_realloc_r>
 800906c:	4606      	mov	r6, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	d1e0      	bne.n	8009034 <__ssputs_r+0x5c>
 8009072:	6921      	ldr	r1, [r4, #16]
 8009074:	4650      	mov	r0, sl
 8009076:	f7ff ff65 	bl	8008f44 <_free_r>
 800907a:	230c      	movs	r3, #12
 800907c:	f8ca 3000 	str.w	r3, [sl]
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009086:	81a3      	strh	r3, [r4, #12]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e7e9      	b.n	8009062 <__ssputs_r+0x8a>
	...

08009090 <_svfiprintf_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4698      	mov	r8, r3
 8009096:	898b      	ldrh	r3, [r1, #12]
 8009098:	061b      	lsls	r3, r3, #24
 800909a:	b09d      	sub	sp, #116	@ 0x74
 800909c:	4607      	mov	r7, r0
 800909e:	460d      	mov	r5, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	d510      	bpl.n	80090c6 <_svfiprintf_r+0x36>
 80090a4:	690b      	ldr	r3, [r1, #16]
 80090a6:	b973      	cbnz	r3, 80090c6 <_svfiprintf_r+0x36>
 80090a8:	2140      	movs	r1, #64	@ 0x40
 80090aa:	f7ff fc07 	bl	80088bc <_malloc_r>
 80090ae:	6028      	str	r0, [r5, #0]
 80090b0:	6128      	str	r0, [r5, #16]
 80090b2:	b930      	cbnz	r0, 80090c2 <_svfiprintf_r+0x32>
 80090b4:	230c      	movs	r3, #12
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	b01d      	add	sp, #116	@ 0x74
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	2340      	movs	r3, #64	@ 0x40
 80090c4:	616b      	str	r3, [r5, #20]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ca:	2320      	movs	r3, #32
 80090cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d4:	2330      	movs	r3, #48	@ 0x30
 80090d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009274 <_svfiprintf_r+0x1e4>
 80090da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090de:	f04f 0901 	mov.w	r9, #1
 80090e2:	4623      	mov	r3, r4
 80090e4:	469a      	mov	sl, r3
 80090e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ea:	b10a      	cbz	r2, 80090f0 <_svfiprintf_r+0x60>
 80090ec:	2a25      	cmp	r2, #37	@ 0x25
 80090ee:	d1f9      	bne.n	80090e4 <_svfiprintf_r+0x54>
 80090f0:	ebba 0b04 	subs.w	fp, sl, r4
 80090f4:	d00b      	beq.n	800910e <_svfiprintf_r+0x7e>
 80090f6:	465b      	mov	r3, fp
 80090f8:	4622      	mov	r2, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff ff6b 	bl	8008fd8 <__ssputs_r>
 8009102:	3001      	adds	r0, #1
 8009104:	f000 80a7 	beq.w	8009256 <_svfiprintf_r+0x1c6>
 8009108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800910a:	445a      	add	r2, fp
 800910c:	9209      	str	r2, [sp, #36]	@ 0x24
 800910e:	f89a 3000 	ldrb.w	r3, [sl]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 809f 	beq.w	8009256 <_svfiprintf_r+0x1c6>
 8009118:	2300      	movs	r3, #0
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009122:	f10a 0a01 	add.w	sl, sl, #1
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800912e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009130:	4654      	mov	r4, sl
 8009132:	2205      	movs	r2, #5
 8009134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009138:	484e      	ldr	r0, [pc, #312]	@ (8009274 <_svfiprintf_r+0x1e4>)
 800913a:	f7f7 f859 	bl	80001f0 <memchr>
 800913e:	9a04      	ldr	r2, [sp, #16]
 8009140:	b9d8      	cbnz	r0, 800917a <_svfiprintf_r+0xea>
 8009142:	06d0      	lsls	r0, r2, #27
 8009144:	bf44      	itt	mi
 8009146:	2320      	movmi	r3, #32
 8009148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800914c:	0711      	lsls	r1, r2, #28
 800914e:	bf44      	itt	mi
 8009150:	232b      	movmi	r3, #43	@ 0x2b
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009156:	f89a 3000 	ldrb.w	r3, [sl]
 800915a:	2b2a      	cmp	r3, #42	@ 0x2a
 800915c:	d015      	beq.n	800918a <_svfiprintf_r+0xfa>
 800915e:	9a07      	ldr	r2, [sp, #28]
 8009160:	4654      	mov	r4, sl
 8009162:	2000      	movs	r0, #0
 8009164:	f04f 0c0a 	mov.w	ip, #10
 8009168:	4621      	mov	r1, r4
 800916a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916e:	3b30      	subs	r3, #48	@ 0x30
 8009170:	2b09      	cmp	r3, #9
 8009172:	d94b      	bls.n	800920c <_svfiprintf_r+0x17c>
 8009174:	b1b0      	cbz	r0, 80091a4 <_svfiprintf_r+0x114>
 8009176:	9207      	str	r2, [sp, #28]
 8009178:	e014      	b.n	80091a4 <_svfiprintf_r+0x114>
 800917a:	eba0 0308 	sub.w	r3, r0, r8
 800917e:	fa09 f303 	lsl.w	r3, r9, r3
 8009182:	4313      	orrs	r3, r2
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	46a2      	mov	sl, r4
 8009188:	e7d2      	b.n	8009130 <_svfiprintf_r+0xa0>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	1d19      	adds	r1, r3, #4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	9103      	str	r1, [sp, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	bfbb      	ittet	lt
 8009196:	425b      	neglt	r3, r3
 8009198:	f042 0202 	orrlt.w	r2, r2, #2
 800919c:	9307      	strge	r3, [sp, #28]
 800919e:	9307      	strlt	r3, [sp, #28]
 80091a0:	bfb8      	it	lt
 80091a2:	9204      	strlt	r2, [sp, #16]
 80091a4:	7823      	ldrb	r3, [r4, #0]
 80091a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80091a8:	d10a      	bne.n	80091c0 <_svfiprintf_r+0x130>
 80091aa:	7863      	ldrb	r3, [r4, #1]
 80091ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ae:	d132      	bne.n	8009216 <_svfiprintf_r+0x186>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	9203      	str	r2, [sp, #12]
 80091b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091bc:	3402      	adds	r4, #2
 80091be:	9305      	str	r3, [sp, #20]
 80091c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009284 <_svfiprintf_r+0x1f4>
 80091c4:	7821      	ldrb	r1, [r4, #0]
 80091c6:	2203      	movs	r2, #3
 80091c8:	4650      	mov	r0, sl
 80091ca:	f7f7 f811 	bl	80001f0 <memchr>
 80091ce:	b138      	cbz	r0, 80091e0 <_svfiprintf_r+0x150>
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	eba0 000a 	sub.w	r0, r0, sl
 80091d6:	2240      	movs	r2, #64	@ 0x40
 80091d8:	4082      	lsls	r2, r0
 80091da:	4313      	orrs	r3, r2
 80091dc:	3401      	adds	r4, #1
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	4824      	ldr	r0, [pc, #144]	@ (8009278 <_svfiprintf_r+0x1e8>)
 80091e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ea:	2206      	movs	r2, #6
 80091ec:	f7f7 f800 	bl	80001f0 <memchr>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d036      	beq.n	8009262 <_svfiprintf_r+0x1d2>
 80091f4:	4b21      	ldr	r3, [pc, #132]	@ (800927c <_svfiprintf_r+0x1ec>)
 80091f6:	bb1b      	cbnz	r3, 8009240 <_svfiprintf_r+0x1b0>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	3307      	adds	r3, #7
 80091fc:	f023 0307 	bic.w	r3, r3, #7
 8009200:	3308      	adds	r3, #8
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009206:	4433      	add	r3, r6
 8009208:	9309      	str	r3, [sp, #36]	@ 0x24
 800920a:	e76a      	b.n	80090e2 <_svfiprintf_r+0x52>
 800920c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009210:	460c      	mov	r4, r1
 8009212:	2001      	movs	r0, #1
 8009214:	e7a8      	b.n	8009168 <_svfiprintf_r+0xd8>
 8009216:	2300      	movs	r3, #0
 8009218:	3401      	adds	r4, #1
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	4619      	mov	r1, r3
 800921e:	f04f 0c0a 	mov.w	ip, #10
 8009222:	4620      	mov	r0, r4
 8009224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009228:	3a30      	subs	r2, #48	@ 0x30
 800922a:	2a09      	cmp	r2, #9
 800922c:	d903      	bls.n	8009236 <_svfiprintf_r+0x1a6>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0c6      	beq.n	80091c0 <_svfiprintf_r+0x130>
 8009232:	9105      	str	r1, [sp, #20]
 8009234:	e7c4      	b.n	80091c0 <_svfiprintf_r+0x130>
 8009236:	fb0c 2101 	mla	r1, ip, r1, r2
 800923a:	4604      	mov	r4, r0
 800923c:	2301      	movs	r3, #1
 800923e:	e7f0      	b.n	8009222 <_svfiprintf_r+0x192>
 8009240:	ab03      	add	r3, sp, #12
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	462a      	mov	r2, r5
 8009246:	4b0e      	ldr	r3, [pc, #56]	@ (8009280 <_svfiprintf_r+0x1f0>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	4638      	mov	r0, r7
 800924c:	f3af 8000 	nop.w
 8009250:	1c42      	adds	r2, r0, #1
 8009252:	4606      	mov	r6, r0
 8009254:	d1d6      	bne.n	8009204 <_svfiprintf_r+0x174>
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	065b      	lsls	r3, r3, #25
 800925a:	f53f af2d 	bmi.w	80090b8 <_svfiprintf_r+0x28>
 800925e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009260:	e72c      	b.n	80090bc <_svfiprintf_r+0x2c>
 8009262:	ab03      	add	r3, sp, #12
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	462a      	mov	r2, r5
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <_svfiprintf_r+0x1f0>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	4638      	mov	r0, r7
 800926e:	f000 f879 	bl	8009364 <_printf_i>
 8009272:	e7ed      	b.n	8009250 <_svfiprintf_r+0x1c0>
 8009274:	0800c6bc 	.word	0x0800c6bc
 8009278:	0800c6c6 	.word	0x0800c6c6
 800927c:	00000000 	.word	0x00000000
 8009280:	08008fd9 	.word	0x08008fd9
 8009284:	0800c6c2 	.word	0x0800c6c2

08009288 <_printf_common>:
 8009288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	4616      	mov	r6, r2
 800928e:	4698      	mov	r8, r3
 8009290:	688a      	ldr	r2, [r1, #8]
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009298:	4293      	cmp	r3, r2
 800929a:	bfb8      	it	lt
 800929c:	4613      	movlt	r3, r2
 800929e:	6033      	str	r3, [r6, #0]
 80092a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092a4:	4607      	mov	r7, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	b10a      	cbz	r2, 80092ae <_printf_common+0x26>
 80092aa:	3301      	adds	r3, #1
 80092ac:	6033      	str	r3, [r6, #0]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	0699      	lsls	r1, r3, #26
 80092b2:	bf42      	ittt	mi
 80092b4:	6833      	ldrmi	r3, [r6, #0]
 80092b6:	3302      	addmi	r3, #2
 80092b8:	6033      	strmi	r3, [r6, #0]
 80092ba:	6825      	ldr	r5, [r4, #0]
 80092bc:	f015 0506 	ands.w	r5, r5, #6
 80092c0:	d106      	bne.n	80092d0 <_printf_common+0x48>
 80092c2:	f104 0a19 	add.w	sl, r4, #25
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	6832      	ldr	r2, [r6, #0]
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dc26      	bgt.n	800931e <_printf_common+0x96>
 80092d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	3b00      	subs	r3, #0
 80092d8:	bf18      	it	ne
 80092da:	2301      	movne	r3, #1
 80092dc:	0692      	lsls	r2, r2, #26
 80092de:	d42b      	bmi.n	8009338 <_printf_common+0xb0>
 80092e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092e4:	4641      	mov	r1, r8
 80092e6:	4638      	mov	r0, r7
 80092e8:	47c8      	blx	r9
 80092ea:	3001      	adds	r0, #1
 80092ec:	d01e      	beq.n	800932c <_printf_common+0xa4>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	6922      	ldr	r2, [r4, #16]
 80092f2:	f003 0306 	and.w	r3, r3, #6
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	bf02      	ittt	eq
 80092fa:	68e5      	ldreq	r5, [r4, #12]
 80092fc:	6833      	ldreq	r3, [r6, #0]
 80092fe:	1aed      	subeq	r5, r5, r3
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	bf0c      	ite	eq
 8009304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009308:	2500      	movne	r5, #0
 800930a:	4293      	cmp	r3, r2
 800930c:	bfc4      	itt	gt
 800930e:	1a9b      	subgt	r3, r3, r2
 8009310:	18ed      	addgt	r5, r5, r3
 8009312:	2600      	movs	r6, #0
 8009314:	341a      	adds	r4, #26
 8009316:	42b5      	cmp	r5, r6
 8009318:	d11a      	bne.n	8009350 <_printf_common+0xc8>
 800931a:	2000      	movs	r0, #0
 800931c:	e008      	b.n	8009330 <_printf_common+0xa8>
 800931e:	2301      	movs	r3, #1
 8009320:	4652      	mov	r2, sl
 8009322:	4641      	mov	r1, r8
 8009324:	4638      	mov	r0, r7
 8009326:	47c8      	blx	r9
 8009328:	3001      	adds	r0, #1
 800932a:	d103      	bne.n	8009334 <_printf_common+0xac>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009334:	3501      	adds	r5, #1
 8009336:	e7c6      	b.n	80092c6 <_printf_common+0x3e>
 8009338:	18e1      	adds	r1, r4, r3
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	2030      	movs	r0, #48	@ 0x30
 800933e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009342:	4422      	add	r2, r4
 8009344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800934c:	3302      	adds	r3, #2
 800934e:	e7c7      	b.n	80092e0 <_printf_common+0x58>
 8009350:	2301      	movs	r3, #1
 8009352:	4622      	mov	r2, r4
 8009354:	4641      	mov	r1, r8
 8009356:	4638      	mov	r0, r7
 8009358:	47c8      	blx	r9
 800935a:	3001      	adds	r0, #1
 800935c:	d0e6      	beq.n	800932c <_printf_common+0xa4>
 800935e:	3601      	adds	r6, #1
 8009360:	e7d9      	b.n	8009316 <_printf_common+0x8e>
	...

08009364 <_printf_i>:
 8009364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009368:	7e0f      	ldrb	r7, [r1, #24]
 800936a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800936c:	2f78      	cmp	r7, #120	@ 0x78
 800936e:	4691      	mov	r9, r2
 8009370:	4680      	mov	r8, r0
 8009372:	460c      	mov	r4, r1
 8009374:	469a      	mov	sl, r3
 8009376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800937a:	d807      	bhi.n	800938c <_printf_i+0x28>
 800937c:	2f62      	cmp	r7, #98	@ 0x62
 800937e:	d80a      	bhi.n	8009396 <_printf_i+0x32>
 8009380:	2f00      	cmp	r7, #0
 8009382:	f000 80d2 	beq.w	800952a <_printf_i+0x1c6>
 8009386:	2f58      	cmp	r7, #88	@ 0x58
 8009388:	f000 80b9 	beq.w	80094fe <_printf_i+0x19a>
 800938c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009394:	e03a      	b.n	800940c <_printf_i+0xa8>
 8009396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800939a:	2b15      	cmp	r3, #21
 800939c:	d8f6      	bhi.n	800938c <_printf_i+0x28>
 800939e:	a101      	add	r1, pc, #4	@ (adr r1, 80093a4 <_printf_i+0x40>)
 80093a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a4:	080093fd 	.word	0x080093fd
 80093a8:	08009411 	.word	0x08009411
 80093ac:	0800938d 	.word	0x0800938d
 80093b0:	0800938d 	.word	0x0800938d
 80093b4:	0800938d 	.word	0x0800938d
 80093b8:	0800938d 	.word	0x0800938d
 80093bc:	08009411 	.word	0x08009411
 80093c0:	0800938d 	.word	0x0800938d
 80093c4:	0800938d 	.word	0x0800938d
 80093c8:	0800938d 	.word	0x0800938d
 80093cc:	0800938d 	.word	0x0800938d
 80093d0:	08009511 	.word	0x08009511
 80093d4:	0800943b 	.word	0x0800943b
 80093d8:	080094cb 	.word	0x080094cb
 80093dc:	0800938d 	.word	0x0800938d
 80093e0:	0800938d 	.word	0x0800938d
 80093e4:	08009533 	.word	0x08009533
 80093e8:	0800938d 	.word	0x0800938d
 80093ec:	0800943b 	.word	0x0800943b
 80093f0:	0800938d 	.word	0x0800938d
 80093f4:	0800938d 	.word	0x0800938d
 80093f8:	080094d3 	.word	0x080094d3
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	1d1a      	adds	r2, r3, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6032      	str	r2, [r6, #0]
 8009404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800940c:	2301      	movs	r3, #1
 800940e:	e09d      	b.n	800954c <_printf_i+0x1e8>
 8009410:	6833      	ldr	r3, [r6, #0]
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	1d19      	adds	r1, r3, #4
 8009416:	6031      	str	r1, [r6, #0]
 8009418:	0606      	lsls	r6, r0, #24
 800941a:	d501      	bpl.n	8009420 <_printf_i+0xbc>
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	e003      	b.n	8009428 <_printf_i+0xc4>
 8009420:	0645      	lsls	r5, r0, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0xb8>
 8009424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009428:	2d00      	cmp	r5, #0
 800942a:	da03      	bge.n	8009434 <_printf_i+0xd0>
 800942c:	232d      	movs	r3, #45	@ 0x2d
 800942e:	426d      	negs	r5, r5
 8009430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009434:	4859      	ldr	r0, [pc, #356]	@ (800959c <_printf_i+0x238>)
 8009436:	230a      	movs	r3, #10
 8009438:	e011      	b.n	800945e <_printf_i+0xfa>
 800943a:	6821      	ldr	r1, [r4, #0]
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	0608      	lsls	r0, r1, #24
 8009440:	f853 5b04 	ldr.w	r5, [r3], #4
 8009444:	d402      	bmi.n	800944c <_printf_i+0xe8>
 8009446:	0649      	lsls	r1, r1, #25
 8009448:	bf48      	it	mi
 800944a:	b2ad      	uxthmi	r5, r5
 800944c:	2f6f      	cmp	r7, #111	@ 0x6f
 800944e:	4853      	ldr	r0, [pc, #332]	@ (800959c <_printf_i+0x238>)
 8009450:	6033      	str	r3, [r6, #0]
 8009452:	bf14      	ite	ne
 8009454:	230a      	movne	r3, #10
 8009456:	2308      	moveq	r3, #8
 8009458:	2100      	movs	r1, #0
 800945a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800945e:	6866      	ldr	r6, [r4, #4]
 8009460:	60a6      	str	r6, [r4, #8]
 8009462:	2e00      	cmp	r6, #0
 8009464:	bfa2      	ittt	ge
 8009466:	6821      	ldrge	r1, [r4, #0]
 8009468:	f021 0104 	bicge.w	r1, r1, #4
 800946c:	6021      	strge	r1, [r4, #0]
 800946e:	b90d      	cbnz	r5, 8009474 <_printf_i+0x110>
 8009470:	2e00      	cmp	r6, #0
 8009472:	d04b      	beq.n	800950c <_printf_i+0x1a8>
 8009474:	4616      	mov	r6, r2
 8009476:	fbb5 f1f3 	udiv	r1, r5, r3
 800947a:	fb03 5711 	mls	r7, r3, r1, r5
 800947e:	5dc7      	ldrb	r7, [r0, r7]
 8009480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009484:	462f      	mov	r7, r5
 8009486:	42bb      	cmp	r3, r7
 8009488:	460d      	mov	r5, r1
 800948a:	d9f4      	bls.n	8009476 <_printf_i+0x112>
 800948c:	2b08      	cmp	r3, #8
 800948e:	d10b      	bne.n	80094a8 <_printf_i+0x144>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	07df      	lsls	r7, r3, #31
 8009494:	d508      	bpl.n	80094a8 <_printf_i+0x144>
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	6861      	ldr	r1, [r4, #4]
 800949a:	4299      	cmp	r1, r3
 800949c:	bfde      	ittt	le
 800949e:	2330      	movle	r3, #48	@ 0x30
 80094a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094a8:	1b92      	subs	r2, r2, r6
 80094aa:	6122      	str	r2, [r4, #16]
 80094ac:	f8cd a000 	str.w	sl, [sp]
 80094b0:	464b      	mov	r3, r9
 80094b2:	aa03      	add	r2, sp, #12
 80094b4:	4621      	mov	r1, r4
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7ff fee6 	bl	8009288 <_printf_common>
 80094bc:	3001      	adds	r0, #1
 80094be:	d14a      	bne.n	8009556 <_printf_i+0x1f2>
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	b004      	add	sp, #16
 80094c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	f043 0320 	orr.w	r3, r3, #32
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	4833      	ldr	r0, [pc, #204]	@ (80095a0 <_printf_i+0x23c>)
 80094d4:	2778      	movs	r7, #120	@ 0x78
 80094d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	6831      	ldr	r1, [r6, #0]
 80094de:	061f      	lsls	r7, r3, #24
 80094e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094e4:	d402      	bmi.n	80094ec <_printf_i+0x188>
 80094e6:	065f      	lsls	r7, r3, #25
 80094e8:	bf48      	it	mi
 80094ea:	b2ad      	uxthmi	r5, r5
 80094ec:	6031      	str	r1, [r6, #0]
 80094ee:	07d9      	lsls	r1, r3, #31
 80094f0:	bf44      	itt	mi
 80094f2:	f043 0320 	orrmi.w	r3, r3, #32
 80094f6:	6023      	strmi	r3, [r4, #0]
 80094f8:	b11d      	cbz	r5, 8009502 <_printf_i+0x19e>
 80094fa:	2310      	movs	r3, #16
 80094fc:	e7ac      	b.n	8009458 <_printf_i+0xf4>
 80094fe:	4827      	ldr	r0, [pc, #156]	@ (800959c <_printf_i+0x238>)
 8009500:	e7e9      	b.n	80094d6 <_printf_i+0x172>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f023 0320 	bic.w	r3, r3, #32
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	e7f6      	b.n	80094fa <_printf_i+0x196>
 800950c:	4616      	mov	r6, r2
 800950e:	e7bd      	b.n	800948c <_printf_i+0x128>
 8009510:	6833      	ldr	r3, [r6, #0]
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	6961      	ldr	r1, [r4, #20]
 8009516:	1d18      	adds	r0, r3, #4
 8009518:	6030      	str	r0, [r6, #0]
 800951a:	062e      	lsls	r6, r5, #24
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	d501      	bpl.n	8009524 <_printf_i+0x1c0>
 8009520:	6019      	str	r1, [r3, #0]
 8009522:	e002      	b.n	800952a <_printf_i+0x1c6>
 8009524:	0668      	lsls	r0, r5, #25
 8009526:	d5fb      	bpl.n	8009520 <_printf_i+0x1bc>
 8009528:	8019      	strh	r1, [r3, #0]
 800952a:	2300      	movs	r3, #0
 800952c:	6123      	str	r3, [r4, #16]
 800952e:	4616      	mov	r6, r2
 8009530:	e7bc      	b.n	80094ac <_printf_i+0x148>
 8009532:	6833      	ldr	r3, [r6, #0]
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	6032      	str	r2, [r6, #0]
 8009538:	681e      	ldr	r6, [r3, #0]
 800953a:	6862      	ldr	r2, [r4, #4]
 800953c:	2100      	movs	r1, #0
 800953e:	4630      	mov	r0, r6
 8009540:	f7f6 fe56 	bl	80001f0 <memchr>
 8009544:	b108      	cbz	r0, 800954a <_printf_i+0x1e6>
 8009546:	1b80      	subs	r0, r0, r6
 8009548:	6060      	str	r0, [r4, #4]
 800954a:	6863      	ldr	r3, [r4, #4]
 800954c:	6123      	str	r3, [r4, #16]
 800954e:	2300      	movs	r3, #0
 8009550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009554:	e7aa      	b.n	80094ac <_printf_i+0x148>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	4632      	mov	r2, r6
 800955a:	4649      	mov	r1, r9
 800955c:	4640      	mov	r0, r8
 800955e:	47d0      	blx	sl
 8009560:	3001      	adds	r0, #1
 8009562:	d0ad      	beq.n	80094c0 <_printf_i+0x15c>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	079b      	lsls	r3, r3, #30
 8009568:	d413      	bmi.n	8009592 <_printf_i+0x22e>
 800956a:	68e0      	ldr	r0, [r4, #12]
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	4298      	cmp	r0, r3
 8009570:	bfb8      	it	lt
 8009572:	4618      	movlt	r0, r3
 8009574:	e7a6      	b.n	80094c4 <_printf_i+0x160>
 8009576:	2301      	movs	r3, #1
 8009578:	4632      	mov	r2, r6
 800957a:	4649      	mov	r1, r9
 800957c:	4640      	mov	r0, r8
 800957e:	47d0      	blx	sl
 8009580:	3001      	adds	r0, #1
 8009582:	d09d      	beq.n	80094c0 <_printf_i+0x15c>
 8009584:	3501      	adds	r5, #1
 8009586:	68e3      	ldr	r3, [r4, #12]
 8009588:	9903      	ldr	r1, [sp, #12]
 800958a:	1a5b      	subs	r3, r3, r1
 800958c:	42ab      	cmp	r3, r5
 800958e:	dcf2      	bgt.n	8009576 <_printf_i+0x212>
 8009590:	e7eb      	b.n	800956a <_printf_i+0x206>
 8009592:	2500      	movs	r5, #0
 8009594:	f104 0619 	add.w	r6, r4, #25
 8009598:	e7f5      	b.n	8009586 <_printf_i+0x222>
 800959a:	bf00      	nop
 800959c:	0800c6cd 	.word	0x0800c6cd
 80095a0:	0800c6de 	.word	0x0800c6de

080095a4 <__sflush_r>:
 80095a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	0716      	lsls	r6, r2, #28
 80095ae:	4605      	mov	r5, r0
 80095b0:	460c      	mov	r4, r1
 80095b2:	d454      	bmi.n	800965e <__sflush_r+0xba>
 80095b4:	684b      	ldr	r3, [r1, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	dc02      	bgt.n	80095c0 <__sflush_r+0x1c>
 80095ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dd48      	ble.n	8009652 <__sflush_r+0xae>
 80095c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d045      	beq.n	8009652 <__sflush_r+0xae>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095cc:	682f      	ldr	r7, [r5, #0]
 80095ce:	6a21      	ldr	r1, [r4, #32]
 80095d0:	602b      	str	r3, [r5, #0]
 80095d2:	d030      	beq.n	8009636 <__sflush_r+0x92>
 80095d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	0759      	lsls	r1, r3, #29
 80095da:	d505      	bpl.n	80095e8 <__sflush_r+0x44>
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095e2:	b10b      	cbz	r3, 80095e8 <__sflush_r+0x44>
 80095e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095e6:	1ad2      	subs	r2, r2, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095ec:	6a21      	ldr	r1, [r4, #32]
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b0      	blx	r6
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	d106      	bne.n	8009606 <__sflush_r+0x62>
 80095f8:	6829      	ldr	r1, [r5, #0]
 80095fa:	291d      	cmp	r1, #29
 80095fc:	d82b      	bhi.n	8009656 <__sflush_r+0xb2>
 80095fe:	4a2a      	ldr	r2, [pc, #168]	@ (80096a8 <__sflush_r+0x104>)
 8009600:	410a      	asrs	r2, r1
 8009602:	07d6      	lsls	r6, r2, #31
 8009604:	d427      	bmi.n	8009656 <__sflush_r+0xb2>
 8009606:	2200      	movs	r2, #0
 8009608:	6062      	str	r2, [r4, #4]
 800960a:	04d9      	lsls	r1, r3, #19
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	6022      	str	r2, [r4, #0]
 8009610:	d504      	bpl.n	800961c <__sflush_r+0x78>
 8009612:	1c42      	adds	r2, r0, #1
 8009614:	d101      	bne.n	800961a <__sflush_r+0x76>
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	b903      	cbnz	r3, 800961c <__sflush_r+0x78>
 800961a:	6560      	str	r0, [r4, #84]	@ 0x54
 800961c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800961e:	602f      	str	r7, [r5, #0]
 8009620:	b1b9      	cbz	r1, 8009652 <__sflush_r+0xae>
 8009622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009626:	4299      	cmp	r1, r3
 8009628:	d002      	beq.n	8009630 <__sflush_r+0x8c>
 800962a:	4628      	mov	r0, r5
 800962c:	f7ff fc8a 	bl	8008f44 <_free_r>
 8009630:	2300      	movs	r3, #0
 8009632:	6363      	str	r3, [r4, #52]	@ 0x34
 8009634:	e00d      	b.n	8009652 <__sflush_r+0xae>
 8009636:	2301      	movs	r3, #1
 8009638:	4628      	mov	r0, r5
 800963a:	47b0      	blx	r6
 800963c:	4602      	mov	r2, r0
 800963e:	1c50      	adds	r0, r2, #1
 8009640:	d1c9      	bne.n	80095d6 <__sflush_r+0x32>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0c6      	beq.n	80095d6 <__sflush_r+0x32>
 8009648:	2b1d      	cmp	r3, #29
 800964a:	d001      	beq.n	8009650 <__sflush_r+0xac>
 800964c:	2b16      	cmp	r3, #22
 800964e:	d11e      	bne.n	800968e <__sflush_r+0xea>
 8009650:	602f      	str	r7, [r5, #0]
 8009652:	2000      	movs	r0, #0
 8009654:	e022      	b.n	800969c <__sflush_r+0xf8>
 8009656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800965a:	b21b      	sxth	r3, r3
 800965c:	e01b      	b.n	8009696 <__sflush_r+0xf2>
 800965e:	690f      	ldr	r7, [r1, #16]
 8009660:	2f00      	cmp	r7, #0
 8009662:	d0f6      	beq.n	8009652 <__sflush_r+0xae>
 8009664:	0793      	lsls	r3, r2, #30
 8009666:	680e      	ldr	r6, [r1, #0]
 8009668:	bf08      	it	eq
 800966a:	694b      	ldreq	r3, [r1, #20]
 800966c:	600f      	str	r7, [r1, #0]
 800966e:	bf18      	it	ne
 8009670:	2300      	movne	r3, #0
 8009672:	eba6 0807 	sub.w	r8, r6, r7
 8009676:	608b      	str	r3, [r1, #8]
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	dde9      	ble.n	8009652 <__sflush_r+0xae>
 800967e:	6a21      	ldr	r1, [r4, #32]
 8009680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009682:	4643      	mov	r3, r8
 8009684:	463a      	mov	r2, r7
 8009686:	4628      	mov	r0, r5
 8009688:	47b0      	blx	r6
 800968a:	2800      	cmp	r0, #0
 800968c:	dc08      	bgt.n	80096a0 <__sflush_r+0xfc>
 800968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	4407      	add	r7, r0
 80096a2:	eba8 0800 	sub.w	r8, r8, r0
 80096a6:	e7e7      	b.n	8009678 <__sflush_r+0xd4>
 80096a8:	dfbffffe 	.word	0xdfbffffe

080096ac <_fflush_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	690b      	ldr	r3, [r1, #16]
 80096b0:	4605      	mov	r5, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b913      	cbnz	r3, 80096bc <_fflush_r+0x10>
 80096b6:	2500      	movs	r5, #0
 80096b8:	4628      	mov	r0, r5
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	b118      	cbz	r0, 80096c6 <_fflush_r+0x1a>
 80096be:	6a03      	ldr	r3, [r0, #32]
 80096c0:	b90b      	cbnz	r3, 80096c6 <_fflush_r+0x1a>
 80096c2:	f7ff fa13 	bl	8008aec <__sinit>
 80096c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0f3      	beq.n	80096b6 <_fflush_r+0xa>
 80096ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096d0:	07d0      	lsls	r0, r2, #31
 80096d2:	d404      	bmi.n	80096de <_fflush_r+0x32>
 80096d4:	0599      	lsls	r1, r3, #22
 80096d6:	d402      	bmi.n	80096de <_fflush_r+0x32>
 80096d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096da:	f7ff fc30 	bl	8008f3e <__retarget_lock_acquire_recursive>
 80096de:	4628      	mov	r0, r5
 80096e0:	4621      	mov	r1, r4
 80096e2:	f7ff ff5f 	bl	80095a4 <__sflush_r>
 80096e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096e8:	07da      	lsls	r2, r3, #31
 80096ea:	4605      	mov	r5, r0
 80096ec:	d4e4      	bmi.n	80096b8 <_fflush_r+0xc>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	059b      	lsls	r3, r3, #22
 80096f2:	d4e1      	bmi.n	80096b8 <_fflush_r+0xc>
 80096f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f6:	f7ff fc23 	bl	8008f40 <__retarget_lock_release_recursive>
 80096fa:	e7dd      	b.n	80096b8 <_fflush_r+0xc>

080096fc <__swhatbuf_r>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	2900      	cmp	r1, #0
 8009706:	b096      	sub	sp, #88	@ 0x58
 8009708:	4615      	mov	r5, r2
 800970a:	461e      	mov	r6, r3
 800970c:	da0d      	bge.n	800972a <__swhatbuf_r+0x2e>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009714:	f04f 0100 	mov.w	r1, #0
 8009718:	bf14      	ite	ne
 800971a:	2340      	movne	r3, #64	@ 0x40
 800971c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009720:	2000      	movs	r0, #0
 8009722:	6031      	str	r1, [r6, #0]
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	b016      	add	sp, #88	@ 0x58
 8009728:	bd70      	pop	{r4, r5, r6, pc}
 800972a:	466a      	mov	r2, sp
 800972c:	f000 f862 	bl	80097f4 <_fstat_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	dbec      	blt.n	800970e <__swhatbuf_r+0x12>
 8009734:	9901      	ldr	r1, [sp, #4]
 8009736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800973a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800973e:	4259      	negs	r1, r3
 8009740:	4159      	adcs	r1, r3
 8009742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009746:	e7eb      	b.n	8009720 <__swhatbuf_r+0x24>

08009748 <__smakebuf_r>:
 8009748:	898b      	ldrh	r3, [r1, #12]
 800974a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800974c:	079d      	lsls	r5, r3, #30
 800974e:	4606      	mov	r6, r0
 8009750:	460c      	mov	r4, r1
 8009752:	d507      	bpl.n	8009764 <__smakebuf_r+0x1c>
 8009754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	2301      	movs	r3, #1
 800975e:	6163      	str	r3, [r4, #20]
 8009760:	b003      	add	sp, #12
 8009762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009764:	ab01      	add	r3, sp, #4
 8009766:	466a      	mov	r2, sp
 8009768:	f7ff ffc8 	bl	80096fc <__swhatbuf_r>
 800976c:	9f00      	ldr	r7, [sp, #0]
 800976e:	4605      	mov	r5, r0
 8009770:	4639      	mov	r1, r7
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff f8a2 	bl	80088bc <_malloc_r>
 8009778:	b948      	cbnz	r0, 800978e <__smakebuf_r+0x46>
 800977a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977e:	059a      	lsls	r2, r3, #22
 8009780:	d4ee      	bmi.n	8009760 <__smakebuf_r+0x18>
 8009782:	f023 0303 	bic.w	r3, r3, #3
 8009786:	f043 0302 	orr.w	r3, r3, #2
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	e7e2      	b.n	8009754 <__smakebuf_r+0xc>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	6020      	str	r0, [r4, #0]
 8009792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800979e:	b15b      	cbz	r3, 80097b8 <__smakebuf_r+0x70>
 80097a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 f837 	bl	8009818 <_isatty_r>
 80097aa:	b128      	cbz	r0, 80097b8 <__smakebuf_r+0x70>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	431d      	orrs	r5, r3
 80097bc:	81a5      	strh	r5, [r4, #12]
 80097be:	e7cf      	b.n	8009760 <__smakebuf_r+0x18>

080097c0 <memmove>:
 80097c0:	4288      	cmp	r0, r1
 80097c2:	b510      	push	{r4, lr}
 80097c4:	eb01 0402 	add.w	r4, r1, r2
 80097c8:	d902      	bls.n	80097d0 <memmove+0x10>
 80097ca:	4284      	cmp	r4, r0
 80097cc:	4623      	mov	r3, r4
 80097ce:	d807      	bhi.n	80097e0 <memmove+0x20>
 80097d0:	1e43      	subs	r3, r0, #1
 80097d2:	42a1      	cmp	r1, r4
 80097d4:	d008      	beq.n	80097e8 <memmove+0x28>
 80097d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097de:	e7f8      	b.n	80097d2 <memmove+0x12>
 80097e0:	4402      	add	r2, r0
 80097e2:	4601      	mov	r1, r0
 80097e4:	428a      	cmp	r2, r1
 80097e6:	d100      	bne.n	80097ea <memmove+0x2a>
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097f2:	e7f7      	b.n	80097e4 <memmove+0x24>

080097f4 <_fstat_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	@ (8009814 <_fstat_r+0x20>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f7f9 f86a 	bl	80028da <_fstat>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d102      	bne.n	8009810 <_fstat_r+0x1c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b103      	cbz	r3, 8009810 <_fstat_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20001810 	.word	0x20001810

08009818 <_isatty_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	@ (8009834 <_isatty_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f9 f869 	bl	80028fa <_isatty>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_isatty_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_isatty_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	20001810 	.word	0x20001810

08009838 <memcpy>:
 8009838:	440a      	add	r2, r1
 800983a:	4291      	cmp	r1, r2
 800983c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009840:	d100      	bne.n	8009844 <memcpy+0xc>
 8009842:	4770      	bx	lr
 8009844:	b510      	push	{r4, lr}
 8009846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800984e:	4291      	cmp	r1, r2
 8009850:	d1f9      	bne.n	8009846 <memcpy+0xe>
 8009852:	bd10      	pop	{r4, pc}

08009854 <_realloc_r>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	4680      	mov	r8, r0
 800985a:	4615      	mov	r5, r2
 800985c:	460c      	mov	r4, r1
 800985e:	b921      	cbnz	r1, 800986a <_realloc_r+0x16>
 8009860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	4611      	mov	r1, r2
 8009866:	f7ff b829 	b.w	80088bc <_malloc_r>
 800986a:	b92a      	cbnz	r2, 8009878 <_realloc_r+0x24>
 800986c:	f7ff fb6a 	bl	8008f44 <_free_r>
 8009870:	2400      	movs	r4, #0
 8009872:	4620      	mov	r0, r4
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	f000 f81a 	bl	80098b0 <_malloc_usable_size_r>
 800987c:	4285      	cmp	r5, r0
 800987e:	4606      	mov	r6, r0
 8009880:	d802      	bhi.n	8009888 <_realloc_r+0x34>
 8009882:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009886:	d8f4      	bhi.n	8009872 <_realloc_r+0x1e>
 8009888:	4629      	mov	r1, r5
 800988a:	4640      	mov	r0, r8
 800988c:	f7ff f816 	bl	80088bc <_malloc_r>
 8009890:	4607      	mov	r7, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d0ec      	beq.n	8009870 <_realloc_r+0x1c>
 8009896:	42b5      	cmp	r5, r6
 8009898:	462a      	mov	r2, r5
 800989a:	4621      	mov	r1, r4
 800989c:	bf28      	it	cs
 800989e:	4632      	movcs	r2, r6
 80098a0:	f7ff ffca 	bl	8009838 <memcpy>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff fb4c 	bl	8008f44 <_free_r>
 80098ac:	463c      	mov	r4, r7
 80098ae:	e7e0      	b.n	8009872 <_realloc_r+0x1e>

080098b0 <_malloc_usable_size_r>:
 80098b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b4:	1f18      	subs	r0, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfbc      	itt	lt
 80098ba:	580b      	ldrlt	r3, [r1, r0]
 80098bc:	18c0      	addlt	r0, r0, r3
 80098be:	4770      	bx	lr

080098c0 <log10f>:
 80098c0:	b508      	push	{r3, lr}
 80098c2:	ed2d 8b02 	vpush	{d8}
 80098c6:	eeb0 8a40 	vmov.f32	s16, s0
 80098ca:	f000 f979 	bl	8009bc0 <__ieee754_log10f>
 80098ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80098d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d6:	d60f      	bvs.n	80098f8 <log10f+0x38>
 80098d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80098dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e0:	d80a      	bhi.n	80098f8 <log10f+0x38>
 80098e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d108      	bne.n	80098fe <log10f+0x3e>
 80098ec:	f7ff fafc 	bl	8008ee8 <__errno>
 80098f0:	2322      	movs	r3, #34	@ 0x22
 80098f2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009914 <log10f+0x54>
 80098f6:	6003      	str	r3, [r0, #0]
 80098f8:	ecbd 8b02 	vpop	{d8}
 80098fc:	bd08      	pop	{r3, pc}
 80098fe:	f7ff faf3 	bl	8008ee8 <__errno>
 8009902:	ecbd 8b02 	vpop	{d8}
 8009906:	2321      	movs	r3, #33	@ 0x21
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800990e:	4802      	ldr	r0, [pc, #8]	@ (8009918 <log10f+0x58>)
 8009910:	f000 b8ac 	b.w	8009a6c <nanf>
 8009914:	ff800000 	.word	0xff800000
 8009918:	0800c6c1 	.word	0x0800c6c1

0800991c <sqrtf>:
 800991c:	b508      	push	{r3, lr}
 800991e:	ed2d 8b02 	vpush	{d8}
 8009922:	eeb0 8a40 	vmov.f32	s16, s0
 8009926:	f000 f8a7 	bl	8009a78 <__ieee754_sqrtf>
 800992a:	eeb4 8a48 	vcmp.f32	s16, s16
 800992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009932:	d60c      	bvs.n	800994e <sqrtf+0x32>
 8009934:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009954 <sqrtf+0x38>
 8009938:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009940:	d505      	bpl.n	800994e <sqrtf+0x32>
 8009942:	f7ff fad1 	bl	8008ee8 <__errno>
 8009946:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800994a:	2321      	movs	r3, #33	@ 0x21
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	ecbd 8b02 	vpop	{d8}
 8009952:	bd08      	pop	{r3, pc}
 8009954:	00000000 	.word	0x00000000

08009958 <cosf>:
 8009958:	ee10 3a10 	vmov	r3, s0
 800995c:	b507      	push	{r0, r1, r2, lr}
 800995e:	4a1e      	ldr	r2, [pc, #120]	@ (80099d8 <cosf+0x80>)
 8009960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009964:	4293      	cmp	r3, r2
 8009966:	d806      	bhi.n	8009976 <cosf+0x1e>
 8009968:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80099dc <cosf+0x84>
 800996c:	b003      	add	sp, #12
 800996e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009972:	f000 b885 	b.w	8009a80 <__kernel_cosf>
 8009976:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800997a:	d304      	bcc.n	8009986 <cosf+0x2e>
 800997c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009980:	b003      	add	sp, #12
 8009982:	f85d fb04 	ldr.w	pc, [sp], #4
 8009986:	4668      	mov	r0, sp
 8009988:	f000 f972 	bl	8009c70 <__ieee754_rem_pio2f>
 800998c:	f000 0003 	and.w	r0, r0, #3
 8009990:	2801      	cmp	r0, #1
 8009992:	d009      	beq.n	80099a8 <cosf+0x50>
 8009994:	2802      	cmp	r0, #2
 8009996:	d010      	beq.n	80099ba <cosf+0x62>
 8009998:	b9b0      	cbnz	r0, 80099c8 <cosf+0x70>
 800999a:	eddd 0a01 	vldr	s1, [sp, #4]
 800999e:	ed9d 0a00 	vldr	s0, [sp]
 80099a2:	f000 f86d 	bl	8009a80 <__kernel_cosf>
 80099a6:	e7eb      	b.n	8009980 <cosf+0x28>
 80099a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80099ac:	ed9d 0a00 	vldr	s0, [sp]
 80099b0:	f000 f8be 	bl	8009b30 <__kernel_sinf>
 80099b4:	eeb1 0a40 	vneg.f32	s0, s0
 80099b8:	e7e2      	b.n	8009980 <cosf+0x28>
 80099ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80099be:	ed9d 0a00 	vldr	s0, [sp]
 80099c2:	f000 f85d 	bl	8009a80 <__kernel_cosf>
 80099c6:	e7f5      	b.n	80099b4 <cosf+0x5c>
 80099c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80099cc:	ed9d 0a00 	vldr	s0, [sp]
 80099d0:	2001      	movs	r0, #1
 80099d2:	f000 f8ad 	bl	8009b30 <__kernel_sinf>
 80099d6:	e7d3      	b.n	8009980 <cosf+0x28>
 80099d8:	3f490fd8 	.word	0x3f490fd8
 80099dc:	00000000 	.word	0x00000000

080099e0 <sinf>:
 80099e0:	ee10 3a10 	vmov	r3, s0
 80099e4:	b507      	push	{r0, r1, r2, lr}
 80099e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a64 <sinf+0x84>)
 80099e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d807      	bhi.n	8009a00 <sinf+0x20>
 80099f0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009a68 <sinf+0x88>
 80099f4:	2000      	movs	r0, #0
 80099f6:	b003      	add	sp, #12
 80099f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099fc:	f000 b898 	b.w	8009b30 <__kernel_sinf>
 8009a00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009a04:	d304      	bcc.n	8009a10 <sinf+0x30>
 8009a06:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009a0a:	b003      	add	sp, #12
 8009a0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a10:	4668      	mov	r0, sp
 8009a12:	f000 f92d 	bl	8009c70 <__ieee754_rem_pio2f>
 8009a16:	f000 0003 	and.w	r0, r0, #3
 8009a1a:	2801      	cmp	r0, #1
 8009a1c:	d00a      	beq.n	8009a34 <sinf+0x54>
 8009a1e:	2802      	cmp	r0, #2
 8009a20:	d00f      	beq.n	8009a42 <sinf+0x62>
 8009a22:	b9c0      	cbnz	r0, 8009a56 <sinf+0x76>
 8009a24:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a28:	ed9d 0a00 	vldr	s0, [sp]
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	f000 f87f 	bl	8009b30 <__kernel_sinf>
 8009a32:	e7ea      	b.n	8009a0a <sinf+0x2a>
 8009a34:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a38:	ed9d 0a00 	vldr	s0, [sp]
 8009a3c:	f000 f820 	bl	8009a80 <__kernel_cosf>
 8009a40:	e7e3      	b.n	8009a0a <sinf+0x2a>
 8009a42:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a46:	ed9d 0a00 	vldr	s0, [sp]
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	f000 f870 	bl	8009b30 <__kernel_sinf>
 8009a50:	eeb1 0a40 	vneg.f32	s0, s0
 8009a54:	e7d9      	b.n	8009a0a <sinf+0x2a>
 8009a56:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a5a:	ed9d 0a00 	vldr	s0, [sp]
 8009a5e:	f000 f80f 	bl	8009a80 <__kernel_cosf>
 8009a62:	e7f5      	b.n	8009a50 <sinf+0x70>
 8009a64:	3f490fd8 	.word	0x3f490fd8
 8009a68:	00000000 	.word	0x00000000

08009a6c <nanf>:
 8009a6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a74 <nanf+0x8>
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	7fc00000 	.word	0x7fc00000

08009a78 <__ieee754_sqrtf>:
 8009a78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a7c:	4770      	bx	lr
	...

08009a80 <__kernel_cosf>:
 8009a80:	ee10 3a10 	vmov	r3, s0
 8009a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a88:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009a8c:	eef0 6a40 	vmov.f32	s13, s0
 8009a90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009a94:	d204      	bcs.n	8009aa0 <__kernel_cosf+0x20>
 8009a96:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009a9a:	ee17 2a90 	vmov	r2, s15
 8009a9e:	b342      	cbz	r2, 8009af2 <__kernel_cosf+0x72>
 8009aa0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009aa4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009b10 <__kernel_cosf+0x90>
 8009aa8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009b14 <__kernel_cosf+0x94>
 8009aac:	4a1a      	ldr	r2, [pc, #104]	@ (8009b18 <__kernel_cosf+0x98>)
 8009aae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009b1c <__kernel_cosf+0x9c>
 8009ab8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009abc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009b20 <__kernel_cosf+0xa0>
 8009ac0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009ac4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009b24 <__kernel_cosf+0xa4>
 8009ac8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009acc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009b28 <__kernel_cosf+0xa8>
 8009ad0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009ad4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009ad8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009adc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009ae0:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae8:	d804      	bhi.n	8009af4 <__kernel_cosf+0x74>
 8009aea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009aee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009af2:	4770      	bx	lr
 8009af4:	4a0d      	ldr	r2, [pc, #52]	@ (8009b2c <__kernel_cosf+0xac>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bf9a      	itte	ls
 8009afa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009afe:	ee07 3a10 	vmovls	s14, r3
 8009b02:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009b06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009b0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b0e:	e7ec      	b.n	8009aea <__kernel_cosf+0x6a>
 8009b10:	ad47d74e 	.word	0xad47d74e
 8009b14:	310f74f6 	.word	0x310f74f6
 8009b18:	3e999999 	.word	0x3e999999
 8009b1c:	b493f27c 	.word	0xb493f27c
 8009b20:	37d00d01 	.word	0x37d00d01
 8009b24:	bab60b61 	.word	0xbab60b61
 8009b28:	3d2aaaab 	.word	0x3d2aaaab
 8009b2c:	3f480000 	.word	0x3f480000

08009b30 <__kernel_sinf>:
 8009b30:	ee10 3a10 	vmov	r3, s0
 8009b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009b3c:	d204      	bcs.n	8009b48 <__kernel_sinf+0x18>
 8009b3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b42:	ee17 3a90 	vmov	r3, s15
 8009b46:	b35b      	cbz	r3, 8009ba0 <__kernel_sinf+0x70>
 8009b48:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009b4c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009ba4 <__kernel_sinf+0x74>
 8009b50:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009ba8 <__kernel_sinf+0x78>
 8009b54:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b58:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009bac <__kernel_sinf+0x7c>
 8009b5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b60:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009bb0 <__kernel_sinf+0x80>
 8009b64:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009b68:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009bb4 <__kernel_sinf+0x84>
 8009b6c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009b70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b74:	b930      	cbnz	r0, 8009b84 <__kernel_sinf+0x54>
 8009b76:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009bb8 <__kernel_sinf+0x88>
 8009b7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b7e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009b82:	4770      	bx	lr
 8009b84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b88:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009b8c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009b90:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009b94:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009bbc <__kernel_sinf+0x8c>
 8009b98:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009b9c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2f2ec9d3 	.word	0x2f2ec9d3
 8009ba8:	b2d72f34 	.word	0xb2d72f34
 8009bac:	3638ef1b 	.word	0x3638ef1b
 8009bb0:	b9500d01 	.word	0xb9500d01
 8009bb4:	3c088889 	.word	0x3c088889
 8009bb8:	be2aaaab 	.word	0xbe2aaaab
 8009bbc:	3e2aaaab 	.word	0x3e2aaaab

08009bc0 <__ieee754_log10f>:
 8009bc0:	b508      	push	{r3, lr}
 8009bc2:	ee10 3a10 	vmov	r3, s0
 8009bc6:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009bca:	ed2d 8b02 	vpush	{d8}
 8009bce:	d108      	bne.n	8009be2 <__ieee754_log10f+0x22>
 8009bd0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009c58 <__ieee754_log10f+0x98>
 8009bd4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8009c5c <__ieee754_log10f+0x9c>
 8009bd8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009bdc:	ecbd 8b02 	vpop	{d8}
 8009be0:	bd08      	pop	{r3, pc}
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	461a      	mov	r2, r3
 8009be6:	da02      	bge.n	8009bee <__ieee754_log10f+0x2e>
 8009be8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009bec:	e7f2      	b.n	8009bd4 <__ieee754_log10f+0x14>
 8009bee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009bf2:	db02      	blt.n	8009bfa <__ieee754_log10f+0x3a>
 8009bf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009bf8:	e7f0      	b.n	8009bdc <__ieee754_log10f+0x1c>
 8009bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bfe:	bfbf      	itttt	lt
 8009c00:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8009c60 <__ieee754_log10f+0xa0>
 8009c04:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009c08:	f06f 0118 	mvnlt.w	r1, #24
 8009c0c:	ee17 2a90 	vmovlt	r2, s15
 8009c10:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009c14:	bfa8      	it	ge
 8009c16:	2100      	movge	r1, #0
 8009c18:	3b7f      	subs	r3, #127	@ 0x7f
 8009c1a:	440b      	add	r3, r1
 8009c1c:	0fd9      	lsrs	r1, r3, #31
 8009c1e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009c2a:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8009c2e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009c32:	ee00 3a10 	vmov	s0, r3
 8009c36:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009c3a:	f000 fbc3 	bl	800a3c4 <__ieee754_logf>
 8009c3e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009c64 <__ieee754_log10f+0xa4>
 8009c42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c46:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009c68 <__ieee754_log10f+0xa8>
 8009c4a:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009c4e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8009c6c <__ieee754_log10f+0xac>
 8009c52:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009c56:	e7c1      	b.n	8009bdc <__ieee754_log10f+0x1c>
 8009c58:	cc000000 	.word	0xcc000000
 8009c5c:	00000000 	.word	0x00000000
 8009c60:	4c000000 	.word	0x4c000000
 8009c64:	3ede5bd9 	.word	0x3ede5bd9
 8009c68:	355427db 	.word	0x355427db
 8009c6c:	3e9a2080 	.word	0x3e9a2080

08009c70 <__ieee754_rem_pio2f>:
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	ee10 6a10 	vmov	r6, s0
 8009c76:	4b88      	ldr	r3, [pc, #544]	@ (8009e98 <__ieee754_rem_pio2f+0x228>)
 8009c78:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009c7c:	429d      	cmp	r5, r3
 8009c7e:	b087      	sub	sp, #28
 8009c80:	4604      	mov	r4, r0
 8009c82:	d805      	bhi.n	8009c90 <__ieee754_rem_pio2f+0x20>
 8009c84:	2300      	movs	r3, #0
 8009c86:	ed80 0a00 	vstr	s0, [r0]
 8009c8a:	6043      	str	r3, [r0, #4]
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e022      	b.n	8009cd6 <__ieee754_rem_pio2f+0x66>
 8009c90:	4b82      	ldr	r3, [pc, #520]	@ (8009e9c <__ieee754_rem_pio2f+0x22c>)
 8009c92:	429d      	cmp	r5, r3
 8009c94:	d83a      	bhi.n	8009d0c <__ieee754_rem_pio2f+0x9c>
 8009c96:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009c9a:	2e00      	cmp	r6, #0
 8009c9c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009ea0 <__ieee754_rem_pio2f+0x230>
 8009ca0:	4a80      	ldr	r2, [pc, #512]	@ (8009ea4 <__ieee754_rem_pio2f+0x234>)
 8009ca2:	f023 030f 	bic.w	r3, r3, #15
 8009ca6:	dd18      	ble.n	8009cda <__ieee754_rem_pio2f+0x6a>
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009cae:	bf09      	itett	eq
 8009cb0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009ea8 <__ieee754_rem_pio2f+0x238>
 8009cb4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009eac <__ieee754_rem_pio2f+0x23c>
 8009cb8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009eb0 <__ieee754_rem_pio2f+0x240>
 8009cbc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009cc0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cc8:	ed80 7a00 	vstr	s14, [r0]
 8009ccc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009cd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	b007      	add	sp, #28
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009ce0:	bf09      	itett	eq
 8009ce2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009ea8 <__ieee754_rem_pio2f+0x238>
 8009ce6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009eac <__ieee754_rem_pio2f+0x23c>
 8009cea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009eb0 <__ieee754_rem_pio2f+0x240>
 8009cee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009cf2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cfa:	ed80 7a00 	vstr	s14, [r0]
 8009cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d02:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0a:	e7e4      	b.n	8009cd6 <__ieee754_rem_pio2f+0x66>
 8009d0c:	4b69      	ldr	r3, [pc, #420]	@ (8009eb4 <__ieee754_rem_pio2f+0x244>)
 8009d0e:	429d      	cmp	r5, r3
 8009d10:	d873      	bhi.n	8009dfa <__ieee754_rem_pio2f+0x18a>
 8009d12:	f000 f8dd 	bl	8009ed0 <fabsf>
 8009d16:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009eb8 <__ieee754_rem_pio2f+0x248>
 8009d1a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009d1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d2a:	ee17 0a90 	vmov	r0, s15
 8009d2e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009ea0 <__ieee754_rem_pio2f+0x230>
 8009d32:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009d36:	281f      	cmp	r0, #31
 8009d38:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009eac <__ieee754_rem_pio2f+0x23c>
 8009d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d40:	eeb1 6a47 	vneg.f32	s12, s14
 8009d44:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009d48:	ee16 1a90 	vmov	r1, s13
 8009d4c:	dc09      	bgt.n	8009d62 <__ieee754_rem_pio2f+0xf2>
 8009d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8009ebc <__ieee754_rem_pio2f+0x24c>)
 8009d50:	1e47      	subs	r7, r0, #1
 8009d52:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009d56:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009d5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d107      	bne.n	8009d72 <__ieee754_rem_pio2f+0x102>
 8009d62:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009d66:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009d6a:	2a08      	cmp	r2, #8
 8009d6c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009d70:	dc14      	bgt.n	8009d9c <__ieee754_rem_pio2f+0x12c>
 8009d72:	6021      	str	r1, [r4, #0]
 8009d74:	ed94 7a00 	vldr	s14, [r4]
 8009d78:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009d7c:	2e00      	cmp	r6, #0
 8009d7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d82:	ed84 0a01 	vstr	s0, [r4, #4]
 8009d86:	daa6      	bge.n	8009cd6 <__ieee754_rem_pio2f+0x66>
 8009d88:	eeb1 7a47 	vneg.f32	s14, s14
 8009d8c:	eeb1 0a40 	vneg.f32	s0, s0
 8009d90:	ed84 7a00 	vstr	s14, [r4]
 8009d94:	ed84 0a01 	vstr	s0, [r4, #4]
 8009d98:	4240      	negs	r0, r0
 8009d9a:	e79c      	b.n	8009cd6 <__ieee754_rem_pio2f+0x66>
 8009d9c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009ea8 <__ieee754_rem_pio2f+0x238>
 8009da0:	eef0 6a40 	vmov.f32	s13, s0
 8009da4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009da8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009dac:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009db0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009eb0 <__ieee754_rem_pio2f+0x240>
 8009db4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009db8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009dbc:	ee15 2a90 	vmov	r2, s11
 8009dc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009dc4:	1a5b      	subs	r3, r3, r1
 8009dc6:	2b19      	cmp	r3, #25
 8009dc8:	dc04      	bgt.n	8009dd4 <__ieee754_rem_pio2f+0x164>
 8009dca:	edc4 5a00 	vstr	s11, [r4]
 8009dce:	eeb0 0a66 	vmov.f32	s0, s13
 8009dd2:	e7cf      	b.n	8009d74 <__ieee754_rem_pio2f+0x104>
 8009dd4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009ec0 <__ieee754_rem_pio2f+0x250>
 8009dd8:	eeb0 0a66 	vmov.f32	s0, s13
 8009ddc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009de0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009de4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009ec4 <__ieee754_rem_pio2f+0x254>
 8009de8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009dec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009df0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009df4:	ed84 7a00 	vstr	s14, [r4]
 8009df8:	e7bc      	b.n	8009d74 <__ieee754_rem_pio2f+0x104>
 8009dfa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009dfe:	d306      	bcc.n	8009e0e <__ieee754_rem_pio2f+0x19e>
 8009e00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009e04:	edc0 7a01 	vstr	s15, [r0, #4]
 8009e08:	edc0 7a00 	vstr	s15, [r0]
 8009e0c:	e73e      	b.n	8009c8c <__ieee754_rem_pio2f+0x1c>
 8009e0e:	15ea      	asrs	r2, r5, #23
 8009e10:	3a86      	subs	r2, #134	@ 0x86
 8009e12:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009e1e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009ec8 <__ieee754_rem_pio2f+0x258>
 8009e22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e2a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e3e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009e42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	edcd 7a05 	vstr	s15, [sp, #20]
 8009e52:	d11e      	bne.n	8009e92 <__ieee754_rem_pio2f+0x222>
 8009e54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	bf0c      	ite	eq
 8009e5e:	2301      	moveq	r3, #1
 8009e60:	2302      	movne	r3, #2
 8009e62:	491a      	ldr	r1, [pc, #104]	@ (8009ecc <__ieee754_rem_pio2f+0x25c>)
 8009e64:	9101      	str	r1, [sp, #4]
 8009e66:	2102      	movs	r1, #2
 8009e68:	9100      	str	r1, [sp, #0]
 8009e6a:	a803      	add	r0, sp, #12
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f000 f837 	bl	8009ee0 <__kernel_rem_pio2f>
 8009e72:	2e00      	cmp	r6, #0
 8009e74:	f6bf af2f 	bge.w	8009cd6 <__ieee754_rem_pio2f+0x66>
 8009e78:	edd4 7a00 	vldr	s15, [r4]
 8009e7c:	eef1 7a67 	vneg.f32	s15, s15
 8009e80:	edc4 7a00 	vstr	s15, [r4]
 8009e84:	edd4 7a01 	vldr	s15, [r4, #4]
 8009e88:	eef1 7a67 	vneg.f32	s15, s15
 8009e8c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009e90:	e782      	b.n	8009d98 <__ieee754_rem_pio2f+0x128>
 8009e92:	2303      	movs	r3, #3
 8009e94:	e7e5      	b.n	8009e62 <__ieee754_rem_pio2f+0x1f2>
 8009e96:	bf00      	nop
 8009e98:	3f490fd8 	.word	0x3f490fd8
 8009e9c:	4016cbe3 	.word	0x4016cbe3
 8009ea0:	3fc90f80 	.word	0x3fc90f80
 8009ea4:	3fc90fd0 	.word	0x3fc90fd0
 8009ea8:	37354400 	.word	0x37354400
 8009eac:	37354443 	.word	0x37354443
 8009eb0:	2e85a308 	.word	0x2e85a308
 8009eb4:	43490f80 	.word	0x43490f80
 8009eb8:	3f22f984 	.word	0x3f22f984
 8009ebc:	0800c6f0 	.word	0x0800c6f0
 8009ec0:	2e85a300 	.word	0x2e85a300
 8009ec4:	248d3132 	.word	0x248d3132
 8009ec8:	43800000 	.word	0x43800000
 8009ecc:	0800c770 	.word	0x0800c770

08009ed0 <fabsf>:
 8009ed0:	ee10 3a10 	vmov	r3, s0
 8009ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ed8:	ee00 3a10 	vmov	s0, r3
 8009edc:	4770      	bx	lr
	...

08009ee0 <__kernel_rem_pio2f>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	ed2d 8b04 	vpush	{d8-d9}
 8009ee8:	b0d9      	sub	sp, #356	@ 0x164
 8009eea:	4690      	mov	r8, r2
 8009eec:	9001      	str	r0, [sp, #4]
 8009eee:	4ab9      	ldr	r2, [pc, #740]	@ (800a1d4 <__kernel_rem_pio2f+0x2f4>)
 8009ef0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009ef2:	f118 0f04 	cmn.w	r8, #4
 8009ef6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009efa:	460f      	mov	r7, r1
 8009efc:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f00:	db27      	blt.n	8009f52 <__kernel_rem_pio2f+0x72>
 8009f02:	f1b8 0203 	subs.w	r2, r8, #3
 8009f06:	bf48      	it	mi
 8009f08:	f108 0204 	addmi.w	r2, r8, #4
 8009f0c:	10d2      	asrs	r2, r2, #3
 8009f0e:	1c55      	adds	r5, r2, #1
 8009f10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009f12:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 8009f16:	00e8      	lsls	r0, r5, #3
 8009f18:	eba2 060b 	sub.w	r6, r2, fp
 8009f1c:	9002      	str	r0, [sp, #8]
 8009f1e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009f22:	eb0a 0c0b 	add.w	ip, sl, fp
 8009f26:	ac1c      	add	r4, sp, #112	@ 0x70
 8009f28:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	4560      	cmp	r0, ip
 8009f30:	dd11      	ble.n	8009f56 <__kernel_rem_pio2f+0x76>
 8009f32:	a91c      	add	r1, sp, #112	@ 0x70
 8009f34:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009f38:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009f3c:	f04f 0c00 	mov.w	ip, #0
 8009f40:	45d4      	cmp	ip, sl
 8009f42:	dc27      	bgt.n	8009f94 <__kernel_rem_pio2f+0xb4>
 8009f44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009f48:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	2400      	movs	r4, #0
 8009f50:	e016      	b.n	8009f80 <__kernel_rem_pio2f+0xa0>
 8009f52:	2200      	movs	r2, #0
 8009f54:	e7db      	b.n	8009f0e <__kernel_rem_pio2f+0x2e>
 8009f56:	42c6      	cmn	r6, r0
 8009f58:	bf5d      	ittte	pl
 8009f5a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009f5e:	ee07 1a90 	vmovpl	s15, r1
 8009f62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009f66:	eef0 7a47 	vmovmi.f32	s15, s14
 8009f6a:	ece4 7a01 	vstmia	r4!, {s15}
 8009f6e:	3001      	adds	r0, #1
 8009f70:	e7dd      	b.n	8009f2e <__kernel_rem_pio2f+0x4e>
 8009f72:	ecfe 6a01 	vldmia	lr!, {s13}
 8009f76:	ed96 7a00 	vldr	s14, [r6]
 8009f7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f7e:	3401      	adds	r4, #1
 8009f80:	455c      	cmp	r4, fp
 8009f82:	f1a6 0604 	sub.w	r6, r6, #4
 8009f86:	ddf4      	ble.n	8009f72 <__kernel_rem_pio2f+0x92>
 8009f88:	ece9 7a01 	vstmia	r9!, {s15}
 8009f8c:	f10c 0c01 	add.w	ip, ip, #1
 8009f90:	3004      	adds	r0, #4
 8009f92:	e7d5      	b.n	8009f40 <__kernel_rem_pio2f+0x60>
 8009f94:	a908      	add	r1, sp, #32
 8009f96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f9a:	9104      	str	r1, [sp, #16]
 8009f9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009f9e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800a1e0 <__kernel_rem_pio2f+0x300>
 8009fa2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800a1dc <__kernel_rem_pio2f+0x2fc>
 8009fa6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009faa:	9203      	str	r2, [sp, #12]
 8009fac:	4654      	mov	r4, sl
 8009fae:	00a2      	lsls	r2, r4, #2
 8009fb0:	9205      	str	r2, [sp, #20]
 8009fb2:	aa58      	add	r2, sp, #352	@ 0x160
 8009fb4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009fb8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009fbc:	a944      	add	r1, sp, #272	@ 0x110
 8009fbe:	aa08      	add	r2, sp, #32
 8009fc0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009fc4:	4694      	mov	ip, r2
 8009fc6:	4626      	mov	r6, r4
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	f1a0 0004 	sub.w	r0, r0, #4
 8009fce:	dc4c      	bgt.n	800a06a <__kernel_rem_pio2f+0x18a>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fd6:	f000 fae7 	bl	800a5a8 <scalbnf>
 8009fda:	eeb0 8a40 	vmov.f32	s16, s0
 8009fde:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009fe2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009fe6:	f000 fb45 	bl	800a674 <floorf>
 8009fea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009fee:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ff8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009ffc:	ee17 9a90 	vmov	r9, s15
 800a000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a004:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a008:	dd41      	ble.n	800a08e <__kernel_rem_pio2f+0x1ae>
 800a00a:	f104 3cff 	add.w	ip, r4, #4294967295
 800a00e:	a908      	add	r1, sp, #32
 800a010:	f1c5 0e08 	rsb	lr, r5, #8
 800a014:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800a018:	fa46 f00e 	asr.w	r0, r6, lr
 800a01c:	4481      	add	r9, r0
 800a01e:	fa00 f00e 	lsl.w	r0, r0, lr
 800a022:	1a36      	subs	r6, r6, r0
 800a024:	f1c5 0007 	rsb	r0, r5, #7
 800a028:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800a02c:	4106      	asrs	r6, r0
 800a02e:	2e00      	cmp	r6, #0
 800a030:	dd3c      	ble.n	800a0ac <__kernel_rem_pio2f+0x1cc>
 800a032:	f04f 0e00 	mov.w	lr, #0
 800a036:	f109 0901 	add.w	r9, r9, #1
 800a03a:	4670      	mov	r0, lr
 800a03c:	4574      	cmp	r4, lr
 800a03e:	dc68      	bgt.n	800a112 <__kernel_rem_pio2f+0x232>
 800a040:	2d00      	cmp	r5, #0
 800a042:	dd03      	ble.n	800a04c <__kernel_rem_pio2f+0x16c>
 800a044:	2d01      	cmp	r5, #1
 800a046:	d074      	beq.n	800a132 <__kernel_rem_pio2f+0x252>
 800a048:	2d02      	cmp	r5, #2
 800a04a:	d07d      	beq.n	800a148 <__kernel_rem_pio2f+0x268>
 800a04c:	2e02      	cmp	r6, #2
 800a04e:	d12d      	bne.n	800a0ac <__kernel_rem_pio2f+0x1cc>
 800a050:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a054:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a058:	b340      	cbz	r0, 800a0ac <__kernel_rem_pio2f+0x1cc>
 800a05a:	4628      	mov	r0, r5
 800a05c:	9306      	str	r3, [sp, #24]
 800a05e:	f000 faa3 	bl	800a5a8 <scalbnf>
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a068:	e020      	b.n	800a0ac <__kernel_rem_pio2f+0x1cc>
 800a06a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a06e:	3e01      	subs	r6, #1
 800a070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a078:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a07c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a080:	ecac 0a01 	vstmia	ip!, {s0}
 800a084:	ed90 0a00 	vldr	s0, [r0]
 800a088:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a08c:	e79c      	b.n	8009fc8 <__kernel_rem_pio2f+0xe8>
 800a08e:	d105      	bne.n	800a09c <__kernel_rem_pio2f+0x1bc>
 800a090:	1e60      	subs	r0, r4, #1
 800a092:	a908      	add	r1, sp, #32
 800a094:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800a098:	11f6      	asrs	r6, r6, #7
 800a09a:	e7c8      	b.n	800a02e <__kernel_rem_pio2f+0x14e>
 800a09c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a0a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a8:	da31      	bge.n	800a10e <__kernel_rem_pio2f+0x22e>
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b4:	f040 8098 	bne.w	800a1e8 <__kernel_rem_pio2f+0x308>
 800a0b8:	1e60      	subs	r0, r4, #1
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	4550      	cmp	r0, sl
 800a0be:	da4b      	bge.n	800a158 <__kernel_rem_pio2f+0x278>
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	d065      	beq.n	800a190 <__kernel_rem_pio2f+0x2b0>
 800a0c4:	3c01      	subs	r4, #1
 800a0c6:	ab08      	add	r3, sp, #32
 800a0c8:	3d08      	subs	r5, #8
 800a0ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f8      	beq.n	800a0c4 <__kernel_rem_pio2f+0x1e4>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a0d8:	f000 fa66 	bl	800a5a8 <scalbnf>
 800a0dc:	1c63      	adds	r3, r4, #1
 800a0de:	aa44      	add	r2, sp, #272	@ 0x110
 800a0e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a1e0 <__kernel_rem_pio2f+0x300>
 800a0e4:	0099      	lsls	r1, r3, #2
 800a0e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f280 80a9 	bge.w	800a244 <__kernel_rem_pio2f+0x364>
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f2c0 80c7 	blt.w	800a288 <__kernel_rem_pio2f+0x3a8>
 800a0fa:	aa44      	add	r2, sp, #272	@ 0x110
 800a0fc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a100:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800a1d8 <__kernel_rem_pio2f+0x2f8>
 800a104:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 800a108:	2000      	movs	r0, #0
 800a10a:	1ae2      	subs	r2, r4, r3
 800a10c:	e0b1      	b.n	800a272 <__kernel_rem_pio2f+0x392>
 800a10e:	2602      	movs	r6, #2
 800a110:	e78f      	b.n	800a032 <__kernel_rem_pio2f+0x152>
 800a112:	f852 1b04 	ldr.w	r1, [r2], #4
 800a116:	b948      	cbnz	r0, 800a12c <__kernel_rem_pio2f+0x24c>
 800a118:	b121      	cbz	r1, 800a124 <__kernel_rem_pio2f+0x244>
 800a11a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800a11e:	f842 1c04 	str.w	r1, [r2, #-4]
 800a122:	2101      	movs	r1, #1
 800a124:	f10e 0e01 	add.w	lr, lr, #1
 800a128:	4608      	mov	r0, r1
 800a12a:	e787      	b.n	800a03c <__kernel_rem_pio2f+0x15c>
 800a12c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800a130:	e7f5      	b.n	800a11e <__kernel_rem_pio2f+0x23e>
 800a132:	f104 3cff 	add.w	ip, r4, #4294967295
 800a136:	aa08      	add	r2, sp, #32
 800a138:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a13c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a140:	a908      	add	r1, sp, #32
 800a142:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a146:	e781      	b.n	800a04c <__kernel_rem_pio2f+0x16c>
 800a148:	f104 3cff 	add.w	ip, r4, #4294967295
 800a14c:	aa08      	add	r2, sp, #32
 800a14e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a152:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a156:	e7f3      	b.n	800a140 <__kernel_rem_pio2f+0x260>
 800a158:	a908      	add	r1, sp, #32
 800a15a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a15e:	3801      	subs	r0, #1
 800a160:	430a      	orrs	r2, r1
 800a162:	e7ab      	b.n	800a0bc <__kernel_rem_pio2f+0x1dc>
 800a164:	3201      	adds	r2, #1
 800a166:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	d0fa      	beq.n	800a164 <__kernel_rem_pio2f+0x284>
 800a16e:	9905      	ldr	r1, [sp, #20]
 800a170:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800a174:	eb0d 0001 	add.w	r0, sp, r1
 800a178:	18e6      	adds	r6, r4, r3
 800a17a:	a91c      	add	r1, sp, #112	@ 0x70
 800a17c:	f104 0c01 	add.w	ip, r4, #1
 800a180:	384c      	subs	r0, #76	@ 0x4c
 800a182:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800a186:	4422      	add	r2, r4
 800a188:	4562      	cmp	r2, ip
 800a18a:	da04      	bge.n	800a196 <__kernel_rem_pio2f+0x2b6>
 800a18c:	4614      	mov	r4, r2
 800a18e:	e70e      	b.n	8009fae <__kernel_rem_pio2f+0xce>
 800a190:	9804      	ldr	r0, [sp, #16]
 800a192:	2201      	movs	r2, #1
 800a194:	e7e7      	b.n	800a166 <__kernel_rem_pio2f+0x286>
 800a196:	9903      	ldr	r1, [sp, #12]
 800a198:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a19c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	ee07 1a90 	vmov	s15, r1
 800a1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1aa:	2400      	movs	r4, #0
 800a1ac:	ece6 7a01 	vstmia	r6!, {s15}
 800a1b0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 800a1b4:	46b1      	mov	r9, r6
 800a1b6:	455c      	cmp	r4, fp
 800a1b8:	dd04      	ble.n	800a1c4 <__kernel_rem_pio2f+0x2e4>
 800a1ba:	ece0 7a01 	vstmia	r0!, {s15}
 800a1be:	f10c 0c01 	add.w	ip, ip, #1
 800a1c2:	e7e1      	b.n	800a188 <__kernel_rem_pio2f+0x2a8>
 800a1c4:	ecfe 6a01 	vldmia	lr!, {s13}
 800a1c8:	ed39 7a01 	vldmdb	r9!, {s14}
 800a1cc:	3401      	adds	r4, #1
 800a1ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a1d2:	e7f0      	b.n	800a1b6 <__kernel_rem_pio2f+0x2d6>
 800a1d4:	0800cab4 	.word	0x0800cab4
 800a1d8:	0800ca88 	.word	0x0800ca88
 800a1dc:	43800000 	.word	0x43800000
 800a1e0:	3b800000 	.word	0x3b800000
 800a1e4:	00000000 	.word	0x00000000
 800a1e8:	9b02      	ldr	r3, [sp, #8]
 800a1ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a1ee:	eba3 0008 	sub.w	r0, r3, r8
 800a1f2:	f000 f9d9 	bl	800a5a8 <scalbnf>
 800a1f6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800a1dc <__kernel_rem_pio2f+0x2fc>
 800a1fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	db19      	blt.n	800a238 <__kernel_rem_pio2f+0x358>
 800a204:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800a1e0 <__kernel_rem_pio2f+0x300>
 800a208:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a20c:	aa08      	add	r2, sp, #32
 800a20e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a212:	3508      	adds	r5, #8
 800a214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a218:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a21c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a220:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a224:	ee10 3a10 	vmov	r3, s0
 800a228:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a22c:	ee17 3a90 	vmov	r3, s15
 800a230:	3401      	adds	r4, #1
 800a232:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a236:	e74c      	b.n	800a0d2 <__kernel_rem_pio2f+0x1f2>
 800a238:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a23c:	aa08      	add	r2, sp, #32
 800a23e:	ee10 3a10 	vmov	r3, s0
 800a242:	e7f6      	b.n	800a232 <__kernel_rem_pio2f+0x352>
 800a244:	a808      	add	r0, sp, #32
 800a246:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a24a:	9001      	str	r0, [sp, #4]
 800a24c:	ee07 0a90 	vmov	s15, r0
 800a250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a254:	3b01      	subs	r3, #1
 800a256:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a25a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a25e:	ed62 7a01 	vstmdb	r2!, {s15}
 800a262:	e743      	b.n	800a0ec <__kernel_rem_pio2f+0x20c>
 800a264:	ecfc 6a01 	vldmia	ip!, {s13}
 800a268:	ecb5 7a01 	vldmia	r5!, {s14}
 800a26c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a270:	3001      	adds	r0, #1
 800a272:	4550      	cmp	r0, sl
 800a274:	dc01      	bgt.n	800a27a <__kernel_rem_pio2f+0x39a>
 800a276:	4282      	cmp	r2, r0
 800a278:	daf4      	bge.n	800a264 <__kernel_rem_pio2f+0x384>
 800a27a:	a858      	add	r0, sp, #352	@ 0x160
 800a27c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a280:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800a284:	3b01      	subs	r3, #1
 800a286:	e735      	b.n	800a0f4 <__kernel_rem_pio2f+0x214>
 800a288:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	dc09      	bgt.n	800a2a2 <__kernel_rem_pio2f+0x3c2>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dc2b      	bgt.n	800a2ea <__kernel_rem_pio2f+0x40a>
 800a292:	d044      	beq.n	800a31e <__kernel_rem_pio2f+0x43e>
 800a294:	f009 0007 	and.w	r0, r9, #7
 800a298:	b059      	add	sp, #356	@ 0x164
 800a29a:	ecbd 8b04 	vpop	{d8-d9}
 800a29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d1f5      	bne.n	800a294 <__kernel_rem_pio2f+0x3b4>
 800a2a8:	aa30      	add	r2, sp, #192	@ 0xc0
 800a2aa:	1f0b      	subs	r3, r1, #4
 800a2ac:	4413      	add	r3, r2
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f1a2 0204 	sub.w	r2, r2, #4
 800a2b8:	dc52      	bgt.n	800a360 <__kernel_rem_pio2f+0x480>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	2a01      	cmp	r2, #1
 800a2be:	f1a3 0304 	sub.w	r3, r3, #4
 800a2c2:	dc5d      	bgt.n	800a380 <__kernel_rem_pio2f+0x4a0>
 800a2c4:	ab30      	add	r3, sp, #192	@ 0xc0
 800a2c6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 800a2ca:	440b      	add	r3, r1
 800a2cc:	2c01      	cmp	r4, #1
 800a2ce:	dc67      	bgt.n	800a3a0 <__kernel_rem_pio2f+0x4c0>
 800a2d0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a2d4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	d167      	bne.n	800a3ac <__kernel_rem_pio2f+0x4cc>
 800a2dc:	edc7 6a00 	vstr	s13, [r7]
 800a2e0:	ed87 7a01 	vstr	s14, [r7, #4]
 800a2e4:	edc7 7a02 	vstr	s15, [r7, #8]
 800a2e8:	e7d4      	b.n	800a294 <__kernel_rem_pio2f+0x3b4>
 800a2ea:	ab30      	add	r3, sp, #192	@ 0xc0
 800a2ec:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 800a2f0:	440b      	add	r3, r1
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	da24      	bge.n	800a342 <__kernel_rem_pio2f+0x462>
 800a2f8:	b34e      	cbz	r6, 800a34e <__kernel_rem_pio2f+0x46e>
 800a2fa:	eef1 7a47 	vneg.f32	s15, s14
 800a2fe:	edc7 7a00 	vstr	s15, [r7]
 800a302:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800a306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a30a:	aa31      	add	r2, sp, #196	@ 0xc4
 800a30c:	2301      	movs	r3, #1
 800a30e:	429c      	cmp	r4, r3
 800a310:	da20      	bge.n	800a354 <__kernel_rem_pio2f+0x474>
 800a312:	b10e      	cbz	r6, 800a318 <__kernel_rem_pio2f+0x438>
 800a314:	eef1 7a67 	vneg.f32	s15, s15
 800a318:	edc7 7a01 	vstr	s15, [r7, #4]
 800a31c:	e7ba      	b.n	800a294 <__kernel_rem_pio2f+0x3b4>
 800a31e:	ab30      	add	r3, sp, #192	@ 0xc0
 800a320:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800a1e4 <__kernel_rem_pio2f+0x304>
 800a324:	440b      	add	r3, r1
 800a326:	2c00      	cmp	r4, #0
 800a328:	da05      	bge.n	800a336 <__kernel_rem_pio2f+0x456>
 800a32a:	b10e      	cbz	r6, 800a330 <__kernel_rem_pio2f+0x450>
 800a32c:	eef1 7a67 	vneg.f32	s15, s15
 800a330:	edc7 7a00 	vstr	s15, [r7]
 800a334:	e7ae      	b.n	800a294 <__kernel_rem_pio2f+0x3b4>
 800a336:	ed33 7a01 	vldmdb	r3!, {s14}
 800a33a:	3c01      	subs	r4, #1
 800a33c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a340:	e7f1      	b.n	800a326 <__kernel_rem_pio2f+0x446>
 800a342:	ed73 7a01 	vldmdb	r3!, {s15}
 800a346:	3a01      	subs	r2, #1
 800a348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a34c:	e7d2      	b.n	800a2f4 <__kernel_rem_pio2f+0x414>
 800a34e:	eef0 7a47 	vmov.f32	s15, s14
 800a352:	e7d4      	b.n	800a2fe <__kernel_rem_pio2f+0x41e>
 800a354:	ecb2 7a01 	vldmia	r2!, {s14}
 800a358:	3301      	adds	r3, #1
 800a35a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a35e:	e7d6      	b.n	800a30e <__kernel_rem_pio2f+0x42e>
 800a360:	edd2 7a00 	vldr	s15, [r2]
 800a364:	edd2 6a01 	vldr	s13, [r2, #4]
 800a368:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a36c:	3801      	subs	r0, #1
 800a36e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a372:	ed82 7a00 	vstr	s14, [r2]
 800a376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37a:	edc2 7a01 	vstr	s15, [r2, #4]
 800a37e:	e798      	b.n	800a2b2 <__kernel_rem_pio2f+0x3d2>
 800a380:	edd3 7a00 	vldr	s15, [r3]
 800a384:	edd3 6a01 	vldr	s13, [r3, #4]
 800a388:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a38c:	3a01      	subs	r2, #1
 800a38e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a392:	ed83 7a00 	vstr	s14, [r3]
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39a:	edc3 7a01 	vstr	s15, [r3, #4]
 800a39e:	e78d      	b.n	800a2bc <__kernel_rem_pio2f+0x3dc>
 800a3a0:	ed33 7a01 	vldmdb	r3!, {s14}
 800a3a4:	3c01      	subs	r4, #1
 800a3a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3aa:	e78f      	b.n	800a2cc <__kernel_rem_pio2f+0x3ec>
 800a3ac:	eef1 6a66 	vneg.f32	s13, s13
 800a3b0:	eeb1 7a47 	vneg.f32	s14, s14
 800a3b4:	edc7 6a00 	vstr	s13, [r7]
 800a3b8:	ed87 7a01 	vstr	s14, [r7, #4]
 800a3bc:	eef1 7a67 	vneg.f32	s15, s15
 800a3c0:	e790      	b.n	800a2e4 <__kernel_rem_pio2f+0x404>
 800a3c2:	bf00      	nop

0800a3c4 <__ieee754_logf>:
 800a3c4:	ee10 3a10 	vmov	r3, s0
 800a3c8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a3cc:	d106      	bne.n	800a3dc <__ieee754_logf+0x18>
 800a3ce:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800a568 <__ieee754_logf+0x1a4>
 800a3d2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800a56c <__ieee754_logf+0x1a8>
 800a3d6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a3da:	4770      	bx	lr
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	da02      	bge.n	800a3e8 <__ieee754_logf+0x24>
 800a3e2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a3e6:	e7f4      	b.n	800a3d2 <__ieee754_logf+0xe>
 800a3e8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a3ec:	db02      	blt.n	800a3f4 <__ieee754_logf+0x30>
 800a3ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a3f2:	4770      	bx	lr
 800a3f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a3f8:	bfb8      	it	lt
 800a3fa:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800a570 <__ieee754_logf+0x1ac>
 800a3fe:	485d      	ldr	r0, [pc, #372]	@ (800a574 <__ieee754_logf+0x1b0>)
 800a400:	bfbe      	ittt	lt
 800a402:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a406:	f06f 0118 	mvnlt.w	r1, #24
 800a40a:	ee17 2a90 	vmovlt	r2, s15
 800a40e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a412:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a416:	4410      	add	r0, r2
 800a418:	bfa8      	it	ge
 800a41a:	2100      	movge	r1, #0
 800a41c:	3b7f      	subs	r3, #127	@ 0x7f
 800a41e:	440b      	add	r3, r1
 800a420:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800a424:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800a428:	4311      	orrs	r1, r2
 800a42a:	ee00 1a10 	vmov	s0, r1
 800a42e:	4952      	ldr	r1, [pc, #328]	@ (800a578 <__ieee754_logf+0x1b4>)
 800a430:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800a434:	f102 000f 	add.w	r0, r2, #15
 800a438:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a43c:	4001      	ands	r1, r0
 800a43e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a442:	bb89      	cbnz	r1, 800a4a8 <__ieee754_logf+0xe4>
 800a444:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a44c:	d10f      	bne.n	800a46e <__ieee754_logf+0xaa>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 8087 	beq.w	800a562 <__ieee754_logf+0x19e>
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800a57c <__ieee754_logf+0x1b8>
 800a45c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800a580 <__ieee754_logf+0x1bc>
 800a460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a464:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a468:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a46c:	4770      	bx	lr
 800a46e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800a584 <__ieee754_logf+0x1c0>
 800a472:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a476:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a47a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a47e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a482:	b913      	cbnz	r3, 800a48a <__ieee754_logf+0xc6>
 800a484:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a488:	4770      	bx	lr
 800a48a:	ee07 3a90 	vmov	s15, r3
 800a48e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a57c <__ieee754_logf+0x1b8>
 800a492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a496:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a49a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a49e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a580 <__ieee754_logf+0x1bc>
 800a4a2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a4a6:	4770      	bx	lr
 800a4a8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a4ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a4b0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a588 <__ieee754_logf+0x1c4>
 800a4b4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800a58c <__ieee754_logf+0x1c8>
 800a4b8:	4935      	ldr	r1, [pc, #212]	@ (800a590 <__ieee754_logf+0x1cc>)
 800a4ba:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a4be:	4411      	add	r1, r2
 800a4c0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800a4c4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a4d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a4d8:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a4dc:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800a594 <__ieee754_logf+0x1d0>
 800a4e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a4e4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a598 <__ieee754_logf+0x1d4>
 800a4e8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a4ec:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800a59c <__ieee754_logf+0x1d8>
 800a4f0:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a4f4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800a5a0 <__ieee754_logf+0x1dc>
 800a4f8:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a4fc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800a5a4 <__ieee754_logf+0x1e0>
 800a500:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a504:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a508:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a50c:	dd1a      	ble.n	800a544 <__ieee754_logf+0x180>
 800a50e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a512:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a516:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a51a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a51e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a522:	b913      	cbnz	r3, 800a52a <__ieee754_logf+0x166>
 800a524:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a528:	e7ac      	b.n	800a484 <__ieee754_logf+0xc0>
 800a52a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800a57c <__ieee754_logf+0x1b8>
 800a52e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a532:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a536:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a53a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800a580 <__ieee754_logf+0x1bc>
 800a53e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a542:	4770      	bx	lr
 800a544:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a548:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a54c:	b913      	cbnz	r3, 800a554 <__ieee754_logf+0x190>
 800a54e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a552:	4770      	bx	lr
 800a554:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800a57c <__ieee754_logf+0x1b8>
 800a558:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a55c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a560:	e7eb      	b.n	800a53a <__ieee754_logf+0x176>
 800a562:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800a56c <__ieee754_logf+0x1a8>
 800a566:	4770      	bx	lr
 800a568:	cc000000 	.word	0xcc000000
 800a56c:	00000000 	.word	0x00000000
 800a570:	4c000000 	.word	0x4c000000
 800a574:	004afb20 	.word	0x004afb20
 800a578:	007ffff0 	.word	0x007ffff0
 800a57c:	3717f7d1 	.word	0x3717f7d1
 800a580:	3f317180 	.word	0x3f317180
 800a584:	3eaaaaab 	.word	0x3eaaaaab
 800a588:	3e1cd04f 	.word	0x3e1cd04f
 800a58c:	3e178897 	.word	0x3e178897
 800a590:	ffcf5c30 	.word	0xffcf5c30
 800a594:	3e638e29 	.word	0x3e638e29
 800a598:	3ecccccd 	.word	0x3ecccccd
 800a59c:	3e3a3325 	.word	0x3e3a3325
 800a5a0:	3e924925 	.word	0x3e924925
 800a5a4:	3f2aaaab 	.word	0x3f2aaaab

0800a5a8 <scalbnf>:
 800a5a8:	ee10 3a10 	vmov	r3, s0
 800a5ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a5b0:	d02b      	beq.n	800a60a <scalbnf+0x62>
 800a5b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a5b6:	d302      	bcc.n	800a5be <scalbnf+0x16>
 800a5b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a5bc:	4770      	bx	lr
 800a5be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a5c2:	d123      	bne.n	800a60c <scalbnf+0x64>
 800a5c4:	4b24      	ldr	r3, [pc, #144]	@ (800a658 <scalbnf+0xb0>)
 800a5c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a65c <scalbnf+0xb4>
 800a5ca:	4298      	cmp	r0, r3
 800a5cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a5d0:	db17      	blt.n	800a602 <scalbnf+0x5a>
 800a5d2:	ee10 3a10 	vmov	r3, s0
 800a5d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a5da:	3a19      	subs	r2, #25
 800a5dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a5e0:	4288      	cmp	r0, r1
 800a5e2:	dd15      	ble.n	800a610 <scalbnf+0x68>
 800a5e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a660 <scalbnf+0xb8>
 800a5e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a664 <scalbnf+0xbc>
 800a5ec:	ee10 3a10 	vmov	r3, s0
 800a5f0:	eeb0 7a67 	vmov.f32	s14, s15
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfb8      	it	lt
 800a5f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800a5fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a600:	4770      	bx	lr
 800a602:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a668 <scalbnf+0xc0>
 800a606:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a60a:	4770      	bx	lr
 800a60c:	0dd2      	lsrs	r2, r2, #23
 800a60e:	e7e5      	b.n	800a5dc <scalbnf+0x34>
 800a610:	4410      	add	r0, r2
 800a612:	28fe      	cmp	r0, #254	@ 0xfe
 800a614:	dce6      	bgt.n	800a5e4 <scalbnf+0x3c>
 800a616:	2800      	cmp	r0, #0
 800a618:	dd06      	ble.n	800a628 <scalbnf+0x80>
 800a61a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a61e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a622:	ee00 3a10 	vmov	s0, r3
 800a626:	4770      	bx	lr
 800a628:	f110 0f16 	cmn.w	r0, #22
 800a62c:	da09      	bge.n	800a642 <scalbnf+0x9a>
 800a62e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a668 <scalbnf+0xc0>
 800a632:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a66c <scalbnf+0xc4>
 800a636:	ee10 3a10 	vmov	r3, s0
 800a63a:	eeb0 7a67 	vmov.f32	s14, s15
 800a63e:	2b00      	cmp	r3, #0
 800a640:	e7d9      	b.n	800a5f6 <scalbnf+0x4e>
 800a642:	3019      	adds	r0, #25
 800a644:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a648:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a64c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a670 <scalbnf+0xc8>
 800a650:	ee07 3a90 	vmov	s15, r3
 800a654:	e7d7      	b.n	800a606 <scalbnf+0x5e>
 800a656:	bf00      	nop
 800a658:	ffff3cb0 	.word	0xffff3cb0
 800a65c:	4c000000 	.word	0x4c000000
 800a660:	7149f2ca 	.word	0x7149f2ca
 800a664:	f149f2ca 	.word	0xf149f2ca
 800a668:	0da24260 	.word	0x0da24260
 800a66c:	8da24260 	.word	0x8da24260
 800a670:	33000000 	.word	0x33000000

0800a674 <floorf>:
 800a674:	ee10 3a10 	vmov	r3, s0
 800a678:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a67c:	3a7f      	subs	r2, #127	@ 0x7f
 800a67e:	2a16      	cmp	r2, #22
 800a680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a684:	dc2b      	bgt.n	800a6de <floorf+0x6a>
 800a686:	2a00      	cmp	r2, #0
 800a688:	da12      	bge.n	800a6b0 <floorf+0x3c>
 800a68a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a6f0 <floorf+0x7c>
 800a68e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a692:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	dd06      	ble.n	800a6aa <floorf+0x36>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da24      	bge.n	800a6ea <floorf+0x76>
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	4b14      	ldr	r3, [pc, #80]	@ (800a6f4 <floorf+0x80>)
 800a6a4:	bf08      	it	eq
 800a6a6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a6aa:	ee00 3a10 	vmov	s0, r3
 800a6ae:	4770      	bx	lr
 800a6b0:	4911      	ldr	r1, [pc, #68]	@ (800a6f8 <floorf+0x84>)
 800a6b2:	4111      	asrs	r1, r2
 800a6b4:	420b      	tst	r3, r1
 800a6b6:	d0fa      	beq.n	800a6ae <floorf+0x3a>
 800a6b8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a6f0 <floorf+0x7c>
 800a6bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c8:	ddef      	ble.n	800a6aa <floorf+0x36>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bfbe      	ittt	lt
 800a6ce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a6d2:	fa40 f202 	asrlt.w	r2, r0, r2
 800a6d6:	189b      	addlt	r3, r3, r2
 800a6d8:	ea23 0301 	bic.w	r3, r3, r1
 800a6dc:	e7e5      	b.n	800a6aa <floorf+0x36>
 800a6de:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a6e2:	d3e4      	bcc.n	800a6ae <floorf+0x3a>
 800a6e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6e8:	4770      	bx	lr
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e7dd      	b.n	800a6aa <floorf+0x36>
 800a6ee:	bf00      	nop
 800a6f0:	7149f2ca 	.word	0x7149f2ca
 800a6f4:	bf800000 	.word	0xbf800000
 800a6f8:	007fffff 	.word	0x007fffff

0800a6fc <_init>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr

0800a708 <_fini>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr
